
CMAKE_MINIMUM_REQUIRED(VERSION 2.6 FATAL_ERROR)
PROJECT("Kabala Engine")

SET (CMAKE_VERBOSE_MAKEFILE TRUE)

######### Revision number
FIND_PACKAGE(Subversion)
IF(Subversion_FOUND)
   Subversion_WC_INFO(${CMAKE_HOME_DIRECTORY} Project)
   MESSAGE("Current revision is ${Project_WC_REVISION}")
ENDIF(Subversion_FOUND)

######### Version
FILE(STRINGS ${CMAKE_SOURCE_DIR}/VERSION VersionFile)
STRING(REGEX MATCH "([0-9]+)\\.([0-9]+)\\.([0-9])+" VersionMatch ${VersionFile})

SET(OPENSGTOOLBOX_MAJOR_VERSION ${CMAKE_MATCH_1})
SET(OPENSGTOOLBOX_MINOR_VERSION ${CMAKE_MATCH_2})
SET(OPENSGTOOLBOX_PATCH_VERSION ${CMAKE_MATCH_3})
SET(OPENSGTOOLBOX_VERSION "${OPENSGTOOLBOX_MAJOR_VERSION}.${OPENSGTOOLBOX_MINOR_VERSION}.${OPENSGTOOLBOX_PATCH_VERSION}")
MESSAGE("Current Version is ${OPENSGTOOLBOX_VERSION}")

######## IS 64 bit
IF( NOT APPLE )
   # check 64 bit
   IF( ${CMAKE_SIZEOF_VOID_P} EQUAL 4 )
     SET( HAVE_64_BIT 0 )
     MESSAGE("32 bit")
   ELSE( ${CMAKE_SIZEOF_VOID_P} EQUAL 4 )
     SET( HAVE_64_BIT 1 )
     MESSAGE("64 bit")
   ENDIF( ${CMAKE_SIZEOF_VOID_P} EQUAL 4 )
ELSE( NOT APPLE )
   SET( HAVE_64_BIT 0)
ENDIF( NOT APPLE )

######## Default Build Type
IF(NOT CMAKE_BUILD_TYPE)
	SET(CMAKE_BUILD_TYPE "Debug")
ENDIF(NOT CMAKE_BUILD_TYPE)

######### OpenSG
IF(WIN32)
   SET(OPENSG_BASE_DIR $ENV{OPENSG}/..)
ENDIF(WIN32)

FIND_PATH(OPENSG_BASE_DIR include/OpenSG/OSGConfig.h)
SET(OPENSG_INC_DIR ${OPENSG_BASE_DIR}/include)
SET(OPENSG_LIB_DIR ${OPENSG_BASE_DIR}/lib)

IF (UNIX)
   FIND_PROGRAM(OSG_CONFIG osg-config ${OPENSG_BASE_DIR}/bin)
   #IF (${OSG_CONFIG})
     IF(APPLE)
       EXECUTE_PROCESS(COMMAND ${OSG_CONFIG} --dbg --cflags Base System OUTPUT_VARIABLE OPENSG_CXX_FLAGS_DBG)
       STRING(STRIP ${OPENSG_CXX_FLAGS_DBG}  OPENSG_CXX_FLAGS_DBG)
       EXECUTE_PROCESS(COMMAND ${OSG_CONFIG} --opt --cflags Base System OUTPUT_VARIABLE OPENSG_CXX_FLAGS_OPT)
       STRING(STRIP ${OPENSG_CXX_FLAGS_OPT}  OPENSG_CXX_FLAGS_OPT)
       EXECUTE_PROCESS(COMMAND ${OSG_CONFIG} --dbg --lflags Base System OUTPUT_VARIABLE OPENSG_LD_FLAGS_DBG)
       STRING(STRIP ${OPENSG_LD_FLAGS_DBG}  OPENSG_LD_FLAGS_DBG)
       EXECUTE_PROCESS(COMMAND ${OSG_CONFIG} --opt --lflags Base System OUTPUT_VARIABLE OPENSG_LD_FLAGS_OPT)
       STRING(STRIP ${OPENSG_LD_FLAGS_OPT}  OPENSG_LD_FLAGS_OPT)
       EXECUTE_PROCESS(COMMAND ${OSG_CONFIG} --opt --libs Base System OUTPUT_VARIABLE OPENSG_LIBS_OPT)
       STRING(STRIP ${OPENSG_LIBS_OPT}  OPENSG_LIBS_OPT)
       SET(OPENSG_LIBS_OPT "${OPENSG_LIBS_OPT} -framework Carbon -framework AGL -lOSGWindowCarbon")
       EXECUTE_PROCESS(COMMAND ${OSG_CONFIG} --dbg --libs Base System OUTPUT_VARIABLE OPENSG_LIBS_DBG)
       STRING(STRIP ${OPENSG_LIBS_DBG}  OPENSG_LIBS_DBG)
       SET(OPENSG_LIBS_DBG "${OPENSG_LIBS_DBG} -framework Carbon -framework AGL -lOSGWindowCarbon")
     ELSE(APPLE)
       EXECUTE_PROCESS(COMMAND ${OSG_CONFIG} --dbg --cflags Base System X OUTPUT_VARIABLE OPENSG_CXX_FLAGS_DBG)
       STRING(STRIP ${OPENSG_CXX_FLAGS_DBG}  OPENSG_CXX_FLAGS_DBG)
       EXECUTE_PROCESS(COMMAND ${OSG_CONFIG} --opt --cflags Base System X OUTPUT_VARIABLE OPENSG_CXX_FLAGS_OPT)
       STRING(STRIP ${OPENSG_CXX_FLAGS_OPT}  OPENSG_CXX_FLAGS_OPT)
       EXECUTE_PROCESS(COMMAND ${OSG_CONFIG} --dbg --lflags Base System X OUTPUT_VARIABLE OPENSG_LD_FLAGS_DBG)
       STRING(STRIP ${OPENSG_LD_FLAGS_DBG}  OPENSG_LD_FLAGS_DBG)
       EXECUTE_PROCESS(COMMAND ${OSG_CONFIG} --opt --lflags Base System X OUTPUT_VARIABLE OPENSG_LD_FLAGS_OPT)
       STRING(STRIP ${OPENSG_LD_FLAGS_OPT}  OPENSG_LD_FLAGS_OPT)
       EXECUTE_PROCESS(COMMAND ${OSG_CONFIG} --opt --libs Base System X OUTPUT_VARIABLE OPENSG_LIBS_OPT)
       STRING(STRIP ${OPENSG_LIBS_OPT}  OPENSG_LIBS_OPT)
       EXECUTE_PROCESS(COMMAND ${OSG_CONFIG} --dbg --libs Base System X OUTPUT_VARIABLE OPENSG_LIBS_DBG)
       STRING(STRIP ${OPENSG_LIBS_DBG}  OPENSG_LIBS_DBG)
     ENDIF(APPLE)
     ELSE(${OSG_CONFIG})
        MESSAGE("osg-config not found")
     ENDIF (${OSG_CONFIG})
ENDIF(UNIX)

IF(WIN32)
   SET(OPENSG_CXX_FLAGS_DBG "-D_WIN32_WINNT=0x0400 -D_OSG_HAVE_CONFIGURED_H_ -DOSG_WITH_GLUT -DOSG_WITH_GIF -DOSG_WITH_TIF -DOSG_WITH_JPG -D_DEBUG /MP")
   SET(OPENSG_CXX_FLAGS_OPT "-D_WIN32_WINNT=0x0400 -D_OSG_HAVE_CONFIGURED_H_ -DOSG_WITH_GLUT -DOSG_WITH_GIF -DOSG_WITH_TIF -DOSG_WITH_JPG /MP")
   SET(OPENSG_LD_FLAGS_DBG "")
   SET(OPENSG_LD_FLAGS_OPT "")
   SET(OPENSG_LIBS_DBG OSGBaseD OSGSystemD)
   SET(OPENSG_LIBS_OPT OSGBase OSGSystem)
   SET(OPENSG_WINDOW_LIBS debug OSGWindowWIN32D optimized OSGWindowWIN32)                
ENDIF(WIN32)

######## BOOST
FIND_PACKAGE(Boost COMPONENTS system filesystem program_options)

######### FMod
OPTION(ENABLE_FMOD "Enable Fmod support in sound library." ON)
IF(ENABLE_FMOD)
   MESSAGE("Fmod Enabled")
   FIND_PATH(FMOD_BASE_DIR NAMES api/inc/fmod.h PATHS "/Developer/FMOD Programmers API")
   IF(NOT EXISTS ${FMOD_BASE_DIR})
      MESSAGE(SEND_ERROR "The supplied Fmod Base dir: ${FMOD_BASE_DIR} does not exist")
   ENDIF(NOT EXISTS ${FMOD_BASE_DIR})
   IF(NOT EXISTS ${FMOD_BASE_DIR}/api/inc)
      MESSAGE(SEND_ERROR "The Fmod Include dir: ${FMOD_BASE_DIR}/api/inc does not exist")
   ENDIF(NOT EXISTS ${FMOD_BASE_DIR}/api/inc)
   IF(NOT EXISTS ${FMOD_BASE_DIR}/api/lib)
      MESSAGE(SEND_ERROR "The Fmod Include dir: ${FMOD_BASE_DIR}/api/lib does not exist")
   ENDIF(NOT EXISTS ${FMOD_BASE_DIR}/api/lib)

   SET(FMOD_INC_DIR ${FMOD_BASE_DIR}/api/inc)
   SET(FMOD_LIB_DIR ${FMOD_BASE_DIR}/api/lib)
   IF(HAVE_64_BIT)
      SET(FMOD_LIBRARIES fmodex64)
   ELSE(HAVE_64_BIT)
      SET(FMOD_LIBRARIES fmodex)
   ENDIF(HAVE_64_BIT)
ENDIF(ENABLE_FMOD)

######### ODE
FIND_PATH(ODE_BASE_DIR include/ode/ode.h)
IF(NOT EXISTS ${ODE_BASE_DIR})
   MESSAGE(SEND_ERROR "The supplied ODE Base dir: ${ODE_BASE_DIR} does not exists")
ENDIF(NOT EXISTS ${ODE_BASE_DIR})
IF(NOT EXISTS ${ODE_BASE_DIR}/include)
   MESSAGE(SEND_ERROR "The ODE Include dir: ${ODE_BASE_DIR}/include does not exists")
ENDIF(NOT EXISTS ${ODE_BASE_DIR}/include)
IF(NOT EXISTS ${ODE_BASE_DIR}/lib)
   MESSAGE(SEND_ERROR "The ODE Include dir: ${ODE_BASE_DIR}/lib does not exists")
ENDIF(NOT EXISTS ${ODE_BASE_DIR}/lib)

SET(ODE_INC_DIR ${ODE_BASE_DIR}/include)
SET(ODE_LIB_DIR ${ODE_BASE_DIR}/lib)
SET(ODE_LIBRARIES ode)

######### OpenSGToolbox
FIND_PATH(OPENSGTOOLBOX_BASE_DIR include/OpenSG/Toolbox/OSGToolboxdef.h)
SET(OPENSGTOOLBOX_INC_DIR ${OPENSGTOOLBOX_BASE_DIR}/include)
SET(OPENSGTOOLBOX_LIB_DIR ${OPENSGTOOLBOX_BASE_DIR}/lib)
INCLUDE(${OPENSGTOOLBOX_BASE_DIR}/lib/export/OpenSGToolboxExport.cmake
   OPTIONAL
   RESULT_VARIABLE FOUND_OPENSGTOOLBOX_EXPORTS)

IF(${FOUND_OPENSGTOOLBOX_EXPORTS} STREQUAL NOTFOUND)
   MESSAGE("Did NOT find OpenSG Toolbox Exports: ${FOUND_OPENSGTOOLBOX_EXPORTS}")
ELSE(${FOUND_OPENSGTOOLBOX_EXPORTS} STREQUAL NOTFOUND)
   MESSAGE("FOUND OpenSG Toolbox Exports")
ENDIF(${FOUND_OPENSGTOOLBOX_EXPORTS} STREQUAL NOTFOUND)

#Include Boost and OpenSG
INCLUDE_DIRECTORIES(${Boost_INCLUDE_DIRS} ${OPENSG_INC_DIR}
   ${OPENSGTOOLBOX_INC_DIR} ${FMOD_INC_DIR} ${ODE_INC_DIR}
	${CMAKE_SOURCE_DIR}/Source)

#Link to bost and OpenSG
LINK_DIRECTORIES(${Boost_LIBRARY_DIRS} ${OPENSGTOOLBOX_LIB_DIR} ${FMOD_LIB_DIR} ${ODE_LIB_DIR})

######## Kabala Engine Executable

#Get a listing of the Header, source, and inline files
FILE(GLOB_RECURSE HEADERS ${CMAKE_SOURCE_DIR}/Source/[^~]*.h)
FILE(GLOB_RECURSE SOURCES ${CMAKE_SOURCE_DIR}/Source/[^~]*.cpp)
FILE(GLOB_RECURSE INLINES ${CMAKE_SOURCE_DIR}/Source/[^~]*.inl)

SET(CMAKE_DEBUG_POSTFIX "D")

ADD_EXECUTABLE(KabalaEngine ${HEADERS} ${SOURCES} ${INLINES})

#Attach all of the libraries
TARGET_LINK_LIBRARIES(KabalaEngine 
	optimized OSGToolbox  
	optimized OSGInput
	optimized OSGDynamics
	optimized OSGParticleSystem
	optimized OSGUserInterface
	optimized OSGGame
	optimized OSGSound
	optimized OSGPhysics
	optimized OSGAnimation
	
	debug OSGToolboxD  
	debug OSGInputD
	debug OSGDynamicsD
	debug OSGParticleSystemD
	debug OSGUserInterfaceD
	debug OSGGameD
	debug OSGSoundD
	debug OSGPhysicsD
	debug OSGAnimationD
   ${Boost_LIBRARIES} ${FMOD_LIBRARIES} ${ODE_LIBRARIES})

#Attach all of the Compile flags
SET_TARGET_PROPERTIES(KabalaEngine PROPERTIES COMPILE_FLAGS_DEBUG "${OPENSG_CXX_FLAGS_DBG}")
SET_TARGET_PROPERTIES(KabalaEngine PROPERTIES COMPILE_FLAGS_RELEASE "${OPENSG_CXX_FLAGS_OPT}")
SET_TARGET_PROPERTIES(KabalaEngine PROPERTIES COMPILE_FLAGS_MINSIZEREL "${OPENSG_CXX_FLAGS_OPT}")
SET_TARGET_PROPERTIES(KabalaEngine PROPERTIES COMPILE_FLAGS_RELWITHDEBINFO "${OPENSG_CXX_FLAGS_OPT}")

SET_TARGET_PROPERTIES(KabalaEngine PROPERTIES LINK_FLAGS_DEBUG "${OPENSG_LIBS_DBG}")
SET_TARGET_PROPERTIES(KabalaEngine PROPERTIES LINK_FLAGS ${OPENSG_LIBS_OPT})
SET_TARGET_PROPERTIES(KabalaEngine PROPERTIES LINK_FLAGS_MINSIZEREL "${OPENSG_LIBS_OPT}")
SET_TARGET_PROPERTIES(KabalaEngine PROPERTIES LINK_FLAGS_RELWITHDEBINFO "${OPENSG_LIBS_OPT}")

