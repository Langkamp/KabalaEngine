
CMAKE_MINIMUM_REQUIRED(VERSION 2.6 FATAL_ERROR)
PROJECT("Kabala Engine")

#SET (CMAKE_VERBOSE_MAKEFILE TRUE)

######### Revision number
FIND_PACKAGE(Subversion)
IF(Subversion_FOUND)
   Subversion_WC_INFO(${CMAKE_HOME_DIRECTORY} Project)
   MESSAGE("Current revision is ${Project_WC_REVISION}")
ENDIF(Subversion_FOUND)

######### Version
FILE(STRINGS ${CMAKE_SOURCE_DIR}/VERSION VersionFile)
STRING(REGEX MATCH "([0-9]+)\\.([0-9]+)\\.([0-9])+.*" VersionMatch ${VersionFile})

SET(KABALA_ENGINE_MAJOR_VERSION ${CMAKE_MATCH_1})
SET(KABALA_ENGINE_MINOR_VERSION ${CMAKE_MATCH_2})
SET(KABALA_ENGINE_PATCH_VERSION ${CMAKE_MATCH_3})
SET(KABALA_ENGINE_VERSION ${CMAKE_MATCH_0})
MESSAGE("Current Version is ${KABALA_ENGINE_VERSION}")

######## IS 64 bit
IF( NOT APPLE )
   # check 64 bit
   IF( ${CMAKE_SIZEOF_VOID_P} EQUAL 4 )
     SET( HAVE_64_BIT 0 )
     MESSAGE("32 bit")
   ELSE( ${CMAKE_SIZEOF_VOID_P} EQUAL 4 )
     SET( HAVE_64_BIT 1 )
     MESSAGE("64 bit")
   ENDIF( ${CMAKE_SIZEOF_VOID_P} EQUAL 4 )
ELSE( NOT APPLE )
   SET( HAVE_64_BIT 0)
ENDIF( NOT APPLE )

######## Default Build Type
IF(NOT CMAKE_BUILD_TYPE)
	SET(CMAKE_BUILD_TYPE "Debug")
ENDIF(NOT CMAKE_BUILD_TYPE)

######### OpenSG
IF(WIN32)
   SET(OPENSG_BASE_DIR $ENV{OPENSG}/..)
ENDIF(WIN32)

FIND_PATH(OPENSG_BASE_DIR include/OpenSG/OSGConfig.h)
SET(OPENSG_INC_DIR ${OPENSG_BASE_DIR}/include)
SET(OPENSG_LIB_DIR ${OPENSG_BASE_DIR}/lib)

IF (UNIX)
   FIND_PROGRAM(OSG_CONFIG osg-config ${OPENSG_BASE_DIR}/bin)
     IF(APPLE)
       EXECUTE_PROCESS(COMMAND ${OSG_CONFIG} --dbg --cflags Base System OUTPUT_VARIABLE OPENSG_CXX_FLAGS_DBG)
       STRING(STRIP ${OPENSG_CXX_FLAGS_DBG}  OPENSG_CXX_FLAGS_DBG)
       EXECUTE_PROCESS(COMMAND ${OSG_CONFIG} --opt --cflags Base System OUTPUT_VARIABLE OPENSG_CXX_FLAGS_OPT)
       STRING(STRIP ${OPENSG_CXX_FLAGS_OPT}  OPENSG_CXX_FLAGS_OPT)
       EXECUTE_PROCESS(COMMAND ${OSG_CONFIG} --dbg --lflags Base System OUTPUT_VARIABLE OPENSG_LD_FLAGS_DBG)
       STRING(STRIP ${OPENSG_LD_FLAGS_DBG}  OPENSG_LD_FLAGS_DBG)
       EXECUTE_PROCESS(COMMAND ${OSG_CONFIG} --opt --lflags Base System OUTPUT_VARIABLE OPENSG_LD_FLAGS_OPT)
       STRING(STRIP ${OPENSG_LD_FLAGS_OPT}  OPENSG_LD_FLAGS_OPT)
       EXECUTE_PROCESS(COMMAND ${OSG_CONFIG} --opt --libs Base System OUTPUT_VARIABLE OPENSG_LIBS_OPT)
       STRING(STRIP ${OPENSG_LIBS_OPT}  OPENSG_LIBS_OPT)
       SET(OPENSG_LIBS_OPT "${OPENSG_LIBS_OPT} -framework Carbon -framework AGL -lOSGWindowCarbon")
       EXECUTE_PROCESS(COMMAND ${OSG_CONFIG} --dbg --libs Base System OUTPUT_VARIABLE OPENSG_LIBS_DBG)
       STRING(STRIP ${OPENSG_LIBS_DBG}  OPENSG_LIBS_DBG)
       SET(OPENSG_LIBS_DBG "${OPENSG_LIBS_DBG} -framework Carbon -framework AGL -lOSGWindowCarbon")
     ELSE(APPLE)
       EXECUTE_PROCESS(COMMAND ${OSG_CONFIG} --dbg --cflags Base System X OUTPUT_VARIABLE OPENSG_CXX_FLAGS_DBG)
       STRING(STRIP ${OPENSG_CXX_FLAGS_DBG}  OPENSG_CXX_FLAGS_DBG)
       EXECUTE_PROCESS(COMMAND ${OSG_CONFIG} --opt --cflags Base System X OUTPUT_VARIABLE OPENSG_CXX_FLAGS_OPT)
       STRING(STRIP ${OPENSG_CXX_FLAGS_OPT}  OPENSG_CXX_FLAGS_OPT)
       EXECUTE_PROCESS(COMMAND ${OSG_CONFIG} --dbg --lflags Base System X OUTPUT_VARIABLE OPENSG_LD_FLAGS_DBG)
       STRING(STRIP ${OPENSG_LD_FLAGS_DBG}  OPENSG_LD_FLAGS_DBG)
       EXECUTE_PROCESS(COMMAND ${OSG_CONFIG} --opt --lflags Base System X OUTPUT_VARIABLE OPENSG_LD_FLAGS_OPT)
       STRING(STRIP ${OPENSG_LD_FLAGS_OPT}  OPENSG_LD_FLAGS_OPT)
       EXECUTE_PROCESS(COMMAND ${OSG_CONFIG} --opt --libs Base System X OUTPUT_VARIABLE OPENSG_LIBS_OPT)
       STRING(STRIP ${OPENSG_LIBS_OPT}  OPENSG_LIBS_OPT)
       EXECUTE_PROCESS(COMMAND ${OSG_CONFIG} --dbg --libs Base System X OUTPUT_VARIABLE OPENSG_LIBS_DBG)
       STRING(STRIP ${OPENSG_LIBS_DBG}  OPENSG_LIBS_DBG)
     ENDIF(APPLE)
ENDIF(UNIX)

IF(WIN32)
   SET(OPENSG_CXX_FLAGS_DBG "-D_WIN32_WINNT=0x0400 -D_OSG_HAVE_CONFIGURED_H_ -DOSG_WITH_GLUT -DOSG_WITH_GIF -DOSG_WITH_TIF -DOSG_WITH_JPG -D_DEBUG /MP")
   SET(OPENSG_CXX_FLAGS_OPT "-D_WIN32_WINNT=0x0400 -D_OSG_HAVE_CONFIGURED_H_ -DOSG_WITH_GLUT -DOSG_WITH_GIF -DOSG_WITH_TIF -DOSG_WITH_JPG /MP")
   SET(OPENSG_LD_FLAGS_DBG "")
   SET(OPENSG_LD_FLAGS_OPT "")
   SET(OPENSG_LIBS_DBG OSGBaseD OSGSystemD)
   SET(OPENSG_LIBS_OPT OSGBase OSGSystem)
   SET(OPENSG_WINDOW_LIBS debug OSGWindowWIN32D optimized OSGWindowWIN32)                
ENDIF(WIN32)

######## BOOST
FIND_PACKAGE(Boost COMPONENTS system filesystem program_options)

######### FMod
OPTION(ENABLE_FMOD "Enable Fmod support in sound library." ON)
IF(ENABLE_FMOD)
   MESSAGE("Fmod Enabled")
   FIND_PATH(FMOD_BASE_DIR NAMES api/inc/fmod.h PATHS "/Developer/FMOD Programmers API")
   IF(NOT EXISTS ${FMOD_BASE_DIR})
      MESSAGE(SEND_ERROR "The supplied Fmod Base dir: ${FMOD_BASE_DIR} does not exist")
   ENDIF(NOT EXISTS ${FMOD_BASE_DIR})
   IF(NOT EXISTS ${FMOD_BASE_DIR}/api/inc)
      MESSAGE(SEND_ERROR "The Fmod Include dir: ${FMOD_BASE_DIR}/api/inc does not exist")
   ENDIF(NOT EXISTS ${FMOD_BASE_DIR}/api/inc)
   IF(NOT EXISTS ${FMOD_BASE_DIR}/api/lib)
      MESSAGE(SEND_ERROR "The Fmod Include dir: ${FMOD_BASE_DIR}/api/lib does not exist")
   ENDIF(NOT EXISTS ${FMOD_BASE_DIR}/api/lib)

   SET(FMOD_INC_DIR ${FMOD_BASE_DIR}/api/inc)
   SET(FMOD_LIB_DIR ${FMOD_BASE_DIR}/api/lib)
   IF(HAVE_64_BIT)
      SET(FMOD_LIBRARIES fmodex64)
   ELSE(HAVE_64_BIT)
      SET(FMOD_LIBRARIES fmodex)
   ENDIF(HAVE_64_BIT)
ENDIF(ENABLE_FMOD)

######### ODE
FIND_PATH(ODE_BASE_DIR include/ode/ode.h)
IF(NOT EXISTS ${ODE_BASE_DIR})
   MESSAGE(SEND_ERROR "The supplied ODE Base dir: ${ODE_BASE_DIR} does not exists")
ENDIF(NOT EXISTS ${ODE_BASE_DIR})
IF(NOT EXISTS ${ODE_BASE_DIR}/include)
   MESSAGE(SEND_ERROR "The ODE Include dir: ${ODE_BASE_DIR}/include does not exists")
ENDIF(NOT EXISTS ${ODE_BASE_DIR}/include)
IF(NOT EXISTS ${ODE_BASE_DIR}/lib)
   MESSAGE(SEND_ERROR "The ODE Include dir: ${ODE_BASE_DIR}/lib does not exists")
ENDIF(NOT EXISTS ${ODE_BASE_DIR}/lib)

SET(ODE_INC_DIR ${ODE_BASE_DIR}/include)
SET(ODE_LIB_DIR ${ODE_BASE_DIR}/lib)
SET(ODE_LIBRARIES ode)

######### OpenSGToolbox
FIND_PATH(OPENSGTOOLBOX_BASE_DIR include/OpenSG/Toolbox/OSGToolboxdef.h)
SET(OPENSGTOOLBOX_INC_DIR ${OPENSGTOOLBOX_BASE_DIR}/include)
SET(OPENSGTOOLBOX_LIB_DIR ${OPENSGTOOLBOX_BASE_DIR}/lib)
INCLUDE(${OPENSGTOOLBOX_BASE_DIR}/lib/export/OpenSGToolboxExport.cmake
   OPTIONAL
   RESULT_VARIABLE FOUND_OPENSGTOOLBOX_EXPORTS)

IF(${FOUND_OPENSGTOOLBOX_EXPORTS} STREQUAL NOTFOUND)
   MESSAGE("Did NOT find OpenSG Toolbox Exports: ${FOUND_OPENSGTOOLBOX_EXPORTS}")
ELSE(${FOUND_OPENSGTOOLBOX_EXPORTS} STREQUAL NOTFOUND)
   MESSAGE("FOUND OpenSG Toolbox Exports")
ENDIF(${FOUND_OPENSGTOOLBOX_EXPORTS} STREQUAL NOTFOUND)

#Include Boost and OpenSG
INCLUDE_DIRECTORIES(${Boost_INCLUDE_DIRS} ${OPENSG_INC_DIR}
   ${OPENSGTOOLBOX_INC_DIR} ${FMOD_INC_DIR} ${ODE_INC_DIR}
	${CMAKE_SOURCE_DIR}/Source)

#Link to bost and OpenSG
LINK_DIRECTORIES(${Boost_LIBRARY_DIRS} ${OPENSGTOOLBOX_LIB_DIR} ${FMOD_LIB_DIR} ${ODE_LIB_DIR})

######## Kabala Engine Executable
#Configure the version and config headers
CONFIGURE_FILE(${CMAKE_SOURCE_DIR}/Source/KEVersion.h.in ${CMAKE_SOURCE_DIR}/Source/KEVersion.h)


#Get a listing of the Header, source, and inline files
FILE(GLOB_RECURSE HEADERS ${CMAKE_SOURCE_DIR}/Source/[^~]*.h)
FILE(GLOB_RECURSE SOURCES ${CMAKE_SOURCE_DIR}/Source/[^~]*.cpp)
FILE(GLOB_RECURSE INLINES ${CMAKE_SOURCE_DIR}/Source/[^~]*.inl)

SET(CMAKE_DEBUG_POSTFIX "D")

ADD_EXECUTABLE(KabalaEngine ${HEADERS} ${SOURCES} ${INLINES})

#Attach all of the libraries
TARGET_LINK_LIBRARIES(KabalaEngine 
	optimized OSGToolbox  
	optimized OSGInput
	optimized OSGDynamics
	optimized OSGParticleSystem
	optimized OSGUserInterface
#	optimized OSGGame
#	optimized OSGSound
#	optimized OSGPhysics
	optimized OSGAnimation
	
	debug OSGToolboxD  
	debug OSGInputD
	debug OSGDynamicsD
	debug OSGParticleSystemD
	debug OSGUserInterfaceD
#	debug OSGGameD
#	debug OSGSoundD
#	debug OSGPhysicsD
	debug OSGAnimationD
   ${Boost_LIBRARIES} ${FMOD_LIBRARIES} ${ODE_LIBRARIES})

#Attach all of the Compile flags
SET_TARGET_PROPERTIES(KabalaEngine PROPERTIES COMPILE_FLAGS_DEBUG "${OPENSG_CXX_FLAGS_DBG}")
SET_TARGET_PROPERTIES(KabalaEngine PROPERTIES COMPILE_FLAGS_RELEASE "${OPENSG_CXX_FLAGS_OPT}")
SET_TARGET_PROPERTIES(KabalaEngine PROPERTIES COMPILE_FLAGS_MINSIZEREL "${OPENSG_CXX_FLAGS_OPT}")
SET_TARGET_PROPERTIES(KabalaEngine PROPERTIES COMPILE_FLAGS_RELWITHDEBINFO "${OPENSG_CXX_FLAGS_OPT}")

SET_TARGET_PROPERTIES(KabalaEngine PROPERTIES LINK_FLAGS_DEBUG "${OPENSG_LIBS_DBG}")
SET_TARGET_PROPERTIES(KabalaEngine PROPERTIES LINK_FLAGS ${OPENSG_LIBS_OPT})
SET_TARGET_PROPERTIES(KabalaEngine PROPERTIES LINK_FLAGS_MINSIZEREL "${OPENSG_LIBS_OPT}")
SET_TARGET_PROPERTIES(KabalaEngine PROPERTIES LINK_FLAGS_RELWITHDEBINFO "${OPENSG_LIBS_OPT}")


#Install the libraries
INSTALL(TARGETS KabalaEngine
        EXPORT  KabalaEngineExport
        RUNTIME DESTINATION bin 
        LIBRARY DESTINATION lib
        ARCHIVE DESTINATION lib
        COMPONENT Application)

######## KabalaEngine Icons and Data
OPTION(BUILD_ICONS "Build the Icon set for the Kabala Engine" ON)
OPTION(INCLUDE_APP_DATA "Include the data used by the Kabala Engine" ON)

IF(BUILD_ICONS)
	FIND_PROGRAM(INKSCAPE_EXECUTABLE inkscape)
   FILE(GLOB_RECURSE ICON_SVG_SOURCE_FILES ${CMAKE_SOURCE_DIR}/Data/Images/Source/Icons/*.svg)

	SET(BUILD_ICON_DIMENSION 64 CACHE STRING "The vertical and horizontal dimenstions to use to create the icons.")

   FOREACH(ICON_SVG_SOURCE_FILE ${ICON_SVG_SOURCE_FILES})
	   FILE(RELATIVE_PATH ICON_SVG_NAME  ${CMAKE_SOURCE_DIR}/Data/Images/Source/Icons ${ICON_SVG_SOURCE_FILE})
   
	   #Extract a short name for the icon svg file
      STRING(REGEX MATCH "(.*)[.]svg" ICON_SVG_NAME ${ICON_SVG_NAME})
      SET(ICON_SVG_NAME ${CMAKE_MATCH_1})

	   FILE(MAKE_DIRECTORY ${CMAKE_BINARY_DIR}/Data/Images/Icons/${ICON_SVG_NAME})
	
      ADD_CUSTOM_COMMAND(OUTPUT ${CMAKE_BINARY_DIR}/Data/Images/Icons/${ICON_SVG_NAME}/${ICON_SVG_NAME}Normal.png
	    	                COMMAND ${INKSCAPE_EXECUTABLE} ${ICON_SVG_SOURCE_FILE} -w ${BUILD_ICON_DIMENSION} -h ${BUILD_ICON_DIMENSION} --export-png=${CMAKE_BINARY_DIR}/Data/Images/Icons/${ICON_SVG_NAME}/${ICON_SVG_NAME}Normal.png
		   					 DEPENDS ${ICON_SVG_SOURCE_FILE})
      LIST(APPEND ICON_PNG_TARGETS ${CMAKE_BINARY_DIR}/Data/Images/Icons/${ICON_SVG_NAME}/${ICON_SVG_NAME}Normal.png)

   ENDFOREACH(ICON_SVG_SOURCE_FILE ${ICON_SVG_SOURCE_FILES})

   ADD_CUSTOM_TARGET(Icons ALL COMMENT "Building the Icons"
	                  DEPENDS ${ICON_PNG_TARGETS})
   
	IF(INCLUDE_APP_DATA)
	   #Installing the Icon Set
      INSTALL(DIRECTORY ${CMAKE_BINARY_DIR}/Data/Images/Icons
                 DESTINATION share/KabalaEngine/Data/Images
                 COMPONENT Data)
	ENDIF(INCLUDE_APP_DATA)
ENDIF(BUILD_ICONS)

IF(INCLUDE_APP_DATA)
   #Installing the Information 
   INSTALL(FILES ${CMAKE_SOURCE_DIR}/LICENSE.txt
		        ${CMAKE_SOURCE_DIR}/README.txt
              ${CMAKE_SOURCE_DIR}/ABOUT.txt
              DESTINATION share/KabalaEngine/Data/Info
				  COMPONENT Application
              )
   #Installing the Model Set
   INSTALL(DIRECTORY ${CMAKE_SOURCE_DIR}/Data/Models
              DESTINATION share/KabalaEngine/Data
				  COMPONENT Data
              PATTERN ".svn" EXCLUDE)
   #Installing the Documentation
   INSTALL(DIRECTORY ${CMAKE_SOURCE_DIR}/Documentation
              DESTINATION share/KabalaEngine/Data
				  COMPONENT Documentation
              PATTERN ".svn" EXCLUDE)
ENDIF(INCLUDE_APP_DATA)


######## Packaging
#INCLUDE(InstallRequiredSystemLibraries)
SET(CPACK_PACKAGE_DESCRIPTION_SUMMARY "A Virtual Reality application authoring tool.")
SET(CPACK_PACKAGE_VENDOR "David Kabala")

SET(CPACK_PACKAGE_DESCRIPTION_FILE "${CMAKE_SOURCE_DIR}/README.txt")
SET(CPACK_RESOURCE_FILE_README "${CMAKE_SOURCE_DIR}/README.txt")
SET(CPACK_RESOURCE_FILE_WELCOME "${CMAKE_SOURCE_DIR}/WELCOME.txt")
SET(CPACK_RESOURCE_FILE_LICENSE "${CMAKE_SOURCE_DIR}/LICENSE.txt")


SET(CPACK_PACKAGE_VERSION_MAJOR ${KABALA_ENGINE_MAJOR_VERSION})
SET(CPACK_PACKAGE_VERSION_MINOR ${KABALA_ENGINE_MINOR_VERSION})
SET(CPACK_PACKAGE_VERSION_PATCH ${KABALA_ENGINE_PATCH_VERSION})
SET(CPACK_PACKAGE_VERSION ${KABALA_ENGINE_VERSION})
SET(CPACK_PACKAGE_INSTALL_DIRECTORY "CMake ${CMAKE_VERSION_MAJOR}.${CMAKE_VERSION_MINOR}")
SET(CPACK_PACKAGE_FILE_NAME "KabalaEngine-${CPACK_PACKAGE_VERSION}-${CMAKE_SYSTEM_NAME}")

#OS X Bundles
IF(APPLE)
   SET(CPACK_PACKAGE_ICON "${CMAKE_SOURCE_DIR}/Packaging/KabalaEngine-Icon-48x48.bmp")
	SET(CPACK_BUNDLE_PLIST "${CMAKE_SOURCE_DIR}/Packaging/OS X/Info.plist")
   SET(CPACK_BUNDLE_NAME "KabalaEngine")
   SET(CPACK_BUNDLE_ICON "${CPACK_PACKAGE_ICON}")
	SET(CPACK_BUNDLE_STARTUP_COMMAND "${CMAKE_SOURCE_DIR}/Packaging/OS X/KabalaEngine.sh")
ENDIF(APPLE)

#Linux
IF(UNIX)
   SET(CPACK_PACKAGE_ICON "${CMAKE_SOURCE_DIR}/Packaging/KabalaEngine-Icon-48x48.bmp")
ENDIF(UNIX)

#Windows
IF(WIN32)
   SET(CPACK_PACKAGE_ICON "${CMAKE_SOURCE_DIR}/Packaging/KabalaEngine-Icon-48x48.bmp")
ENDIF(WIN32)


IF(WIN32 AND NOT UNIX)
  # There is a bug in NSI that does not handle full unix paths properly. Make
  # sure there is at least one set of four (4) backlasshes.
  SET(CPACK_PACKAGE_ICON "${CMake_SOURCE_DIR}/Utilities/Release\\\\InstallIcon.bmp")
  SET(CPACK_NSIS_INSTALLED_ICON_NAME "bin\\\\MyExecutable.exe")
  SET(CPACK_NSIS_DISPLAY_NAME "${CPACK_PACKAGE_INSTALL_DIRECTORY} My Famous Project")
  SET(CPACK_NSIS_HELP_LINK "http:\\\\\\\\www.my-project-home-page.org")
  SET(CPACK_NSIS_URL_INFO_ABOUT "http:\\\\\\\\www.my-personal-home-page.com")
  SET(CPACK_NSIS_CONTACT "me@my-personal-home-page.com")
  SET(CPACK_NSIS_MODIFY_PATH ON)
ELSE(WIN32 AND NOT UNIX)
   #SET(CPACK_STRIP_FILES "bin/KabalaEngine")
   #SET(CPACK_SOURCE_STRIP_FILES "")
ENDIF(WIN32 AND NOT UNIX)
SET(CPACK_PACKAGE_EXECUTABLES "KabalaEngine" "KabalaEngine")

INCLUDE(CPack)
