/*---------------------------------------------------------------------------*\
 *                             Kabala Engine                                 *
 *                                                                           *
 *                         www.vrac.iastate.edu                              *
 *                                                                           *
 *   Authors: David Kabala (dkabala@vrac.iastate.edu)                        *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 3.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class MainApplication
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _KEMAINAPPLICATIONBASE_H_
#define _KEMAINAPPLICATIONBASE_H_
#ifdef __sgi
#pragma once
#endif


#include "KEConfig.h"
#include <KEKabalaEngineDef.h>

#include <OpenSG/OSGBaseTypes.h>
#include <OpenSG/OSGRefPtr.h>
#include <OpenSG/OSGCoredNodePtr.h>

#include <OpenSG/OSGFieldContainer.h> // Parent
#include <Application/KEApplicationSettingsFields.h> // Settings type
#include <OpenSG/Toolbox/OSGPathType.h> // SettingsLoadFile type
#include <OpenSG/Input/OSGWindowEventProducerFields.h> // MainWindowEventProducer type
#include <Project/KEProjectFields.h> // Project type
#include <Application/KEApplicationModeFields.h> // BuilderMode type
#include <Application/KEApplicationModeFields.h> // PlayerMode type
#include <Application/KEApplicationModeFields.h> // StartScreenMode type
#include <Application/KEApplicationModeFields.h> // CurrentMode type

#include "KEMainApplicationFields.h"

OSG_USING_NAMESPACE
KE_BEGIN_NAMESPACE

class MainApplication;
class osg::BinaryDataHandler;

//! \brief MainApplication Base Class.

class KE_KABALAENGINELIB_DLLMAPPING MainApplicationBase : public FieldContainer
{
  private:

    typedef FieldContainer    Inherited;

    /*==========================  PUBLIC  =================================*/
  public:

    typedef MainApplicationPtr  Ptr;

    enum
    {
        SettingsFieldId                = Inherited::NextFieldId,
        SettingsLoadFileFieldId        = SettingsFieldId                + 1,
        MainWindowEventProducerFieldId = SettingsLoadFileFieldId        + 1,
        ProjectFieldId                 = MainWindowEventProducerFieldId + 1,
        BuilderModeFieldId             = ProjectFieldId                 + 1,
        PlayerModeFieldId              = BuilderModeFieldId             + 1,
        StartScreenModeFieldId         = PlayerModeFieldId              + 1,
        CurrentModeFieldId             = StartScreenModeFieldId         + 1,
        NextFieldId                    = CurrentModeFieldId             + 1
    };

    static const OSG::BitVector SettingsFieldMask;
    static const OSG::BitVector SettingsLoadFileFieldMask;
    static const OSG::BitVector MainWindowEventProducerFieldMask;
    static const OSG::BitVector ProjectFieldMask;
    static const OSG::BitVector BuilderModeFieldMask;
    static const OSG::BitVector PlayerModeFieldMask;
    static const OSG::BitVector StartScreenModeFieldMask;
    static const OSG::BitVector CurrentModeFieldMask;


    static const OSG::BitVector MTInfluenceMask;

    /*---------------------------------------------------------------------*/
    /*! \name                    Class Get                                 */
    /*! \{                                                                 */

    static        FieldContainerType &getClassType    (void); 
    static        ::osg::UInt32              getClassTypeId  (void); 

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                FieldContainer Get                            */
    /*! \{                                                                 */

    virtual       FieldContainerType &getType  (void); 
    virtual const FieldContainerType &getType  (void) const; 

    virtual       ::osg::UInt32              getContainerSize(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */

           SFApplicationSettingsPtr *getSFSettings       (void);
           SFPath              *getSFSettingsLoadFile(void);
           SFWindowEventProducerPtr *getSFMainWindowEventProducer(void);
           SFProjectPtr        *getSFProject        (void);
           SFApplicationModePtr *getSFBuilderMode    (void);
           SFApplicationModePtr *getSFPlayerMode     (void);
           SFApplicationModePtr *getSFStartScreenMode(void);
           SFApplicationModePtr *getSFCurrentMode    (void);

           ApplicationSettingsPtr &getSettings       (void);
     const ApplicationSettingsPtr &getSettings       (void) const;
           Path                &getSettingsLoadFile(void);
     const Path                &getSettingsLoadFile(void) const;
           WindowEventProducerPtr &getMainWindowEventProducer(void);
     const WindowEventProducerPtr &getMainWindowEventProducer(void) const;
           ProjectPtr          &getProject        (void);
     const ProjectPtr          &getProject        (void) const;
           ApplicationModePtr  &getBuilderMode    (void);
     const ApplicationModePtr  &getBuilderMode    (void) const;
           ApplicationModePtr  &getPlayerMode     (void);
     const ApplicationModePtr  &getPlayerMode     (void) const;
           ApplicationModePtr  &getStartScreenMode(void);
     const ApplicationModePtr  &getStartScreenMode(void) const;
           ApplicationModePtr  &getCurrentMode    (void);
     const ApplicationModePtr  &getCurrentMode    (void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

     void setSettings       ( const ApplicationSettingsPtr &value );
     void setSettingsLoadFile( const Path &value );
     void setMainWindowEventProducer( const WindowEventProducerPtr &value );
     void setProject        ( const ProjectPtr &value );
     void setBuilderMode    ( const ApplicationModePtr &value );
     void setPlayerMode     ( const ApplicationModePtr &value );
     void setStartScreenMode( const ApplicationModePtr &value );
     void setCurrentMode    ( const ApplicationModePtr &value );

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Binary Access                              */
    /*! \{                                                                 */

    virtual ::osg::UInt32 getBinSize (const BitVector         &whichField);
    virtual void   copyToBin  (      BinaryDataHandler &pMem,
                               const BitVector         &whichField);
    virtual void   copyFromBin(      BinaryDataHandler &pMem,
                               const BitVector         &whichField);


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Construction                               */
    /*! \{                                                                 */

    static  MainApplicationPtr      create          (void); 
    static  MainApplicationPtr      createEmpty     (void); 

    /*! \}                                                                 */

    /*---------------------------------------------------------------------*/
    /*! \name                       Copy                                   */
    /*! \{                                                                 */

    virtual FieldContainerPtr     shallowCopy     (void) const; 

    /*! \}                                                                 */
    /*=========================  PROTECTED  ===============================*/
  protected:

    /*---------------------------------------------------------------------*/
    /*! \name                      Fields                                  */
    /*! \{                                                                 */

    SFApplicationSettingsPtr   _sfSettings;
    SFPath              _sfSettingsLoadFile;
    SFWindowEventProducerPtr   _sfMainWindowEventProducer;
    SFProjectPtr        _sfProject;
    SFApplicationModePtr   _sfBuilderMode;
    SFApplicationModePtr   _sfPlayerMode;
    SFApplicationModePtr   _sfStartScreenMode;
    SFApplicationModePtr   _sfCurrentMode;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Constructors                               */
    /*! \{                                                                 */

    MainApplicationBase(void);
    MainApplicationBase(const MainApplicationBase &source);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Destructors                                */
    /*! \{                                                                 */

    virtual ~MainApplicationBase(void); 

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

#if !defined(OSG_FIXED_MFIELDSYNC)
    void executeSyncImpl(      MainApplicationBase *pOther,
                         const BitVector         &whichField);

    virtual void   executeSync(      FieldContainer    &other,
                               const BitVector         &whichField);
#else
    void executeSyncImpl(      MainApplicationBase *pOther,
                         const BitVector         &whichField,
                         const SyncInfo          &sInfo     );

    virtual void   executeSync(      FieldContainer    &other,
                               const BitVector         &whichField,
                               const SyncInfo          &sInfo);

    virtual void execBeginEdit     (const BitVector &whichField,
                                          ::osg::UInt32     uiAspect,
                                          ::osg::UInt32     uiContainerSize);

            void execBeginEditImpl (const BitVector &whichField,
                                          ::osg::UInt32     uiAspect,
                                          ::osg::UInt32     uiContainerSize);

    virtual void onDestroyAspect(::osg::UInt32 uiId, ::osg::UInt32 uiAspect);
#endif

    /*! \}                                                                 */
    /*==========================  PRIVATE  ================================*/
  private:

    friend class FieldContainer;

    static FieldDescription   *_desc[];
    static FieldContainerType  _type;


    // prohibit default functions (move to 'public' if you need one)
    void operator =(const MainApplicationBase &source);
};

//---------------------------------------------------------------------------
//   Exported Types
//---------------------------------------------------------------------------


typedef MainApplicationBase *MainApplicationBaseP;

typedef osgIF<MainApplicationBase::isNodeCore,
              CoredNodePtr<MainApplication>,
              FieldContainer::attempt_to_create_CoredNodePtr_on_non_NodeCore_FC
              >::_IRet MainApplicationNodePtr;

typedef RefPtr<MainApplicationPtr> MainApplicationRefPtr;

KE_END_NAMESPACE

#endif /* _KEMAINAPPLICATIONBASE_H_ */
