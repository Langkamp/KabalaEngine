/*---------------------------------------------------------------------------*\
 *                             Kabala Engine                                 *
 *                                                                           *
 *                         www.vrac.iastate.edu                              *
 *                                                                           *
 *   Authors: David Kabala (dkabala@vrac.iastate.edu)                        *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 3.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class MainApplication!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#define KE_COMPILEMAINAPPLICATIONINST

#include <stdlib.h>
#include <stdio.h>

#include "KEConfig.h"

#include "KEMainApplicationBase.h"
#include "KEMainApplication.h"


KE_USING_NAMESPACE

const OSG::BitVector  MainApplicationBase::SettingsFieldMask = 
    (TypeTraits<BitVector>::One << MainApplicationBase::SettingsFieldId);

const OSG::BitVector  MainApplicationBase::SettingsLoadFileFieldMask = 
    (TypeTraits<BitVector>::One << MainApplicationBase::SettingsLoadFileFieldId);

const OSG::BitVector  MainApplicationBase::MainWindowEventProducerFieldMask = 
    (TypeTraits<BitVector>::One << MainApplicationBase::MainWindowEventProducerFieldId);

const OSG::BitVector  MainApplicationBase::ProjectFieldMask = 
    (TypeTraits<BitVector>::One << MainApplicationBase::ProjectFieldId);

const OSG::BitVector  MainApplicationBase::BuilderModeFieldMask = 
    (TypeTraits<BitVector>::One << MainApplicationBase::BuilderModeFieldId);

const OSG::BitVector  MainApplicationBase::PlayerModeFieldMask = 
    (TypeTraits<BitVector>::One << MainApplicationBase::PlayerModeFieldId);

const OSG::BitVector  MainApplicationBase::StartScreenModeFieldMask = 
    (TypeTraits<BitVector>::One << MainApplicationBase::StartScreenModeFieldId);

const OSG::BitVector  MainApplicationBase::CurrentModeFieldMask = 
    (TypeTraits<BitVector>::One << MainApplicationBase::CurrentModeFieldId);

const OSG::BitVector MainApplicationBase::MTInfluenceMask = 
    (Inherited::MTInfluenceMask) | 
    (static_cast<BitVector>(0x0) << Inherited::NextFieldId); 


// Field descriptions

/*! \var ApplicationSettingsPtr MainApplicationBase::_sfSettings
    
*/
/*! \var Path            MainApplicationBase::_sfSettingsLoadFile
    
*/
/*! \var WindowEventProducerPtr MainApplicationBase::_sfMainWindowEventProducer
    
*/
/*! \var ProjectPtr      MainApplicationBase::_sfProject
    
*/
/*! \var ApplicationModePtr MainApplicationBase::_sfBuilderMode
    
*/
/*! \var ApplicationModePtr MainApplicationBase::_sfPlayerMode
    
*/
/*! \var ApplicationModePtr MainApplicationBase::_sfStartScreenMode
    
*/
/*! \var ApplicationModePtr MainApplicationBase::_sfCurrentMode
    
*/

//! MainApplication description

FieldDescription *MainApplicationBase::_desc[] = 
{
    new FieldDescription(SFApplicationSettingsPtr::getClassType(), 
                     "Settings", 
                     SettingsFieldId, SettingsFieldMask,
                     false,
                     (FieldAccessMethod) &MainApplicationBase::getSFSettings),
    new FieldDescription(SFPath::getClassType(), 
                     "SettingsLoadFile", 
                     SettingsLoadFileFieldId, SettingsLoadFileFieldMask,
                     false,
                     (FieldAccessMethod) &MainApplicationBase::getSFSettingsLoadFile),
    new FieldDescription(SFWindowEventProducerPtr::getClassType(), 
                     "MainWindowEventProducer", 
                     MainWindowEventProducerFieldId, MainWindowEventProducerFieldMask,
                     true,
                     (FieldAccessMethod) &MainApplicationBase::getSFMainWindowEventProducer),
    new FieldDescription(SFProjectPtr::getClassType(), 
                     "Project", 
                     ProjectFieldId, ProjectFieldMask,
                     false,
                     (FieldAccessMethod) &MainApplicationBase::getSFProject),
    new FieldDescription(SFApplicationModePtr::getClassType(), 
                     "BuilderMode", 
                     BuilderModeFieldId, BuilderModeFieldMask,
                     false,
                     (FieldAccessMethod) &MainApplicationBase::getSFBuilderMode),
    new FieldDescription(SFApplicationModePtr::getClassType(), 
                     "PlayerMode", 
                     PlayerModeFieldId, PlayerModeFieldMask,
                     false,
                     (FieldAccessMethod) &MainApplicationBase::getSFPlayerMode),
    new FieldDescription(SFApplicationModePtr::getClassType(), 
                     "StartScreenMode", 
                     StartScreenModeFieldId, StartScreenModeFieldMask,
                     false,
                     (FieldAccessMethod) &MainApplicationBase::getSFStartScreenMode),
    new FieldDescription(SFApplicationModePtr::getClassType(), 
                     "CurrentMode", 
                     CurrentModeFieldId, CurrentModeFieldMask,
                     false,
                     (FieldAccessMethod) &MainApplicationBase::getSFCurrentMode)
};


FieldContainerType MainApplicationBase::_type(
    "MainApplication",
    "FieldContainer",
    NULL,
    (PrototypeCreateF) &MainApplicationBase::createEmpty,
    MainApplication::initMethod,
    _desc,
    sizeof(_desc));

//OSG_FIELD_CONTAINER_DEF(MainApplicationBase, MainApplicationPtr)

/*------------------------------ get -----------------------------------*/

FieldContainerType &MainApplicationBase::getType(void) 
{
    return _type; 
} 

const FieldContainerType &MainApplicationBase::getType(void) const 
{
    return _type;
} 


FieldContainerPtr MainApplicationBase::shallowCopy(void) const 
{ 
    MainApplicationPtr returnValue; 

    newPtr(returnValue, dynamic_cast<const MainApplication *>(this)); 

    return returnValue; 
}

::osg::UInt32 MainApplicationBase::getContainerSize(void) const 
{ 
    return sizeof(MainApplication); 
}


#if !defined(OSG_FIXED_MFIELDSYNC)
void MainApplicationBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField)
{
    this->executeSyncImpl((MainApplicationBase *) &other, whichField);
}
#else
void MainApplicationBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField,                                    const SyncInfo       &sInfo     )
{
    this->executeSyncImpl((MainApplicationBase *) &other, whichField, sInfo);
}
void MainApplicationBase::execBeginEdit(const BitVector &whichField, 
                                            ::osg::UInt32     uiAspect,
                                            ::osg::UInt32     uiContainerSize) 
{
    this->execBeginEditImpl(whichField, uiAspect, uiContainerSize);
}

void MainApplicationBase::onDestroyAspect(::osg::UInt32 uiId, ::osg::UInt32 uiAspect)
{
    Inherited::onDestroyAspect(uiId, uiAspect);

}
#endif

/*------------------------- constructors ----------------------------------*/

MainApplicationBase::MainApplicationBase(void) :
    _sfSettings               (ApplicationSettingsPtr(NullFC)), 
    _sfSettingsLoadFile       (Path("./.KEDefaultSettings.xml")), 
    _sfMainWindowEventProducer(WindowEventProducerPtr(NullFC)), 
    _sfProject                (ProjectPtr(NullFC)), 
    _sfBuilderMode            (ApplicationModePtr(NullFC)), 
    _sfPlayerMode             (ApplicationModePtr(NullFC)), 
    _sfStartScreenMode        (ApplicationModePtr(NullFC)), 
    _sfCurrentMode            (ApplicationModePtr(NullFC)), 
    Inherited() 
{
}

MainApplicationBase::MainApplicationBase(const MainApplicationBase &source) :
    _sfSettings               (source._sfSettings               ), 
    _sfSettingsLoadFile       (source._sfSettingsLoadFile       ), 
    _sfMainWindowEventProducer(source._sfMainWindowEventProducer), 
    _sfProject                (source._sfProject                ), 
    _sfBuilderMode            (source._sfBuilderMode            ), 
    _sfPlayerMode             (source._sfPlayerMode             ), 
    _sfStartScreenMode        (source._sfStartScreenMode        ), 
    _sfCurrentMode            (source._sfCurrentMode            ), 
    Inherited                 (source)
{
}

/*-------------------------- destructors ----------------------------------*/

MainApplicationBase::~MainApplicationBase(void)
{
}

/*------------------------------ access -----------------------------------*/

::osg::UInt32 MainApplicationBase::getBinSize(const BitVector &whichField)
{
    ::osg::UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (SettingsFieldMask & whichField))
    {
        returnValue += _sfSettings.getBinSize();
    }

    if(FieldBits::NoField != (SettingsLoadFileFieldMask & whichField))
    {
        returnValue += _sfSettingsLoadFile.getBinSize();
    }

    if(FieldBits::NoField != (MainWindowEventProducerFieldMask & whichField))
    {
        returnValue += _sfMainWindowEventProducer.getBinSize();
    }

    if(FieldBits::NoField != (ProjectFieldMask & whichField))
    {
        returnValue += _sfProject.getBinSize();
    }

    if(FieldBits::NoField != (BuilderModeFieldMask & whichField))
    {
        returnValue += _sfBuilderMode.getBinSize();
    }

    if(FieldBits::NoField != (PlayerModeFieldMask & whichField))
    {
        returnValue += _sfPlayerMode.getBinSize();
    }

    if(FieldBits::NoField != (StartScreenModeFieldMask & whichField))
    {
        returnValue += _sfStartScreenMode.getBinSize();
    }

    if(FieldBits::NoField != (CurrentModeFieldMask & whichField))
    {
        returnValue += _sfCurrentMode.getBinSize();
    }


    return returnValue;
}

void MainApplicationBase::copyToBin(      BinaryDataHandler &pMem,
                                  const BitVector         &whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (SettingsFieldMask & whichField))
    {
        _sfSettings.copyToBin(pMem);
    }

    if(FieldBits::NoField != (SettingsLoadFileFieldMask & whichField))
    {
        _sfSettingsLoadFile.copyToBin(pMem);
    }

    if(FieldBits::NoField != (MainWindowEventProducerFieldMask & whichField))
    {
        _sfMainWindowEventProducer.copyToBin(pMem);
    }

    if(FieldBits::NoField != (ProjectFieldMask & whichField))
    {
        _sfProject.copyToBin(pMem);
    }

    if(FieldBits::NoField != (BuilderModeFieldMask & whichField))
    {
        _sfBuilderMode.copyToBin(pMem);
    }

    if(FieldBits::NoField != (PlayerModeFieldMask & whichField))
    {
        _sfPlayerMode.copyToBin(pMem);
    }

    if(FieldBits::NoField != (StartScreenModeFieldMask & whichField))
    {
        _sfStartScreenMode.copyToBin(pMem);
    }

    if(FieldBits::NoField != (CurrentModeFieldMask & whichField))
    {
        _sfCurrentMode.copyToBin(pMem);
    }


}

void MainApplicationBase::copyFromBin(      BinaryDataHandler &pMem,
                                    const BitVector    &whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (SettingsFieldMask & whichField))
    {
        _sfSettings.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (SettingsLoadFileFieldMask & whichField))
    {
        _sfSettingsLoadFile.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (MainWindowEventProducerFieldMask & whichField))
    {
        _sfMainWindowEventProducer.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (ProjectFieldMask & whichField))
    {
        _sfProject.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (BuilderModeFieldMask & whichField))
    {
        _sfBuilderMode.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (PlayerModeFieldMask & whichField))
    {
        _sfPlayerMode.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (StartScreenModeFieldMask & whichField))
    {
        _sfStartScreenMode.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (CurrentModeFieldMask & whichField))
    {
        _sfCurrentMode.copyFromBin(pMem);
    }


}

#if !defined(OSG_FIXED_MFIELDSYNC)
void MainApplicationBase::executeSyncImpl(      MainApplicationBase *pOther,
                                        const BitVector         &whichField)
{

    Inherited::executeSyncImpl(pOther, whichField);

    if(FieldBits::NoField != (SettingsFieldMask & whichField))
        _sfSettings.syncWith(pOther->_sfSettings);

    if(FieldBits::NoField != (SettingsLoadFileFieldMask & whichField))
        _sfSettingsLoadFile.syncWith(pOther->_sfSettingsLoadFile);

    if(FieldBits::NoField != (MainWindowEventProducerFieldMask & whichField))
        _sfMainWindowEventProducer.syncWith(pOther->_sfMainWindowEventProducer);

    if(FieldBits::NoField != (ProjectFieldMask & whichField))
        _sfProject.syncWith(pOther->_sfProject);

    if(FieldBits::NoField != (BuilderModeFieldMask & whichField))
        _sfBuilderMode.syncWith(pOther->_sfBuilderMode);

    if(FieldBits::NoField != (PlayerModeFieldMask & whichField))
        _sfPlayerMode.syncWith(pOther->_sfPlayerMode);

    if(FieldBits::NoField != (StartScreenModeFieldMask & whichField))
        _sfStartScreenMode.syncWith(pOther->_sfStartScreenMode);

    if(FieldBits::NoField != (CurrentModeFieldMask & whichField))
        _sfCurrentMode.syncWith(pOther->_sfCurrentMode);


}
#else
void MainApplicationBase::executeSyncImpl(      MainApplicationBase *pOther,
                                        const BitVector         &whichField,
                                        const SyncInfo          &sInfo      )
{

    Inherited::executeSyncImpl(pOther, whichField, sInfo);

    if(FieldBits::NoField != (SettingsFieldMask & whichField))
        _sfSettings.syncWith(pOther->_sfSettings);

    if(FieldBits::NoField != (SettingsLoadFileFieldMask & whichField))
        _sfSettingsLoadFile.syncWith(pOther->_sfSettingsLoadFile);

    if(FieldBits::NoField != (MainWindowEventProducerFieldMask & whichField))
        _sfMainWindowEventProducer.syncWith(pOther->_sfMainWindowEventProducer);

    if(FieldBits::NoField != (ProjectFieldMask & whichField))
        _sfProject.syncWith(pOther->_sfProject);

    if(FieldBits::NoField != (BuilderModeFieldMask & whichField))
        _sfBuilderMode.syncWith(pOther->_sfBuilderMode);

    if(FieldBits::NoField != (PlayerModeFieldMask & whichField))
        _sfPlayerMode.syncWith(pOther->_sfPlayerMode);

    if(FieldBits::NoField != (StartScreenModeFieldMask & whichField))
        _sfStartScreenMode.syncWith(pOther->_sfStartScreenMode);

    if(FieldBits::NoField != (CurrentModeFieldMask & whichField))
        _sfCurrentMode.syncWith(pOther->_sfCurrentMode);



}

void MainApplicationBase::execBeginEditImpl (const BitVector &whichField, 
                                                 ::osg::UInt32     uiAspect,
                                                 ::osg::UInt32     uiContainerSize)
{
    Inherited::execBeginEditImpl(whichField, uiAspect, uiContainerSize);

}
#endif



#include <OpenSG/OSGSFieldTypeDef.inl>
#include <OpenSG/OSGMFieldTypeDef.inl>

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldDataTraits<MainApplicationPtr>::_type("MainApplicationPtr", "FieldContainerPtr");
#endif

KE_BEGIN_NAMESPACE

OSG_DLLEXPORT_SFIELD_DEF1(MainApplicationPtr, KE_KABALAENGINELIB_DLLTMPLMAPPING);
OSG_DLLEXPORT_MFIELD_DEF1(MainApplicationPtr, KE_KABALAENGINELIB_DLLTMPLMAPPING);

KE_END_NAMESPACE


