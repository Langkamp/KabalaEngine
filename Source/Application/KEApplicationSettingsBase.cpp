/*---------------------------------------------------------------------------*\
 *                             Kabala Engine                                 *
 *                                                                           *
 *               Copyright (C) 2009-2010 by David Kabala                     *
 *                                                                           *
 *   authors:  David Kabala (djkabala@gmail.com)                             *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU General Public License as published            *
 * by the Free Software Foundation, version 3.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU General Public                 *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class ApplicationSettings!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include <OpenSG/OSGConfig.h>




#include "KEApplicationSettingsBase.h"
#include "KEApplicationSettings.h"

#include <boost/bind.hpp>

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::ApplicationSettings
    The Main Application Settings.
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var BoostPath       ApplicationSettingsBase::_sfDataDirectory
    
*/

/*! \var BoostPath       ApplicationSettingsBase::_sfLastOpenedProjectFile
    
*/

/*! \var BoostPath       ApplicationSettingsBase::_mfRecentProjectFiles
    
*/

/*! \var Pnt2f           ApplicationSettingsBase::_sfDefaultWindowPosition
    
*/

/*! \var Vec2f           ApplicationSettingsBase::_sfDefaultWindowSize
    
*/

/*! \var bool            ApplicationSettingsBase::_sfFullscreen
    
*/

/*! \var bool            ApplicationSettingsBase::_sfHideAdvancedFields
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<ApplicationSettings *>::_type("ApplicationSettingsPtr", "FieldContainerPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(ApplicationSettings *)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           ApplicationSettings *,
                           0);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           ApplicationSettings *,
                           0);

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void ApplicationSettingsBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFBoostPath::Description(
        SFBoostPath::getClassType(),
        "DataDirectory",
        "",
        DataDirectoryFieldId, DataDirectoryFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ApplicationSettings::editHandleDataDirectory),
        static_cast<FieldGetMethodSig >(&ApplicationSettings::getHandleDataDirectory));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBoostPath::Description(
        SFBoostPath::getClassType(),
        "LastOpenedProjectFile",
        "",
        LastOpenedProjectFileFieldId, LastOpenedProjectFileFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ApplicationSettings::editHandleLastOpenedProjectFile),
        static_cast<FieldGetMethodSig >(&ApplicationSettings::getHandleLastOpenedProjectFile));

    oType.addInitialDesc(pDesc);

    pDesc = new MFBoostPath::Description(
        MFBoostPath::getClassType(),
        "RecentProjectFiles",
        "",
        RecentProjectFilesFieldId, RecentProjectFilesFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ApplicationSettings::editHandleRecentProjectFiles),
        static_cast<FieldGetMethodSig >(&ApplicationSettings::getHandleRecentProjectFiles));

    oType.addInitialDesc(pDesc);

    pDesc = new SFPnt2f::Description(
        SFPnt2f::getClassType(),
        "DefaultWindowPosition",
        "",
        DefaultWindowPositionFieldId, DefaultWindowPositionFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ApplicationSettings::editHandleDefaultWindowPosition),
        static_cast<FieldGetMethodSig >(&ApplicationSettings::getHandleDefaultWindowPosition));

    oType.addInitialDesc(pDesc);

    pDesc = new SFVec2f::Description(
        SFVec2f::getClassType(),
        "DefaultWindowSize",
        "",
        DefaultWindowSizeFieldId, DefaultWindowSizeFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ApplicationSettings::editHandleDefaultWindowSize),
        static_cast<FieldGetMethodSig >(&ApplicationSettings::getHandleDefaultWindowSize));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "Fullscreen",
        "",
        FullscreenFieldId, FullscreenFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ApplicationSettings::editHandleFullscreen),
        static_cast<FieldGetMethodSig >(&ApplicationSettings::getHandleFullscreen));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "HideAdvancedFields",
        "",
        HideAdvancedFieldsFieldId, HideAdvancedFieldsFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ApplicationSettings::editHandleHideAdvancedFields),
        static_cast<FieldGetMethodSig >(&ApplicationSettings::getHandleHideAdvancedFields));

    oType.addInitialDesc(pDesc);
}


ApplicationSettingsBase::TypeObject ApplicationSettingsBase::_type(
    ApplicationSettingsBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    reinterpret_cast<PrototypeCreateF>(&ApplicationSettingsBase::createEmptyLocal),
    ApplicationSettings::initMethod,
    ApplicationSettings::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&ApplicationSettings::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "\tname=\"ApplicationSettings\"\n"
    "\tparent=\"FieldContainer\"\n"
    "\tlibrary=\"KabalaEngine\"\n"
    "\tpointerfieldtypes=\"both\"\n"
    "\tstructure=\"concrete\"\n"
    "\tsystemcomponent=\"false\"\n"
    "\tparentsystemcomponent=\"true\"\n"
    "\tdecoratable=\"false\"\n"
    "\tuseLocalIncludes=\"false\"\n"
    "\tlibnamespace=\"KE\"\n"
    "    authors=\"David Kabala (djkabala@gmail.com)                             \"\n"
    ">\n"
    "The Main Application Settings.\n"
    "\t<Field\n"
    "\t\tname=\"DataDirectory\"\n"
    "\t\ttype=\"BoostPath\"\n"
    "\t\tcategory=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"LastOpenedProjectFile\"\n"
    "\t\ttype=\"BoostPath\"\n"
    "\t\tcategory=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"RecentProjectFiles\"\n"
    "\t\ttype=\"BoostPath\"\n"
    "\t\tcategory=\"data\"\n"
    "\t\tcardinality=\"multi\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"DefaultWindowPosition\"\n"
    "\t\ttype=\"Pnt2f\"\n"
    "\t\tcategory=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"0.5f,0.5f\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"DefaultWindowSize\"\n"
    "\t\ttype=\"Vec2f\"\n"
    "\t\tcategory=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"0.85f,0.85f\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"Fullscreen\"\n"
    "\t\ttype=\"bool\"\n"
    "\t\tcategory=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"false\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"HideAdvancedFields\"\n"
    "\t\ttype=\"bool\"\n"
    "\t\tcategory=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"true\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "</FieldContainer>\n",
    "The Main Application Settings.\n"
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &ApplicationSettingsBase::getType(void)
{
    return _type;
}

const FieldContainerType &ApplicationSettingsBase::getType(void) const
{
    return _type;
}

UInt32 ApplicationSettingsBase::getContainerSize(void) const
{
    return sizeof(ApplicationSettings);
}

/*------------------------- decorator get ------------------------------*/


SFBoostPath *ApplicationSettingsBase::editSFDataDirectory(void)
{
    editSField(DataDirectoryFieldMask);

    return &_sfDataDirectory;
}

const SFBoostPath *ApplicationSettingsBase::getSFDataDirectory(void) const
{
    return &_sfDataDirectory;
}


SFBoostPath *ApplicationSettingsBase::editSFLastOpenedProjectFile(void)
{
    editSField(LastOpenedProjectFileFieldMask);

    return &_sfLastOpenedProjectFile;
}

const SFBoostPath *ApplicationSettingsBase::getSFLastOpenedProjectFile(void) const
{
    return &_sfLastOpenedProjectFile;
}


MFBoostPath *ApplicationSettingsBase::editMFRecentProjectFiles(void)
{
    editMField(RecentProjectFilesFieldMask, _mfRecentProjectFiles);

    return &_mfRecentProjectFiles;
}

const MFBoostPath *ApplicationSettingsBase::getMFRecentProjectFiles(void) const
{
    return &_mfRecentProjectFiles;
}


SFPnt2f *ApplicationSettingsBase::editSFDefaultWindowPosition(void)
{
    editSField(DefaultWindowPositionFieldMask);

    return &_sfDefaultWindowPosition;
}

const SFPnt2f *ApplicationSettingsBase::getSFDefaultWindowPosition(void) const
{
    return &_sfDefaultWindowPosition;
}


SFVec2f *ApplicationSettingsBase::editSFDefaultWindowSize(void)
{
    editSField(DefaultWindowSizeFieldMask);

    return &_sfDefaultWindowSize;
}

const SFVec2f *ApplicationSettingsBase::getSFDefaultWindowSize(void) const
{
    return &_sfDefaultWindowSize;
}


SFBool *ApplicationSettingsBase::editSFFullscreen(void)
{
    editSField(FullscreenFieldMask);

    return &_sfFullscreen;
}

const SFBool *ApplicationSettingsBase::getSFFullscreen(void) const
{
    return &_sfFullscreen;
}


SFBool *ApplicationSettingsBase::editSFHideAdvancedFields(void)
{
    editSField(HideAdvancedFieldsFieldMask);

    return &_sfHideAdvancedFields;
}

const SFBool *ApplicationSettingsBase::getSFHideAdvancedFields(void) const
{
    return &_sfHideAdvancedFields;
}






/*------------------------------ access -----------------------------------*/

UInt32 ApplicationSettingsBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (DataDirectoryFieldMask & whichField))
    {
        returnValue += _sfDataDirectory.getBinSize();
    }
    if(FieldBits::NoField != (LastOpenedProjectFileFieldMask & whichField))
    {
        returnValue += _sfLastOpenedProjectFile.getBinSize();
    }
    if(FieldBits::NoField != (RecentProjectFilesFieldMask & whichField))
    {
        returnValue += _mfRecentProjectFiles.getBinSize();
    }
    if(FieldBits::NoField != (DefaultWindowPositionFieldMask & whichField))
    {
        returnValue += _sfDefaultWindowPosition.getBinSize();
    }
    if(FieldBits::NoField != (DefaultWindowSizeFieldMask & whichField))
    {
        returnValue += _sfDefaultWindowSize.getBinSize();
    }
    if(FieldBits::NoField != (FullscreenFieldMask & whichField))
    {
        returnValue += _sfFullscreen.getBinSize();
    }
    if(FieldBits::NoField != (HideAdvancedFieldsFieldMask & whichField))
    {
        returnValue += _sfHideAdvancedFields.getBinSize();
    }

    return returnValue;
}

void ApplicationSettingsBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (DataDirectoryFieldMask & whichField))
    {
        _sfDataDirectory.copyToBin(pMem);
    }
    if(FieldBits::NoField != (LastOpenedProjectFileFieldMask & whichField))
    {
        _sfLastOpenedProjectFile.copyToBin(pMem);
    }
    if(FieldBits::NoField != (RecentProjectFilesFieldMask & whichField))
    {
        _mfRecentProjectFiles.copyToBin(pMem);
    }
    if(FieldBits::NoField != (DefaultWindowPositionFieldMask & whichField))
    {
        _sfDefaultWindowPosition.copyToBin(pMem);
    }
    if(FieldBits::NoField != (DefaultWindowSizeFieldMask & whichField))
    {
        _sfDefaultWindowSize.copyToBin(pMem);
    }
    if(FieldBits::NoField != (FullscreenFieldMask & whichField))
    {
        _sfFullscreen.copyToBin(pMem);
    }
    if(FieldBits::NoField != (HideAdvancedFieldsFieldMask & whichField))
    {
        _sfHideAdvancedFields.copyToBin(pMem);
    }
}

void ApplicationSettingsBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (DataDirectoryFieldMask & whichField))
    {
        _sfDataDirectory.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (LastOpenedProjectFileFieldMask & whichField))
    {
        _sfLastOpenedProjectFile.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (RecentProjectFilesFieldMask & whichField))
    {
        _mfRecentProjectFiles.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (DefaultWindowPositionFieldMask & whichField))
    {
        _sfDefaultWindowPosition.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (DefaultWindowSizeFieldMask & whichField))
    {
        _sfDefaultWindowSize.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (FullscreenFieldMask & whichField))
    {
        _sfFullscreen.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (HideAdvancedFieldsFieldMask & whichField))
    {
        _sfHideAdvancedFields.copyFromBin(pMem);
    }
}

//! create a new instance of the class
ApplicationSettingsTransitPtr ApplicationSettingsBase::createLocal(BitVector bFlags)
{
    ApplicationSettingsTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<ApplicationSettings>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
ApplicationSettingsTransitPtr ApplicationSettingsBase::createDependent(BitVector bFlags)
{
    ApplicationSettingsTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<ApplicationSettings>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
ApplicationSettingsTransitPtr ApplicationSettingsBase::create(void)
{
    ApplicationSettingsTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<ApplicationSettings>(tmpPtr);
    }

    return fc;
}

ApplicationSettings *ApplicationSettingsBase::createEmptyLocal(BitVector bFlags)
{
    ApplicationSettings *returnValue;

    newPtr<ApplicationSettings>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
ApplicationSettings *ApplicationSettingsBase::createEmpty(void)
{
    ApplicationSettings *returnValue;

    newPtr<ApplicationSettings>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}


FieldContainerTransitPtr ApplicationSettingsBase::shallowCopyLocal(
    BitVector bFlags) const
{
    ApplicationSettings *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const ApplicationSettings *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr ApplicationSettingsBase::shallowCopyDependent(
    BitVector bFlags) const
{
    ApplicationSettings *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const ApplicationSettings *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr ApplicationSettingsBase::shallowCopy(void) const
{
    ApplicationSettings *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const ApplicationSettings *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}




/*------------------------- constructors ----------------------------------*/

ApplicationSettingsBase::ApplicationSettingsBase(void) :
    Inherited(),
    _sfDataDirectory          (),
    _sfLastOpenedProjectFile  (),
    _mfRecentProjectFiles     (),
    _sfDefaultWindowPosition  (Pnt2f(0.5f,0.5f)),
    _sfDefaultWindowSize      (Vec2f(0.85f,0.85f)),
    _sfFullscreen             (bool(false)),
    _sfHideAdvancedFields     (bool(true))
{
}

ApplicationSettingsBase::ApplicationSettingsBase(const ApplicationSettingsBase &source) :
    Inherited(source),
    _sfDataDirectory          (source._sfDataDirectory          ),
    _sfLastOpenedProjectFile  (source._sfLastOpenedProjectFile  ),
    _mfRecentProjectFiles     (source._mfRecentProjectFiles     ),
    _sfDefaultWindowPosition  (source._sfDefaultWindowPosition  ),
    _sfDefaultWindowSize      (source._sfDefaultWindowSize      ),
    _sfFullscreen             (source._sfFullscreen             ),
    _sfHideAdvancedFields     (source._sfHideAdvancedFields     )
{
}


/*-------------------------- destructors ----------------------------------*/

ApplicationSettingsBase::~ApplicationSettingsBase(void)
{
}


GetFieldHandlePtr ApplicationSettingsBase::getHandleDataDirectory   (void) const
{
    SFBoostPath::GetHandlePtr returnValue(
        new  SFBoostPath::GetHandle(
             &_sfDataDirectory,
             this->getType().getFieldDesc(DataDirectoryFieldId),
             const_cast<ApplicationSettingsBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ApplicationSettingsBase::editHandleDataDirectory  (void)
{
    SFBoostPath::EditHandlePtr returnValue(
        new  SFBoostPath::EditHandle(
             &_sfDataDirectory,
             this->getType().getFieldDesc(DataDirectoryFieldId),
             this));


    editSField(DataDirectoryFieldMask);

    return returnValue;
}

GetFieldHandlePtr ApplicationSettingsBase::getHandleLastOpenedProjectFile (void) const
{
    SFBoostPath::GetHandlePtr returnValue(
        new  SFBoostPath::GetHandle(
             &_sfLastOpenedProjectFile,
             this->getType().getFieldDesc(LastOpenedProjectFileFieldId),
             const_cast<ApplicationSettingsBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ApplicationSettingsBase::editHandleLastOpenedProjectFile(void)
{
    SFBoostPath::EditHandlePtr returnValue(
        new  SFBoostPath::EditHandle(
             &_sfLastOpenedProjectFile,
             this->getType().getFieldDesc(LastOpenedProjectFileFieldId),
             this));


    editSField(LastOpenedProjectFileFieldMask);

    return returnValue;
}

GetFieldHandlePtr ApplicationSettingsBase::getHandleRecentProjectFiles (void) const
{
    MFBoostPath::GetHandlePtr returnValue(
        new  MFBoostPath::GetHandle(
             &_mfRecentProjectFiles,
             this->getType().getFieldDesc(RecentProjectFilesFieldId),
             const_cast<ApplicationSettingsBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ApplicationSettingsBase::editHandleRecentProjectFiles(void)
{
    MFBoostPath::EditHandlePtr returnValue(
        new  MFBoostPath::EditHandle(
             &_mfRecentProjectFiles,
             this->getType().getFieldDesc(RecentProjectFilesFieldId),
             this));


    editMField(RecentProjectFilesFieldMask, _mfRecentProjectFiles);

    return returnValue;
}

GetFieldHandlePtr ApplicationSettingsBase::getHandleDefaultWindowPosition (void) const
{
    SFPnt2f::GetHandlePtr returnValue(
        new  SFPnt2f::GetHandle(
             &_sfDefaultWindowPosition,
             this->getType().getFieldDesc(DefaultWindowPositionFieldId),
             const_cast<ApplicationSettingsBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ApplicationSettingsBase::editHandleDefaultWindowPosition(void)
{
    SFPnt2f::EditHandlePtr returnValue(
        new  SFPnt2f::EditHandle(
             &_sfDefaultWindowPosition,
             this->getType().getFieldDesc(DefaultWindowPositionFieldId),
             this));


    editSField(DefaultWindowPositionFieldMask);

    return returnValue;
}

GetFieldHandlePtr ApplicationSettingsBase::getHandleDefaultWindowSize (void) const
{
    SFVec2f::GetHandlePtr returnValue(
        new  SFVec2f::GetHandle(
             &_sfDefaultWindowSize,
             this->getType().getFieldDesc(DefaultWindowSizeFieldId),
             const_cast<ApplicationSettingsBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ApplicationSettingsBase::editHandleDefaultWindowSize(void)
{
    SFVec2f::EditHandlePtr returnValue(
        new  SFVec2f::EditHandle(
             &_sfDefaultWindowSize,
             this->getType().getFieldDesc(DefaultWindowSizeFieldId),
             this));


    editSField(DefaultWindowSizeFieldMask);

    return returnValue;
}

GetFieldHandlePtr ApplicationSettingsBase::getHandleFullscreen      (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfFullscreen,
             this->getType().getFieldDesc(FullscreenFieldId),
             const_cast<ApplicationSettingsBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ApplicationSettingsBase::editHandleFullscreen     (void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfFullscreen,
             this->getType().getFieldDesc(FullscreenFieldId),
             this));


    editSField(FullscreenFieldMask);

    return returnValue;
}

GetFieldHandlePtr ApplicationSettingsBase::getHandleHideAdvancedFields (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfHideAdvancedFields,
             this->getType().getFieldDesc(HideAdvancedFieldsFieldId),
             const_cast<ApplicationSettingsBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ApplicationSettingsBase::editHandleHideAdvancedFields(void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfHideAdvancedFields,
             this->getType().getFieldDesc(HideAdvancedFieldsFieldId),
             this));


    editSField(HideAdvancedFieldsFieldMask);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void ApplicationSettingsBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    ApplicationSettings *pThis = static_cast<ApplicationSettings *>(this);

    pThis->execSync(static_cast<ApplicationSettings *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *ApplicationSettingsBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    ApplicationSettings *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const ApplicationSettings *>(pRefAspect),
                  dynamic_cast<const ApplicationSettings *>(this));

    return returnValue;
}
#endif

void ApplicationSettingsBase::resolveLinks(void)
{
    Inherited::resolveLinks();

#ifdef OSG_MT_CPTR_ASPECT
    AspectOffsetStore oOffsets;

    _pAspectStore->fillOffsetArray(oOffsets, this);
#endif

#ifdef OSG_MT_CPTR_ASPECT
    _mfRecentProjectFiles.terminateShare(Thread::getCurrentAspect(),
                                      oOffsets);
#endif
}


OSG_END_NAMESPACE
