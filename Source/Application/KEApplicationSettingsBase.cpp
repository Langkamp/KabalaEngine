/*---------------------------------------------------------------------------*\
 *                             Kabala Engine                                 *
 *                                                                           *
 *                                                                           *
 *   contact: djkabala@gmail.com                                             *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU General Public License as published            *
 * by the Free Software Foundation, version 3.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU General Public                 *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class ApplicationSettings!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#define KE_COMPILEAPPLICATIONSETTINGSINST

#include <stdlib.h>
#include <stdio.h>

#include <OpenSG/OSGConfig.h>

#include "KEApplicationSettingsBase.h"
#include "KEApplicationSettings.h"


OSG_BEGIN_NAMESPACE

const OSG::BitVector  ApplicationSettingsBase::DataDirectoryFieldMask = 
    (TypeTraits<BitVector>::One << ApplicationSettingsBase::DataDirectoryFieldId);

const OSG::BitVector  ApplicationSettingsBase::LastOpenedProjectFileFieldMask = 
    (TypeTraits<BitVector>::One << ApplicationSettingsBase::LastOpenedProjectFileFieldId);

const OSG::BitVector  ApplicationSettingsBase::RecentProjectFilesFieldMask = 
    (TypeTraits<BitVector>::One << ApplicationSettingsBase::RecentProjectFilesFieldId);

const OSG::BitVector  ApplicationSettingsBase::DefaultWindowPositionFieldMask = 
    (TypeTraits<BitVector>::One << ApplicationSettingsBase::DefaultWindowPositionFieldId);

const OSG::BitVector  ApplicationSettingsBase::DefaultWindowSizeFieldMask = 
    (TypeTraits<BitVector>::One << ApplicationSettingsBase::DefaultWindowSizeFieldId);

const OSG::BitVector  ApplicationSettingsBase::FullscreenFieldMask = 
    (TypeTraits<BitVector>::One << ApplicationSettingsBase::FullscreenFieldId);

const OSG::BitVector  ApplicationSettingsBase::HideAdvancedFieldsFieldMask = 
    (TypeTraits<BitVector>::One << ApplicationSettingsBase::HideAdvancedFieldsFieldId);

const OSG::BitVector ApplicationSettingsBase::MTInfluenceMask = 
    (Inherited::MTInfluenceMask) | 
    (static_cast<BitVector>(0x0) << Inherited::NextFieldId); 


// Field descriptions

/*! \var Path            ApplicationSettingsBase::_sfDataDirectory
    
*/
/*! \var Path            ApplicationSettingsBase::_sfLastOpenedProjectFile
    
*/
/*! \var Path            ApplicationSettingsBase::_mfRecentProjectFiles
    
*/
/*! \var Pnt2f           ApplicationSettingsBase::_sfDefaultWindowPosition
    
*/
/*! \var Vec2f           ApplicationSettingsBase::_sfDefaultWindowSize
    
*/
/*! \var bool            ApplicationSettingsBase::_sfFullscreen
    
*/
/*! \var bool            ApplicationSettingsBase::_sfHideAdvancedFields
    
*/

//! ApplicationSettings description

FieldDescription *ApplicationSettingsBase::_desc[] = 
{
    new FieldDescription(SFPath::getClassType(), 
                     "DataDirectory", 
                     DataDirectoryFieldId, DataDirectoryFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&ApplicationSettingsBase::editSFDataDirectory)),
    new FieldDescription(SFPath::getClassType(), 
                     "LastOpenedProjectFile", 
                     LastOpenedProjectFileFieldId, LastOpenedProjectFileFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&ApplicationSettingsBase::editSFLastOpenedProjectFile)),
    new FieldDescription(MFPath::getClassType(), 
                     "RecentProjectFiles", 
                     RecentProjectFilesFieldId, RecentProjectFilesFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&ApplicationSettingsBase::editMFRecentProjectFiles)),
    new FieldDescription(SFPnt2f::getClassType(), 
                     "DefaultWindowPosition", 
                     DefaultWindowPositionFieldId, DefaultWindowPositionFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&ApplicationSettingsBase::editSFDefaultWindowPosition)),
    new FieldDescription(SFVec2f::getClassType(), 
                     "DefaultWindowSize", 
                     DefaultWindowSizeFieldId, DefaultWindowSizeFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&ApplicationSettingsBase::editSFDefaultWindowSize)),
    new FieldDescription(SFBool::getClassType(), 
                     "Fullscreen", 
                     FullscreenFieldId, FullscreenFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&ApplicationSettingsBase::editSFFullscreen)),
    new FieldDescription(SFBool::getClassType(), 
                     "HideAdvancedFields", 
                     HideAdvancedFieldsFieldId, HideAdvancedFieldsFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&ApplicationSettingsBase::editSFHideAdvancedFields))
};


FieldContainerType ApplicationSettingsBase::_type(
    "ApplicationSettings",
    "FieldContainer",
    NULL,
    reinterpret_cast<PrototypeCreateF>(&ApplicationSettingsBase::createEmpty),
    ApplicationSettings::initMethod,
    _desc,
    sizeof(_desc));

//OSG_FIELD_CONTAINER_DEF(ApplicationSettingsBase, ApplicationSettingsPtr)

/*------------------------------ get -----------------------------------*/

FieldContainerType &ApplicationSettingsBase::getType(void) 
{
    return _type; 
} 

const FieldContainerType &ApplicationSettingsBase::getType(void) const 
{
    return _type;
} 


FieldContainerPtr ApplicationSettingsBase::shallowCopy(void) const 
{ 
    ApplicationSettingsPtr returnValue; 

    newPtr(returnValue, dynamic_cast<const ApplicationSettings *>(this)); 

    return returnValue; 
}

UInt32 ApplicationSettingsBase::getContainerSize(void) const 
{ 
    return sizeof(ApplicationSettings); 
}


#if !defined(OSG_FIXED_MFIELDSYNC)
void ApplicationSettingsBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField)
{
    this->executeSyncImpl(static_cast<ApplicationSettingsBase *>(&other),
                          whichField);
}
#else
void ApplicationSettingsBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField,                                    const SyncInfo       &sInfo     )
{
    this->executeSyncImpl((ApplicationSettingsBase *) &other, whichField, sInfo);
}
void ApplicationSettingsBase::execBeginEdit(const BitVector &whichField, 
                                            UInt32     uiAspect,
                                            UInt32     uiContainerSize) 
{
    this->execBeginEditImpl(whichField, uiAspect, uiContainerSize);
}

void ApplicationSettingsBase::onDestroyAspect(UInt32 uiId, UInt32 uiAspect)
{
    Inherited::onDestroyAspect(uiId, uiAspect);

    _mfRecentProjectFiles.terminateShare(uiAspect, this->getContainerSize());
}
#endif

/*------------------------- constructors ----------------------------------*/

#ifdef OSG_WIN32_ICL
#pragma warning (disable : 383)
#endif

ApplicationSettingsBase::ApplicationSettingsBase(void) :
    _sfDataDirectory          (), 
    _sfLastOpenedProjectFile  (), 
    _mfRecentProjectFiles     (), 
    _sfDefaultWindowPosition  (Pnt2f(0.0f,0.0f)), 
    _sfDefaultWindowSize      (Vec2f(900.0f,800.0f)), 
    _sfFullscreen             (bool(false)), 
    _sfHideAdvancedFields     (bool(true)), 
    Inherited() 
{
}

#ifdef OSG_WIN32_ICL
#pragma warning (default : 383)
#endif

ApplicationSettingsBase::ApplicationSettingsBase(const ApplicationSettingsBase &source) :
    _sfDataDirectory          (source._sfDataDirectory          ), 
    _sfLastOpenedProjectFile  (source._sfLastOpenedProjectFile  ), 
    _mfRecentProjectFiles     (source._mfRecentProjectFiles     ), 
    _sfDefaultWindowPosition  (source._sfDefaultWindowPosition  ), 
    _sfDefaultWindowSize      (source._sfDefaultWindowSize      ), 
    _sfFullscreen             (source._sfFullscreen             ), 
    _sfHideAdvancedFields     (source._sfHideAdvancedFields     ), 
    Inherited                 (source)
{
}

/*-------------------------- destructors ----------------------------------*/

ApplicationSettingsBase::~ApplicationSettingsBase(void)
{
}

/*------------------------------ access -----------------------------------*/

UInt32 ApplicationSettingsBase::getBinSize(const BitVector &whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (DataDirectoryFieldMask & whichField))
    {
        returnValue += _sfDataDirectory.getBinSize();
    }

    if(FieldBits::NoField != (LastOpenedProjectFileFieldMask & whichField))
    {
        returnValue += _sfLastOpenedProjectFile.getBinSize();
    }

    if(FieldBits::NoField != (RecentProjectFilesFieldMask & whichField))
    {
        returnValue += _mfRecentProjectFiles.getBinSize();
    }

    if(FieldBits::NoField != (DefaultWindowPositionFieldMask & whichField))
    {
        returnValue += _sfDefaultWindowPosition.getBinSize();
    }

    if(FieldBits::NoField != (DefaultWindowSizeFieldMask & whichField))
    {
        returnValue += _sfDefaultWindowSize.getBinSize();
    }

    if(FieldBits::NoField != (FullscreenFieldMask & whichField))
    {
        returnValue += _sfFullscreen.getBinSize();
    }

    if(FieldBits::NoField != (HideAdvancedFieldsFieldMask & whichField))
    {
        returnValue += _sfHideAdvancedFields.getBinSize();
    }


    return returnValue;
}

void ApplicationSettingsBase::copyToBin(      BinaryDataHandler &pMem,
                                  const BitVector         &whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (DataDirectoryFieldMask & whichField))
    {
        _sfDataDirectory.copyToBin(pMem);
    }

    if(FieldBits::NoField != (LastOpenedProjectFileFieldMask & whichField))
    {
        _sfLastOpenedProjectFile.copyToBin(pMem);
    }

    if(FieldBits::NoField != (RecentProjectFilesFieldMask & whichField))
    {
        _mfRecentProjectFiles.copyToBin(pMem);
    }

    if(FieldBits::NoField != (DefaultWindowPositionFieldMask & whichField))
    {
        _sfDefaultWindowPosition.copyToBin(pMem);
    }

    if(FieldBits::NoField != (DefaultWindowSizeFieldMask & whichField))
    {
        _sfDefaultWindowSize.copyToBin(pMem);
    }

    if(FieldBits::NoField != (FullscreenFieldMask & whichField))
    {
        _sfFullscreen.copyToBin(pMem);
    }

    if(FieldBits::NoField != (HideAdvancedFieldsFieldMask & whichField))
    {
        _sfHideAdvancedFields.copyToBin(pMem);
    }


}

void ApplicationSettingsBase::copyFromBin(      BinaryDataHandler &pMem,
                                    const BitVector    &whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (DataDirectoryFieldMask & whichField))
    {
        _sfDataDirectory.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (LastOpenedProjectFileFieldMask & whichField))
    {
        _sfLastOpenedProjectFile.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (RecentProjectFilesFieldMask & whichField))
    {
        _mfRecentProjectFiles.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (DefaultWindowPositionFieldMask & whichField))
    {
        _sfDefaultWindowPosition.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (DefaultWindowSizeFieldMask & whichField))
    {
        _sfDefaultWindowSize.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (FullscreenFieldMask & whichField))
    {
        _sfFullscreen.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (HideAdvancedFieldsFieldMask & whichField))
    {
        _sfHideAdvancedFields.copyFromBin(pMem);
    }


}

#if !defined(OSG_FIXED_MFIELDSYNC)
void ApplicationSettingsBase::executeSyncImpl(      ApplicationSettingsBase *pOther,
                                        const BitVector         &whichField)
{

    Inherited::executeSyncImpl(pOther, whichField);

    if(FieldBits::NoField != (DataDirectoryFieldMask & whichField))
        _sfDataDirectory.syncWith(pOther->_sfDataDirectory);

    if(FieldBits::NoField != (LastOpenedProjectFileFieldMask & whichField))
        _sfLastOpenedProjectFile.syncWith(pOther->_sfLastOpenedProjectFile);

    if(FieldBits::NoField != (RecentProjectFilesFieldMask & whichField))
        _mfRecentProjectFiles.syncWith(pOther->_mfRecentProjectFiles);

    if(FieldBits::NoField != (DefaultWindowPositionFieldMask & whichField))
        _sfDefaultWindowPosition.syncWith(pOther->_sfDefaultWindowPosition);

    if(FieldBits::NoField != (DefaultWindowSizeFieldMask & whichField))
        _sfDefaultWindowSize.syncWith(pOther->_sfDefaultWindowSize);

    if(FieldBits::NoField != (FullscreenFieldMask & whichField))
        _sfFullscreen.syncWith(pOther->_sfFullscreen);

    if(FieldBits::NoField != (HideAdvancedFieldsFieldMask & whichField))
        _sfHideAdvancedFields.syncWith(pOther->_sfHideAdvancedFields);


}
#else
void ApplicationSettingsBase::executeSyncImpl(      ApplicationSettingsBase *pOther,
                                        const BitVector         &whichField,
                                        const SyncInfo          &sInfo      )
{

    Inherited::executeSyncImpl(pOther, whichField, sInfo);

    if(FieldBits::NoField != (DataDirectoryFieldMask & whichField))
        _sfDataDirectory.syncWith(pOther->_sfDataDirectory);

    if(FieldBits::NoField != (LastOpenedProjectFileFieldMask & whichField))
        _sfLastOpenedProjectFile.syncWith(pOther->_sfLastOpenedProjectFile);

    if(FieldBits::NoField != (DefaultWindowPositionFieldMask & whichField))
        _sfDefaultWindowPosition.syncWith(pOther->_sfDefaultWindowPosition);

    if(FieldBits::NoField != (DefaultWindowSizeFieldMask & whichField))
        _sfDefaultWindowSize.syncWith(pOther->_sfDefaultWindowSize);

    if(FieldBits::NoField != (FullscreenFieldMask & whichField))
        _sfFullscreen.syncWith(pOther->_sfFullscreen);

    if(FieldBits::NoField != (HideAdvancedFieldsFieldMask & whichField))
        _sfHideAdvancedFields.syncWith(pOther->_sfHideAdvancedFields);


    if(FieldBits::NoField != (RecentProjectFilesFieldMask & whichField))
        _mfRecentProjectFiles.syncWith(pOther->_mfRecentProjectFiles, sInfo);


}

void ApplicationSettingsBase::execBeginEditImpl (const BitVector &whichField, 
                                                 UInt32     uiAspect,
                                                 UInt32     uiContainerSize)
{
    Inherited::execBeginEditImpl(whichField, uiAspect, uiContainerSize);

    if(FieldBits::NoField != (RecentProjectFilesFieldMask & whichField))
        _mfRecentProjectFiles.beginEdit(uiAspect, uiContainerSize);

}
#endif



OSG_END_NAMESPACE

#include <OpenSG/OSGSFieldTypeDef.inl>
#include <OpenSG/OSGMFieldTypeDef.inl>

OSG_BEGIN_NAMESPACE

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldDataTraits<ApplicationSettingsPtr>::_type("ApplicationSettingsPtr", "FieldContainerPtr");
#endif

OSG_DLLEXPORT_SFIELD_DEF1(ApplicationSettingsPtr, KE_KABALAENGINELIB_DLLTMPLMAPPING);
OSG_DLLEXPORT_MFIELD_DEF1(ApplicationSettingsPtr, KE_KABALAENGINELIB_DLLTMPLMAPPING);

OSG_END_NAMESPACE

