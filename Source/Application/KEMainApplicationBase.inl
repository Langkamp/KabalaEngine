/*---------------------------------------------------------------------------*\
 *                             Kabala Engine                                 *
 *                                                                           *
 *                         www.vrac.iastate.edu                              *
 *                                                                           *
 *   Authors: David Kabala (dkabala@vrac.iastate.edu)                        *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 3.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class MainApplication!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include "KEConfig.h"

KE_BEGIN_NAMESPACE


//! access the type of the class
inline
OSG::FieldContainerType &MainApplicationBase::getClassType(void)
{
    return _type; 
} 

//! access the numerical type of the class
inline
::osg::UInt32 MainApplicationBase::getClassTypeId(void) 
{
    return _type.getId(); 
} 

//! create a new instance of the class
inline
MainApplicationPtr MainApplicationBase::create(void) 
{
    MainApplicationPtr fc; 

    if(getClassType().getPrototype() != OSG::NullFC) 
    {
        fc = MainApplicationPtr::dcast(
            getClassType().getPrototype()-> shallowCopy()); 
    }
    
    return fc; 
}

//! create an empty new instance of the class, do not copy the prototype
inline
MainApplicationPtr MainApplicationBase::createEmpty(void) 
{ 
    MainApplicationPtr returnValue; 
    
    newPtr(returnValue); 

    return returnValue; 
}


/*------------------------------ get -----------------------------------*/

//! Get the MainApplication::_sfSettings field.
inline
SFApplicationSettingsPtr *MainApplicationBase::getSFSettings(void)
{
    return &_sfSettings;
}

//! Get the MainApplication::_sfSettingsLoadFile field.
inline
SFPath *MainApplicationBase::getSFSettingsLoadFile(void)
{
    return &_sfSettingsLoadFile;
}

//! Get the MainApplication::_sfMainWindowEventProducer field.
inline
SFWindowEventProducerPtr *MainApplicationBase::getSFMainWindowEventProducer(void)
{
    return &_sfMainWindowEventProducer;
}

//! Get the MainApplication::_sfProject field.
inline
SFProjectPtr *MainApplicationBase::getSFProject(void)
{
    return &_sfProject;
}

//! Get the MainApplication::_sfBuilderMode field.
inline
SFApplicationModePtr *MainApplicationBase::getSFBuilderMode(void)
{
    return &_sfBuilderMode;
}

//! Get the MainApplication::_sfPlayerMode field.
inline
SFApplicationModePtr *MainApplicationBase::getSFPlayerMode(void)
{
    return &_sfPlayerMode;
}

//! Get the MainApplication::_sfStartScreenMode field.
inline
SFApplicationModePtr *MainApplicationBase::getSFStartScreenMode(void)
{
    return &_sfStartScreenMode;
}

//! Get the MainApplication::_sfCurrentMode field.
inline
SFApplicationModePtr *MainApplicationBase::getSFCurrentMode(void)
{
    return &_sfCurrentMode;
}


//! Get the value of the MainApplication::_sfSettings field.
inline
ApplicationSettingsPtr &MainApplicationBase::getSettings(void)
{
    return _sfSettings.getValue();
}

//! Get the value of the MainApplication::_sfSettings field.
inline
const ApplicationSettingsPtr &MainApplicationBase::getSettings(void) const
{
    return _sfSettings.getValue();
}

//! Set the value of the MainApplication::_sfSettings field.
inline
void MainApplicationBase::setSettings(const ApplicationSettingsPtr &value)
{
    _sfSettings.setValue(value);
}

//! Get the value of the MainApplication::_sfSettingsLoadFile field.
inline
Path &MainApplicationBase::getSettingsLoadFile(void)
{
    return _sfSettingsLoadFile.getValue();
}

//! Get the value of the MainApplication::_sfSettingsLoadFile field.
inline
const Path &MainApplicationBase::getSettingsLoadFile(void) const
{
    return _sfSettingsLoadFile.getValue();
}

//! Set the value of the MainApplication::_sfSettingsLoadFile field.
inline
void MainApplicationBase::setSettingsLoadFile(const Path &value)
{
    _sfSettingsLoadFile.setValue(value);
}

//! Get the value of the MainApplication::_sfMainWindowEventProducer field.
inline
WindowEventProducerPtr &MainApplicationBase::getMainWindowEventProducer(void)
{
    return _sfMainWindowEventProducer.getValue();
}

//! Get the value of the MainApplication::_sfMainWindowEventProducer field.
inline
const WindowEventProducerPtr &MainApplicationBase::getMainWindowEventProducer(void) const
{
    return _sfMainWindowEventProducer.getValue();
}

//! Set the value of the MainApplication::_sfMainWindowEventProducer field.
inline
void MainApplicationBase::setMainWindowEventProducer(const WindowEventProducerPtr &value)
{
    _sfMainWindowEventProducer.setValue(value);
}

//! Get the value of the MainApplication::_sfProject field.
inline
ProjectPtr &MainApplicationBase::getProject(void)
{
    return _sfProject.getValue();
}

//! Get the value of the MainApplication::_sfProject field.
inline
const ProjectPtr &MainApplicationBase::getProject(void) const
{
    return _sfProject.getValue();
}

//! Set the value of the MainApplication::_sfProject field.
inline
void MainApplicationBase::setProject(const ProjectPtr &value)
{
    _sfProject.setValue(value);
}

//! Get the value of the MainApplication::_sfBuilderMode field.
inline
ApplicationModePtr &MainApplicationBase::getBuilderMode(void)
{
    return _sfBuilderMode.getValue();
}

//! Get the value of the MainApplication::_sfBuilderMode field.
inline
const ApplicationModePtr &MainApplicationBase::getBuilderMode(void) const
{
    return _sfBuilderMode.getValue();
}

//! Set the value of the MainApplication::_sfBuilderMode field.
inline
void MainApplicationBase::setBuilderMode(const ApplicationModePtr &value)
{
    _sfBuilderMode.setValue(value);
}

//! Get the value of the MainApplication::_sfPlayerMode field.
inline
ApplicationModePtr &MainApplicationBase::getPlayerMode(void)
{
    return _sfPlayerMode.getValue();
}

//! Get the value of the MainApplication::_sfPlayerMode field.
inline
const ApplicationModePtr &MainApplicationBase::getPlayerMode(void) const
{
    return _sfPlayerMode.getValue();
}

//! Set the value of the MainApplication::_sfPlayerMode field.
inline
void MainApplicationBase::setPlayerMode(const ApplicationModePtr &value)
{
    _sfPlayerMode.setValue(value);
}

//! Get the value of the MainApplication::_sfStartScreenMode field.
inline
ApplicationModePtr &MainApplicationBase::getStartScreenMode(void)
{
    return _sfStartScreenMode.getValue();
}

//! Get the value of the MainApplication::_sfStartScreenMode field.
inline
const ApplicationModePtr &MainApplicationBase::getStartScreenMode(void) const
{
    return _sfStartScreenMode.getValue();
}

//! Set the value of the MainApplication::_sfStartScreenMode field.
inline
void MainApplicationBase::setStartScreenMode(const ApplicationModePtr &value)
{
    _sfStartScreenMode.setValue(value);
}

//! Get the value of the MainApplication::_sfCurrentMode field.
inline
ApplicationModePtr &MainApplicationBase::getCurrentMode(void)
{
    return _sfCurrentMode.getValue();
}

//! Get the value of the MainApplication::_sfCurrentMode field.
inline
const ApplicationModePtr &MainApplicationBase::getCurrentMode(void) const
{
    return _sfCurrentMode.getValue();
}

//! Set the value of the MainApplication::_sfCurrentMode field.
inline
void MainApplicationBase::setCurrentMode(const ApplicationModePtr &value)
{
    _sfCurrentMode.setValue(value);
}


KE_END_NAMESPACE

