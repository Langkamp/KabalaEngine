/*---------------------------------------------------------------------------*\
 *                             Kabala Engine                                 *
 *                                                                           *
 *                         www.vrac.iastate.edu                              *
 *                                                                           *
 *   Authors: David Kabala (dkabala@vrac.iastate.edu)                        *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 3.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class ApplicationSettings
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _KEAPPLICATIONSETTINGSBASE_H_
#define _KEAPPLICATIONSETTINGSBASE_H_
#ifdef __sgi
#pragma once
#endif


#include "KEConfig.h"
#include <KEKabalaEngineDef.h>

#include <OpenSG/OSGBaseTypes.h>
#include <OpenSG/OSGRefPtr.h>
#include <OpenSG/OSGCoredNodePtr.h>

#include <OpenSG/OSGFieldContainer.h> // Parent
#include <OpenSG/Toolbox/OSGPathType.h> // DataDirectory type
#include <OpenSG/Toolbox/OSGPathType.h> // LastOpenedProjectFile type
#include <OpenSG/Toolbox/OSGPathType.h> // RecentProjectFiles type
#include <OpenSG/OSGPnt2fFields.h> // DefaultWindowPosition type
#include <OpenSG/OSGVec2fFields.h> // DefaultWindowSize type
#include <OpenSG/OSGBoolFields.h> // HideAdvancedFields type

#include "KEApplicationSettingsFields.h"

OSG_USING_NAMESPACE
KE_BEGIN_NAMESPACE

class ApplicationSettings;
class osg::BinaryDataHandler;

//! \brief ApplicationSettings Base Class.

class KE_KABALAENGINELIB_DLLMAPPING ApplicationSettingsBase : public FieldContainer
{
  private:

    typedef FieldContainer    Inherited;

    /*==========================  PUBLIC  =================================*/
  public:

    typedef ApplicationSettingsPtr  Ptr;

    enum
    {
        DataDirectoryFieldId         = Inherited::NextFieldId,
        LastOpenedProjectFileFieldId = DataDirectoryFieldId         + 1,
        RecentProjectFilesFieldId    = LastOpenedProjectFileFieldId + 1,
        DefaultWindowPositionFieldId = RecentProjectFilesFieldId    + 1,
        DefaultWindowSizeFieldId     = DefaultWindowPositionFieldId + 1,
        HideAdvancedFieldsFieldId    = DefaultWindowSizeFieldId     + 1,
        NextFieldId                  = HideAdvancedFieldsFieldId    + 1
    };

    static const OSG::BitVector DataDirectoryFieldMask;
    static const OSG::BitVector LastOpenedProjectFileFieldMask;
    static const OSG::BitVector RecentProjectFilesFieldMask;
    static const OSG::BitVector DefaultWindowPositionFieldMask;
    static const OSG::BitVector DefaultWindowSizeFieldMask;
    static const OSG::BitVector HideAdvancedFieldsFieldMask;


    static const OSG::BitVector MTInfluenceMask;

    /*---------------------------------------------------------------------*/
    /*! \name                    Class Get                                 */
    /*! \{                                                                 */

    static        FieldContainerType &getClassType    (void); 
    static        UInt32              getClassTypeId  (void); 

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                FieldContainer Get                            */
    /*! \{                                                                 */

    virtual       FieldContainerType &getType  (void); 
    virtual const FieldContainerType &getType  (void) const; 

    virtual       UInt32              getContainerSize(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */

           SFPath              *getSFDataDirectory  (void);
           SFPath              *getSFLastOpenedProjectFile(void);
           MFPath              *getMFRecentProjectFiles(void);
           SFPnt2f             *getSFDefaultWindowPosition(void);
           SFVec2f             *getSFDefaultWindowSize(void);
           SFBool              *getSFHideAdvancedFields(void);

           Path                &getDataDirectory  (void);
     const Path                &getDataDirectory  (void) const;
           Path                &getLastOpenedProjectFile(void);
     const Path                &getLastOpenedProjectFile(void) const;
           Pnt2f               &getDefaultWindowPosition(void);
     const Pnt2f               &getDefaultWindowPosition(void) const;
           Vec2f               &getDefaultWindowSize(void);
     const Vec2f               &getDefaultWindowSize(void) const;
           bool                &getHideAdvancedFields(void);
     const bool                &getHideAdvancedFields(void) const;
           Path                &getRecentProjectFiles(const UInt32 index);
           MFPath              &getRecentProjectFiles(void);
     const MFPath              &getRecentProjectFiles(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

     void setDataDirectory  ( const Path &value );
     void setLastOpenedProjectFile( const Path &value );
     void setDefaultWindowPosition( const Pnt2f &value );
     void setDefaultWindowSize( const Vec2f &value );
     void setHideAdvancedFields( const bool &value );

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Binary Access                              */
    /*! \{                                                                 */

    virtual UInt32 getBinSize (const BitVector         &whichField);
    virtual void   copyToBin  (      BinaryDataHandler &pMem,
                               const BitVector         &whichField);
    virtual void   copyFromBin(      BinaryDataHandler &pMem,
                               const BitVector         &whichField);


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Construction                               */
    /*! \{                                                                 */

    static  ApplicationSettingsPtr      create          (void); 
    static  ApplicationSettingsPtr      createEmpty     (void); 

    /*! \}                                                                 */

    /*---------------------------------------------------------------------*/
    /*! \name                       Copy                                   */
    /*! \{                                                                 */

    virtual FieldContainerPtr     shallowCopy     (void) const; 

    /*! \}                                                                 */
    /*=========================  PROTECTED  ===============================*/
  protected:

    /*---------------------------------------------------------------------*/
    /*! \name                      Fields                                  */
    /*! \{                                                                 */

    SFPath              _sfDataDirectory;
    SFPath              _sfLastOpenedProjectFile;
    MFPath              _mfRecentProjectFiles;
    SFPnt2f             _sfDefaultWindowPosition;
    SFVec2f             _sfDefaultWindowSize;
    SFBool              _sfHideAdvancedFields;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Constructors                               */
    /*! \{                                                                 */

    ApplicationSettingsBase(void);
    ApplicationSettingsBase(const ApplicationSettingsBase &source);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Destructors                                */
    /*! \{                                                                 */

    virtual ~ApplicationSettingsBase(void); 

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

#if !defined(OSG_FIXED_MFIELDSYNC)
    void executeSyncImpl(      ApplicationSettingsBase *pOther,
                         const BitVector         &whichField);

    virtual void   executeSync(      FieldContainer    &other,
                               const BitVector         &whichField);
#else
    void executeSyncImpl(      ApplicationSettingsBase *pOther,
                         const BitVector         &whichField,
                         const SyncInfo          &sInfo     );

    virtual void   executeSync(      FieldContainer    &other,
                               const BitVector         &whichField,
                               const SyncInfo          &sInfo);

    virtual void execBeginEdit     (const BitVector &whichField,
                                          UInt32     uiAspect,
                                          UInt32     uiContainerSize);

            void execBeginEditImpl (const BitVector &whichField,
                                          UInt32     uiAspect,
                                          UInt32     uiContainerSize);

    virtual void onDestroyAspect(UInt32 uiId, UInt32 uiAspect);
#endif

    /*! \}                                                                 */
    /*==========================  PRIVATE  ================================*/
  private:

    friend class FieldContainer;

    static FieldDescription   *_desc[];
    static FieldContainerType  _type;


    // prohibit default functions (move to 'public' if you need one)
    void operator =(const ApplicationSettingsBase &source);
};

//---------------------------------------------------------------------------
//   Exported Types
//---------------------------------------------------------------------------


typedef ApplicationSettingsBase *ApplicationSettingsBaseP;

typedef osgIF<ApplicationSettingsBase::isNodeCore,
              CoredNodePtr<ApplicationSettings>,
              FieldContainer::attempt_to_create_CoredNodePtr_on_non_NodeCore_FC
              >::_IRet ApplicationSettingsNodePtr;

typedef RefPtr<ApplicationSettingsPtr> ApplicationSettingsRefPtr;

KE_END_NAMESPACE

#endif /* _KEAPPLICATIONSETTINGSBASE_H_ */
