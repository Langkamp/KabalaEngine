/*---------------------------------------------------------------------------*\
 *                             Kabala Engine                                 *
 *                                                                           *
 *                         www.vrac.iastate.edu                              *
 *                                                                           *
 *   Authors: David Kabala (dkabala@vrac.iastate.edu)                        *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 3.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class SceneEditor!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#define KE_COMPILESCENEEDITORINST

#include <stdlib.h>
#include <stdio.h>

#include "KEConfig.h"

#include "KESceneEditorBase.h"
#include "KESceneEditor.h"


KE_USING_NAMESPACE

const OSG::BitVector  SceneEditorBase::EditorsFieldMask = 
    (TypeTraits<BitVector>::One << SceneEditorBase::EditorsFieldId);

const OSG::BitVector  SceneEditorBase::EditingSceneFieldMask = 
    (TypeTraits<BitVector>::One << SceneEditorBase::EditingSceneFieldId);

const OSG::BitVector SceneEditorBase::MTInfluenceMask = 
    (Inherited::MTInfluenceMask) | 
    (static_cast<BitVector>(0x0) << Inherited::NextFieldId); 


// Field descriptions

/*! \var SceneComponentEditorPtr SceneEditorBase::_mfEditors
    
*/
/*! \var ScenePtr        SceneEditorBase::_sfEditingScene
    
*/

//! SceneEditor description

FieldDescription *SceneEditorBase::_desc[] = 
{
    new FieldDescription(MFSceneComponentEditorPtr::getClassType(), 
                     "Editors", 
                     EditorsFieldId, EditorsFieldMask,
                     false,
                     (FieldAccessMethod) &SceneEditorBase::getMFEditors),
    new FieldDescription(SFScenePtr::getClassType(), 
                     "EditingScene", 
                     EditingSceneFieldId, EditingSceneFieldMask,
                     false,
                     (FieldAccessMethod) &SceneEditorBase::getSFEditingScene)
};


FieldContainerType SceneEditorBase::_type(
    "SceneEditor",
    "EditorInterface",
    NULL,
    (PrototypeCreateF) &SceneEditorBase::createEmpty,
    SceneEditor::initMethod,
    _desc,
    sizeof(_desc));

//OSG_FIELD_CONTAINER_DEF(SceneEditorBase, SceneEditorPtr)

/*------------------------------ get -----------------------------------*/

FieldContainerType &SceneEditorBase::getType(void) 
{
    return _type; 
} 

const FieldContainerType &SceneEditorBase::getType(void) const 
{
    return _type;
} 


FieldContainerPtr SceneEditorBase::shallowCopy(void) const 
{ 
    SceneEditorPtr returnValue; 

    newPtr(returnValue, dynamic_cast<const SceneEditor *>(this)); 

    return returnValue; 
}

::osg::UInt32 SceneEditorBase::getContainerSize(void) const 
{ 
    return sizeof(SceneEditor); 
}


#if !defined(OSG_FIXED_MFIELDSYNC)
void SceneEditorBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField)
{
    this->executeSyncImpl((SceneEditorBase *) &other, whichField);
}
#else
void SceneEditorBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField,                                    const SyncInfo       &sInfo     )
{
    this->executeSyncImpl((SceneEditorBase *) &other, whichField, sInfo);
}
void SceneEditorBase::execBeginEdit(const BitVector &whichField, 
                                            ::osg::UInt32     uiAspect,
                                            ::osg::UInt32     uiContainerSize) 
{
    this->execBeginEditImpl(whichField, uiAspect, uiContainerSize);
}

void SceneEditorBase::onDestroyAspect(::osg::UInt32 uiId, ::osg::UInt32 uiAspect)
{
    Inherited::onDestroyAspect(uiId, uiAspect);

    _mfEditors.terminateShare(uiAspect, this->getContainerSize());
}
#endif

/*------------------------- constructors ----------------------------------*/

SceneEditorBase::SceneEditorBase(void) :
    _mfEditors                (), 
    _sfEditingScene           (ScenePtr(NullFC)), 
    Inherited() 
{
}

SceneEditorBase::SceneEditorBase(const SceneEditorBase &source) :
    _mfEditors                (source._mfEditors                ), 
    _sfEditingScene           (source._sfEditingScene           ), 
    Inherited                 (source)
{
}

/*-------------------------- destructors ----------------------------------*/

SceneEditorBase::~SceneEditorBase(void)
{
}

/*------------------------------ access -----------------------------------*/

::osg::UInt32 SceneEditorBase::getBinSize(const BitVector &whichField)
{
    ::osg::UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (EditorsFieldMask & whichField))
    {
        returnValue += _mfEditors.getBinSize();
    }

    if(FieldBits::NoField != (EditingSceneFieldMask & whichField))
    {
        returnValue += _sfEditingScene.getBinSize();
    }


    return returnValue;
}

void SceneEditorBase::copyToBin(      BinaryDataHandler &pMem,
                                  const BitVector         &whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (EditorsFieldMask & whichField))
    {
        _mfEditors.copyToBin(pMem);
    }

    if(FieldBits::NoField != (EditingSceneFieldMask & whichField))
    {
        _sfEditingScene.copyToBin(pMem);
    }


}

void SceneEditorBase::copyFromBin(      BinaryDataHandler &pMem,
                                    const BitVector    &whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (EditorsFieldMask & whichField))
    {
        _mfEditors.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (EditingSceneFieldMask & whichField))
    {
        _sfEditingScene.copyFromBin(pMem);
    }


}

#if !defined(OSG_FIXED_MFIELDSYNC)
void SceneEditorBase::executeSyncImpl(      SceneEditorBase *pOther,
                                        const BitVector         &whichField)
{

    Inherited::executeSyncImpl(pOther, whichField);

    if(FieldBits::NoField != (EditorsFieldMask & whichField))
        _mfEditors.syncWith(pOther->_mfEditors);

    if(FieldBits::NoField != (EditingSceneFieldMask & whichField))
        _sfEditingScene.syncWith(pOther->_sfEditingScene);


}
#else
void SceneEditorBase::executeSyncImpl(      SceneEditorBase *pOther,
                                        const BitVector         &whichField,
                                        const SyncInfo          &sInfo      )
{

    Inherited::executeSyncImpl(pOther, whichField, sInfo);

    if(FieldBits::NoField != (EditingSceneFieldMask & whichField))
        _sfEditingScene.syncWith(pOther->_sfEditingScene);


    if(FieldBits::NoField != (EditorsFieldMask & whichField))
        _mfEditors.syncWith(pOther->_mfEditors, sInfo);


}

void SceneEditorBase::execBeginEditImpl (const BitVector &whichField, 
                                                 ::osg::UInt32     uiAspect,
                                                 ::osg::UInt32     uiContainerSize)
{
    Inherited::execBeginEditImpl(whichField, uiAspect, uiContainerSize);

    if(FieldBits::NoField != (EditorsFieldMask & whichField))
        _mfEditors.beginEdit(uiAspect, uiContainerSize);

}
#endif



#include <OpenSG/OSGSFieldTypeDef.inl>
#include <OpenSG/OSGMFieldTypeDef.inl>

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldDataTraits<SceneEditorPtr>::_type("SceneEditorPtr", "EditorInterfacePtr");
#endif

KE_BEGIN_NAMESPACE

OSG_DLLEXPORT_SFIELD_DEF1(SceneEditorPtr, KE_KABALAENGINELIB_DLLTMPLMAPPING);
OSG_DLLEXPORT_MFIELD_DEF1(SceneEditorPtr, KE_KABALAENGINELIB_DLLTMPLMAPPING);

KE_END_NAMESPACE


