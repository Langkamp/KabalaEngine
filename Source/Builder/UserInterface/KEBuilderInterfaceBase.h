/*---------------------------------------------------------------------------*\
 *                             Kabala Engine                                 *
 *                                                                           *
 *                                                                           *
 *   contact: djkabala@gmail.com                                             *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU General Public License as published            *
 * by the Free Software Foundation, version 3.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU General Public                 *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class BuilderInterface
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _KEBUILDERINTERFACEBASE_H_
#define _KEBUILDERINTERFACEBASE_H_
#ifdef __sgi
#pragma once
#endif


#include <OpenSG/OSGConfig.h>
#include "KEKabalaEngineDef.h"

#include <OpenSG/OSGBaseTypes.h>
#include <OpenSG/OSGRefPtr.h>
#include <OpenSG/OSGCoredNodePtr.h>

#include "KEInterface.h" // Parent
#include <OpenSG/UserInterface/OSGMenuBarFields.h> // MenuBar type
#include <OpenSG/UserInterface/OSGToolbarFields.h> // Toolbar type
#include <Builder/UserInterface/Statusbar/KEStatusbarFields.h> // Statusbar type
#include <Builder/UserInterface/KEEditorInterfaceFields.h> // Editor type
#include <OpenSG/UserInterface/OSGUIDrawingSurfaceFields.h> // DrawingSurface type
#include <OpenSG/UserInterface/OSGInternalWindowFields.h> // MainInternalWindow type

#include "KEBuilderInterfaceFields.h"

OSG_BEGIN_NAMESPACE

class BuilderInterface;
class BinaryDataHandler;

//! \brief BuilderInterface Base Class.

class KE_KABALAENGINELIB_DLLMAPPING BuilderInterfaceBase : public Interface
{
  private:

    typedef Interface    Inherited;

    /*==========================  PUBLIC  =================================*/
  public:

    typedef BuilderInterfacePtr  Ptr;

    enum
    {
        MenuBarFieldId            = Inherited::NextFieldId,
        ToolbarFieldId            = MenuBarFieldId            + 1,
        StatusbarFieldId          = ToolbarFieldId            + 1,
        EditorFieldId             = StatusbarFieldId          + 1,
        DrawingSurfaceFieldId     = EditorFieldId             + 1,
        MainInternalWindowFieldId = DrawingSurfaceFieldId     + 1,
        NextFieldId               = MainInternalWindowFieldId + 1
    };

    static const OSG::BitVector MenuBarFieldMask;
    static const OSG::BitVector ToolbarFieldMask;
    static const OSG::BitVector StatusbarFieldMask;
    static const OSG::BitVector EditorFieldMask;
    static const OSG::BitVector DrawingSurfaceFieldMask;
    static const OSG::BitVector MainInternalWindowFieldMask;


    static const OSG::BitVector MTInfluenceMask;

    /*---------------------------------------------------------------------*/
    /*! \name                    Class Get                                 */
    /*! \{                                                                 */

    static        FieldContainerType &getClassType    (void); 
    static        UInt32              getClassTypeId  (void); 

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                FieldContainer Get                            */
    /*! \{                                                                 */

    virtual       FieldContainerType &getType  (void); 
    virtual const FieldContainerType &getType  (void) const; 

    virtual       UInt32              getContainerSize(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */


           SFMenuBarPtr        *editSFMenuBar        (void);
     const SFMenuBarPtr        *getSFMenuBar        (void) const;
#ifndef OSG_2_PREP
           SFMenuBarPtr        *getSFMenuBar        (void);
#endif

           SFToolbarPtr        *editSFToolbar        (void);
     const SFToolbarPtr        *getSFToolbar        (void) const;
#ifndef OSG_2_PREP
           SFToolbarPtr        *getSFToolbar        (void);
#endif

           SFStatusbarPtr      *editSFStatusbar      (void);
     const SFStatusbarPtr      *getSFStatusbar      (void) const;
#ifndef OSG_2_PREP
           SFStatusbarPtr      *getSFStatusbar      (void);
#endif

           SFEditorInterfacePtr *editSFEditor         (void);
     const SFEditorInterfacePtr *getSFEditor         (void) const;
#ifndef OSG_2_PREP
           SFEditorInterfacePtr *getSFEditor         (void);
#endif

           SFUIDrawingSurfacePtr *editSFDrawingSurface (void);
     const SFUIDrawingSurfacePtr *getSFDrawingSurface (void) const;
#ifndef OSG_2_PREP
           SFUIDrawingSurfacePtr *getSFDrawingSurface (void);
#endif

           SFInternalWindowPtr *editSFMainInternalWindow(void);
     const SFInternalWindowPtr *getSFMainInternalWindow(void) const;
#ifndef OSG_2_PREP
           SFInternalWindowPtr *getSFMainInternalWindow(void);
#endif


           MenuBarPtr          &editMenuBar        (void);
     const MenuBarPtr          &getMenuBar        (void) const;
#ifndef OSG_2_PREP
           MenuBarPtr          &getMenuBar        (void);
#endif

           ToolbarPtr          &editToolbar        (void);
     const ToolbarPtr          &getToolbar        (void) const;
#ifndef OSG_2_PREP
           ToolbarPtr          &getToolbar        (void);
#endif

           StatusbarPtr        &editStatusbar      (void);
     const StatusbarPtr        &getStatusbar      (void) const;
#ifndef OSG_2_PREP
           StatusbarPtr        &getStatusbar      (void);
#endif

           EditorInterfacePtr  &editEditor         (void);
     const EditorInterfacePtr  &getEditor         (void) const;
#ifndef OSG_2_PREP
           EditorInterfacePtr  &getEditor         (void);
#endif

           UIDrawingSurfacePtr &editDrawingSurface (void);
     const UIDrawingSurfacePtr &getDrawingSurface (void) const;
#ifndef OSG_2_PREP
           UIDrawingSurfacePtr &getDrawingSurface (void);
#endif

           InternalWindowPtr   &editMainInternalWindow(void);
     const InternalWindowPtr   &getMainInternalWindow(void) const;
#ifndef OSG_2_PREP
           InternalWindowPtr   &getMainInternalWindow(void);
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

     void setMenuBar        ( const MenuBarPtr &value );
     void setToolbar        ( const ToolbarPtr &value );
     void setStatusbar      ( const StatusbarPtr &value );
     void setEditor         ( const EditorInterfacePtr &value );
     void setDrawingSurface ( const UIDrawingSurfacePtr &value );
     void setMainInternalWindow( const InternalWindowPtr &value );

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Binary Access                              */
    /*! \{                                                                 */

    virtual UInt32 getBinSize (const BitVector         &whichField);
    virtual void   copyToBin  (      BinaryDataHandler &pMem,
                               const BitVector         &whichField);
    virtual void   copyFromBin(      BinaryDataHandler &pMem,
                               const BitVector         &whichField);


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Construction                               */
    /*! \{                                                                 */

    static  BuilderInterfacePtr      create          (void); 
    static  BuilderInterfacePtr      createEmpty     (void); 

    /*! \}                                                                 */

    /*---------------------------------------------------------------------*/
    /*! \name                       Copy                                   */
    /*! \{                                                                 */

    virtual FieldContainerPtr     shallowCopy     (void) const; 

    /*! \}                                                                 */
    /*=========================  PROTECTED  ===============================*/
  protected:

    /*---------------------------------------------------------------------*/
    /*! \name                      Fields                                  */
    /*! \{                                                                 */

    SFMenuBarPtr        _sfMenuBar;
    SFToolbarPtr        _sfToolbar;
    SFStatusbarPtr      _sfStatusbar;
    SFEditorInterfacePtr   _sfEditor;
    SFUIDrawingSurfacePtr   _sfDrawingSurface;
    SFInternalWindowPtr   _sfMainInternalWindow;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Constructors                               */
    /*! \{                                                                 */

    BuilderInterfaceBase(void);
    BuilderInterfaceBase(const BuilderInterfaceBase &source);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Destructors                                */
    /*! \{                                                                 */

    virtual ~BuilderInterfaceBase(void); 

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

#if !defined(OSG_FIXED_MFIELDSYNC)
    void executeSyncImpl(      BuilderInterfaceBase *pOther,
                         const BitVector         &whichField);

    virtual void   executeSync(      FieldContainer    &other,
                               const BitVector         &whichField);
#else
    void executeSyncImpl(      BuilderInterfaceBase *pOther,
                         const BitVector         &whichField,
                         const SyncInfo          &sInfo     );

    virtual void   executeSync(      FieldContainer    &other,
                               const BitVector         &whichField,
                               const SyncInfo          &sInfo);

    virtual void execBeginEdit     (const BitVector &whichField,
                                          UInt32     uiAspect,
                                          UInt32     uiContainerSize);

            void execBeginEditImpl (const BitVector &whichField,
                                          UInt32     uiAspect,
                                          UInt32     uiContainerSize);

    virtual void onDestroyAspect(UInt32 uiId, UInt32 uiAspect);
#endif

    /*! \}                                                                 */
    /*==========================  PRIVATE  ================================*/
  private:

    friend class FieldContainer;

    static FieldDescription   *_desc[];
    static FieldContainerType  _type;


    // prohibit default functions (move to 'public' if you need one)
    void operator =(const BuilderInterfaceBase &source);
};

//---------------------------------------------------------------------------
//   Exported Types
//---------------------------------------------------------------------------


typedef BuilderInterfaceBase *BuilderInterfaceBaseP;

typedef osgIF<BuilderInterfaceBase::isNodeCore,
              CoredNodePtr<BuilderInterface>,
              FieldContainer::attempt_to_create_CoredNodePtr_on_non_NodeCore_FC
              >::_IRet BuilderInterfaceNodePtr;

typedef RefPtr<BuilderInterfacePtr> BuilderInterfaceRefPtr;

OSG_END_NAMESPACE

#endif /* _KEBUILDERINTERFACEBASE_H_ */
