/*---------------------------------------------------------------------------*\
 *                             Kabala Engine                                 *
 *                                                                           *
 *                         www.vrac.iastate.edu                              *
 *                                                                           *
 *   Authors: David Kabala (dkabala@vrac.iastate.edu)                        *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 3.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class Scene
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _KESCENEBASE_H_
#define _KESCENEBASE_H_
#ifdef __sgi
#pragma once
#endif


#include "KEConfig.h"
#include <KEKabalaEngineDef.h>

#include <OpenSG/OSGBaseTypes.h>
#include <OpenSG/OSGRefPtr.h>
#include <OpenSG/OSGCoredNodePtr.h>

#include <OpenSG/OSGFieldContainer.h> // Parent
#include <Project/KEProjectFields.h> // InternalParentProject type
#include <OpenSG/OSGStringFields.h> // Name type
#include <OpenSG/OSGBackgroundFields.h> // Backgrounds type
#include <OpenSG/OSGBackgroundFields.h> // InitialBackground type
#include <OpenSG/OSGForegroundFields.h> // Foregrounds type
#include <OpenSG/OSGForegroundFields.h> // InitialForegrounds type
#include <OpenSG/OSGNodeFields.h> // ModelNodes type
#include <OpenSG/OSGNodeFields.h> // InitialModelNodes type
#include <OpenSG/OSGNodeFields.h> // Root type
#include <OpenSG/OSGTransformFields.h> // RootCore type
#include <OpenSG/OSGNodeFields.h> // DefaultCameraBeacon type
#include <OpenSG/OSGTransformFields.h> // DefaultCameraBeaconCore type
#include <OpenSG/OSGCameraFields.h> // Cameras type
#include <OpenSG/OSGCameraFields.h> // InitialCamera type

#include "KESceneFields.h"

OSG_USING_NAMESPACE
KE_BEGIN_NAMESPACE

class Scene;
class osg::BinaryDataHandler;

//! \brief Scene Base Class.

class KE_KABALAENGINELIB_DLLMAPPING SceneBase : public FieldContainer
{
  private:

    typedef FieldContainer    Inherited;

    /*==========================  PUBLIC  =================================*/
  public:

    typedef ScenePtr  Ptr;

    enum
    {
        InternalParentProjectFieldId   = Inherited::NextFieldId,
        NameFieldId                    = InternalParentProjectFieldId   + 1,
        BackgroundsFieldId             = NameFieldId                    + 1,
        InitialBackgroundFieldId       = BackgroundsFieldId             + 1,
        ForegroundsFieldId             = InitialBackgroundFieldId       + 1,
        InitialForegroundsFieldId      = ForegroundsFieldId             + 1,
        ModelNodesFieldId              = InitialForegroundsFieldId      + 1,
        InitialModelNodesFieldId       = ModelNodesFieldId              + 1,
        RootFieldId                    = InitialModelNodesFieldId       + 1,
        RootCoreFieldId                = RootFieldId                    + 1,
        DefaultCameraBeaconFieldId     = RootCoreFieldId                + 1,
        DefaultCameraBeaconCoreFieldId = DefaultCameraBeaconFieldId     + 1,
        CamerasFieldId                 = DefaultCameraBeaconCoreFieldId + 1,
        InitialCameraFieldId           = CamerasFieldId                 + 1,
        NextFieldId                    = InitialCameraFieldId           + 1
    };

    static const OSG::BitVector InternalParentProjectFieldMask;
    static const OSG::BitVector NameFieldMask;
    static const OSG::BitVector BackgroundsFieldMask;
    static const OSG::BitVector InitialBackgroundFieldMask;
    static const OSG::BitVector ForegroundsFieldMask;
    static const OSG::BitVector InitialForegroundsFieldMask;
    static const OSG::BitVector ModelNodesFieldMask;
    static const OSG::BitVector InitialModelNodesFieldMask;
    static const OSG::BitVector RootFieldMask;
    static const OSG::BitVector RootCoreFieldMask;
    static const OSG::BitVector DefaultCameraBeaconFieldMask;
    static const OSG::BitVector DefaultCameraBeaconCoreFieldMask;
    static const OSG::BitVector CamerasFieldMask;
    static const OSG::BitVector InitialCameraFieldMask;


    static const OSG::BitVector MTInfluenceMask;

    /*---------------------------------------------------------------------*/
    /*! \name                    Class Get                                 */
    /*! \{                                                                 */

    static        FieldContainerType &getClassType    (void); 
    static        ::osg::UInt32              getClassTypeId  (void); 

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                FieldContainer Get                            */
    /*! \{                                                                 */

    virtual       FieldContainerType &getType  (void); 
    virtual const FieldContainerType &getType  (void) const; 

    virtual       ::osg::UInt32              getContainerSize(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */

           SFString            *getSFName           (void);
           MFBackgroundPtr     *getMFBackgrounds    (void);
           SFBackgroundPtr     *getSFInitialBackground(void);
           MFForegroundPtr     *getMFForegrounds    (void);
           MFForegroundPtr     *getMFInitialForegrounds(void);
           MFNodePtr           *getMFModelNodes     (void);
           MFNodePtr           *getMFInitialModelNodes(void);
           MFCameraPtr         *getMFCameras        (void);
           SFCameraPtr         *getSFInitialCamera  (void);

           std::string         &getName           (void);
     const std::string         &getName           (void) const;
           BackgroundPtr       &getInitialBackground(void);
     const BackgroundPtr       &getInitialBackground(void) const;
           CameraPtr           &getInitialCamera  (void);
     const CameraPtr           &getInitialCamera  (void) const;
           BackgroundPtr       &getBackgrounds    (const ::osg::UInt32 index);
           MFBackgroundPtr     &getBackgrounds    (void);
     const MFBackgroundPtr     &getBackgrounds    (void) const;
           ForegroundPtr       &getForegrounds    (const ::osg::UInt32 index);
           MFForegroundPtr     &getForegrounds    (void);
     const MFForegroundPtr     &getForegrounds    (void) const;
           ForegroundPtr       &getInitialForegrounds(const ::osg::UInt32 index);
           MFForegroundPtr     &getInitialForegrounds(void);
     const MFForegroundPtr     &getInitialForegrounds(void) const;
           NodePtr             &getModelNodes     (const ::osg::UInt32 index);
           MFNodePtr           &getModelNodes     (void);
     const MFNodePtr           &getModelNodes     (void) const;
           NodePtr             &getInitialModelNodes(const ::osg::UInt32 index);
           MFNodePtr           &getInitialModelNodes(void);
     const MFNodePtr           &getInitialModelNodes(void) const;
           CameraPtr           &getCameras        (const ::osg::UInt32 index);
           MFCameraPtr         &getCameras        (void);
     const MFCameraPtr         &getCameras        (void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

     void setName           ( const std::string &value );
     void setInitialBackground( const BackgroundPtr &value );
     void setInitialCamera  ( const CameraPtr &value );

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Binary Access                              */
    /*! \{                                                                 */

    virtual ::osg::UInt32 getBinSize (const BitVector         &whichField);
    virtual void   copyToBin  (      BinaryDataHandler &pMem,
                               const BitVector         &whichField);
    virtual void   copyFromBin(      BinaryDataHandler &pMem,
                               const BitVector         &whichField);


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Construction                               */
    /*! \{                                                                 */

    static  ScenePtr      create          (void); 
    static  ScenePtr      createEmpty     (void); 

    /*! \}                                                                 */

    /*---------------------------------------------------------------------*/
    /*! \name                       Copy                                   */
    /*! \{                                                                 */

    virtual FieldContainerPtr     shallowCopy     (void) const; 

    /*! \}                                                                 */
    /*=========================  PROTECTED  ===============================*/
  protected:

    /*---------------------------------------------------------------------*/
    /*! \name                      Fields                                  */
    /*! \{                                                                 */

    SFProjectPtr        _sfInternalParentProject;
    SFString            _sfName;
    MFBackgroundPtr     _mfBackgrounds;
    SFBackgroundPtr     _sfInitialBackground;
    MFForegroundPtr     _mfForegrounds;
    MFForegroundPtr     _mfInitialForegrounds;
    MFNodePtr           _mfModelNodes;
    MFNodePtr           _mfInitialModelNodes;
    SFNodePtr           _sfRoot;
    SFTransformPtr      _sfRootCore;
    SFNodePtr           _sfDefaultCameraBeacon;
    SFTransformPtr      _sfDefaultCameraBeaconCore;
    MFCameraPtr         _mfCameras;
    SFCameraPtr         _sfInitialCamera;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Constructors                               */
    /*! \{                                                                 */

    SceneBase(void);
    SceneBase(const SceneBase &source);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Destructors                                */
    /*! \{                                                                 */

    virtual ~SceneBase(void); 

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */

           SFProjectPtr        *getSFInternalParentProject(void);
           SFNodePtr           *getSFRoot           (void);
           SFTransformPtr      *getSFRootCore       (void);
           SFNodePtr           *getSFDefaultCameraBeacon(void);
           SFTransformPtr      *getSFDefaultCameraBeaconCore(void);

           ProjectPtr          &getInternalParentProject(void);
     const ProjectPtr          &getInternalParentProject(void) const;
           NodePtr             &getRoot           (void);
     const NodePtr             &getRoot           (void) const;
           TransformPtr        &getRootCore       (void);
     const TransformPtr        &getRootCore       (void) const;
           NodePtr             &getDefaultCameraBeacon(void);
     const NodePtr             &getDefaultCameraBeacon(void) const;
           TransformPtr        &getDefaultCameraBeaconCore(void);
     const TransformPtr        &getDefaultCameraBeaconCore(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

     void setInternalParentProject(const ProjectPtr &value);
     void setRoot           (const NodePtr &value);
     void setRootCore       (const TransformPtr &value);
     void setDefaultCameraBeacon(const NodePtr &value);
     void setDefaultCameraBeaconCore(const TransformPtr &value);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

#if !defined(OSG_FIXED_MFIELDSYNC)
    void executeSyncImpl(      SceneBase *pOther,
                         const BitVector         &whichField);

    virtual void   executeSync(      FieldContainer    &other,
                               const BitVector         &whichField);
#else
    void executeSyncImpl(      SceneBase *pOther,
                         const BitVector         &whichField,
                         const SyncInfo          &sInfo     );

    virtual void   executeSync(      FieldContainer    &other,
                               const BitVector         &whichField,
                               const SyncInfo          &sInfo);

    virtual void execBeginEdit     (const BitVector &whichField,
                                          ::osg::UInt32     uiAspect,
                                          ::osg::UInt32     uiContainerSize);

            void execBeginEditImpl (const BitVector &whichField,
                                          ::osg::UInt32     uiAspect,
                                          ::osg::UInt32     uiContainerSize);

    virtual void onDestroyAspect(::osg::UInt32 uiId, ::osg::UInt32 uiAspect);
#endif

    /*! \}                                                                 */
    /*==========================  PRIVATE  ================================*/
  private:

    friend class FieldContainer;

    static FieldDescription   *_desc[];
    static FieldContainerType  _type;


    // prohibit default functions (move to 'public' if you need one)
    void operator =(const SceneBase &source);
};

//---------------------------------------------------------------------------
//   Exported Types
//---------------------------------------------------------------------------


typedef SceneBase *SceneBaseP;

typedef osgIF<SceneBase::isNodeCore,
              CoredNodePtr<Scene>,
              FieldContainer::attempt_to_create_CoredNodePtr_on_non_NodeCore_FC
              >::_IRet SceneNodePtr;

typedef RefPtr<ScenePtr> SceneRefPtr;

KE_END_NAMESPACE

#endif /* _KESCENEBASE_H_ */
