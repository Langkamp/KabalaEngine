/*---------------------------------------------------------------------------*\
 *                             Kabala Engine                                 *
 *                                                                           *
 *               Copyright (C) 2009-2010 by David Kabala                     *
 *                                                                           *
 *   authors:  David Kabala (djkabala@gmail.com)                             *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU General Public License as published            *
 * by the Free Software Foundation, version 3.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU General Public                 *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class Scene!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

OSG_BEGIN_NAMESPACE


//! access the type of the class
inline
OSG::FieldContainerType &SceneBase::getClassType(void)
{
    return _type;
}

//! access the numerical type of the class
inline
OSG::UInt32 SceneBase::getClassTypeId(void)
{
    return _type.getId();
}
//! access the producer type of the class
inline
const EventProducerType &SceneBase::getProducerClassType(void)
{
    return _producerType;
}

//! access the producer type id of the class
inline
UInt32 SceneBase::getProducerClassTypeId(void)
{
    return _producerType.getId();
}

inline
OSG::UInt16 SceneBase::getClassGroupId(void)
{
    return _type.getGroupId();
}

/*------------------------------ get -----------------------------------*/


//! Get the value of the Scene::_sfInternalParentProject field.
inline
Project * SceneBase::getInternalParentProject(void) const
{
    return _sfInternalParentProject.getValue();
}

//! Set the value of the Scene::_sfInternalParentProject field.
inline
void SceneBase::setInternalParentProject(Project * const value)
{
    editSField(InternalParentProjectFieldMask);

    _sfInternalParentProject.setValue(value);
}

//! Get the value of the Scene::_sfInitialBackground field.
inline
Background * SceneBase::getInitialBackground(void) const
{
    return _sfInitialBackground.getValue();
}

//! Set the value of the Scene::_sfInitialBackground field.
inline
void SceneBase::setInitialBackground(Background * const value)
{
    editSField(InitialBackgroundFieldMask);

    _sfInitialBackground.setValue(value);
}

//! Get the value of the Scene::_sfRoot field.
inline
Node * SceneBase::getRoot(void) const
{
    return _sfRoot.getValue();
}

//! Set the value of the Scene::_sfRoot field.
inline
void SceneBase::setRoot(Node * const value)
{
    editSField(RootFieldMask);

    _sfRoot.setValue(value);
}

//! Get the value of the Scene::_sfRootCore field.
inline
Transform * SceneBase::getRootCore(void) const
{
    return _sfRootCore.getValue();
}

//! Set the value of the Scene::_sfRootCore field.
inline
void SceneBase::setRootCore(Transform * const value)
{
    editSField(RootCoreFieldMask);

    _sfRootCore.setValue(value);
}

//! Get the value of the Scene::_sfDefaultCameraBeacon field.
inline
Node * SceneBase::getDefaultCameraBeacon(void) const
{
    return _sfDefaultCameraBeacon.getValue();
}

//! Set the value of the Scene::_sfDefaultCameraBeacon field.
inline
void SceneBase::setDefaultCameraBeacon(Node * const value)
{
    editSField(DefaultCameraBeaconFieldMask);

    _sfDefaultCameraBeacon.setValue(value);
}

//! Get the value of the Scene::_sfDefaultCameraBeaconCore field.
inline
Transform * SceneBase::getDefaultCameraBeaconCore(void) const
{
    return _sfDefaultCameraBeaconCore.getValue();
}

//! Set the value of the Scene::_sfDefaultCameraBeaconCore field.
inline
void SceneBase::setDefaultCameraBeaconCore(Transform * const value)
{
    editSField(DefaultCameraBeaconCoreFieldMask);

    _sfDefaultCameraBeaconCore.setValue(value);
}

//! Get the value of the Scene::_sfInitialCamera field.
inline
Camera * SceneBase::getInitialCamera(void) const
{
    return _sfInitialCamera.getValue();
}

//! Set the value of the Scene::_sfInitialCamera field.
inline
void SceneBase::setInitialCamera(Camera * const value)
{
    editSField(InitialCameraFieldMask);

    _sfInitialCamera.setValue(value);
}
//! Get the value of the Scene::_sfLuaModule field.

inline
BoostPath &SceneBase::editLuaModule(void)
{
    editSField(LuaModuleFieldMask);

    return _sfLuaModule.getValue();
}

//! Get the value of the Scene::_sfLuaModule field.
inline
const BoostPath &SceneBase::getLuaModule(void) const
{
    return _sfLuaModule.getValue();
}

//! Set the value of the Scene::_sfLuaModule field.
inline
void SceneBase::setLuaModule(const BoostPath &value)
{
    editSField(LuaModuleFieldMask);

    _sfLuaModule.setValue(value);
}

//! Get the value of the Scene::_sfPhysicsHandler field.
inline
PhysicsHandler * SceneBase::getPhysicsHandler(void) const
{
    return _sfPhysicsHandler.getValue();
}

//! Set the value of the Scene::_sfPhysicsHandler field.
inline
void SceneBase::setPhysicsHandler(PhysicsHandler * const value)
{
    editSField(PhysicsHandlerFieldMask);

    _sfPhysicsHandler.setValue(value);
}

//! Get the value of the Scene::_sfPhysicsWorld field.
inline
PhysicsWorld * SceneBase::getPhysicsWorld(void) const
{
    return _sfPhysicsWorld.getValue();
}

//! Set the value of the Scene::_sfPhysicsWorld field.
inline
void SceneBase::setPhysicsWorld(PhysicsWorld * const value)
{
    editSField(PhysicsWorldFieldMask);

    _sfPhysicsWorld.setValue(value);
}
//! Get the value of the Scene::_sfGenericMethodIDs field.

inline
UInt32 &SceneBase::editGenericMethodIDs(void)
{
    editSField(GenericMethodIDsFieldMask);

    return _sfGenericMethodIDs.getValue();
}

//! Get the value of the Scene::_sfGenericMethodIDs field.
inline
      UInt32  SceneBase::getGenericMethodIDs(void) const
{
    return _sfGenericMethodIDs.getValue();
}

//! Set the value of the Scene::_sfGenericMethodIDs field.
inline
void SceneBase::setGenericMethodIDs(const UInt32 value)
{
    editSField(GenericMethodIDsFieldMask);

    _sfGenericMethodIDs.setValue(value);
}

//! Get the value of the \a index element the Scene::_mfSceneObjects field.
inline
SceneObject * SceneBase::getSceneObjects(const UInt32 index) const
{
    return _mfSceneObjects[index];
}

//! Get the value of the \a index element the Scene::_mfViewports field.
inline
Viewport * SceneBase::getViewports(const UInt32 index) const
{
    return _mfViewports[index];
}

//! Get the value of the \a index element the Scene::_mfBackgrounds field.
inline
Background * SceneBase::getBackgrounds(const UInt32 index) const
{
    return _mfBackgrounds[index];
}

//! Get the value of the \a index element the Scene::_mfUIDrawingSurfaces field.
inline
UIDrawingSurface * SceneBase::getUIDrawingSurfaces(const UInt32 index) const
{
    return _mfUIDrawingSurfaces[index];
}

//! Get the value of the \a index element the Scene::_mfForegrounds field.
inline
Foreground * SceneBase::getForegrounds(const UInt32 index) const
{
    return _mfForegrounds[index];
}

//! Get the value of the \a index element the Scene::_mfInitialForegrounds field.
inline
Foreground * SceneBase::getInitialForegrounds(const UInt32 index) const
{
    return _mfInitialForegrounds[index];
}

//! Get the value of the \a index element the Scene::_mfModelNodes field.
inline
Node * SceneBase::getModelNodes(const UInt32 index) const
{
    return _mfModelNodes[index];
}

//! Get the value of the \a index element the Scene::_mfInitialModelNodes field.
inline
Node * SceneBase::getInitialModelNodes(const UInt32 index) const
{
    return _mfInitialModelNodes[index];
}

//! Get the value of the \a index element the Scene::_mfCameras field.
inline
Camera * SceneBase::getCameras(const UInt32 index) const
{
    return _mfCameras[index];
}

//! Get the value of the \a index element the Scene::_mfAnimations field.
inline
Animation * SceneBase::getAnimations(const UInt32 index) const
{
    return _mfAnimations[index];
}

//! Get the value of the \a index element the Scene::_mfInitialAnimations field.
inline
Animation * SceneBase::getInitialAnimations(const UInt32 index) const
{
    return _mfInitialAnimations[index];
}

//! Get the value of the \a index element the Scene::_mfParticleSystems field.
inline
ParticleSystem * SceneBase::getParticleSystems(const UInt32 index) const
{
    return _mfParticleSystems[index];
}

//! Get the value of the \a index element the Scene::_mfInitialParticleSystems field.
inline
ParticleSystem * SceneBase::getInitialParticleSystems(const UInt32 index) const
{
    return _mfInitialParticleSystems[index];
}


#ifdef OSG_MT_CPTR_ASPECT
inline
void SceneBase::execSync (      SceneBase *pFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    Inherited::execSync(pFrom, whichField, oOffsets, syncMode, uiSyncInfo);

    if(FieldBits::NoField != (SceneObjectsFieldMask & whichField))
        _mfSceneObjects.syncWith(pFrom->_mfSceneObjects,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (InternalParentProjectFieldMask & whichField))
        _sfInternalParentProject.syncWith(pFrom->_sfInternalParentProject);

    if(FieldBits::NoField != (ViewportsFieldMask & whichField))
        _mfViewports.syncWith(pFrom->_mfViewports,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (BackgroundsFieldMask & whichField))
        _mfBackgrounds.syncWith(pFrom->_mfBackgrounds,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (UIDrawingSurfacesFieldMask & whichField))
        _mfUIDrawingSurfaces.syncWith(pFrom->_mfUIDrawingSurfaces,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (InitialBackgroundFieldMask & whichField))
        _sfInitialBackground.syncWith(pFrom->_sfInitialBackground);

    if(FieldBits::NoField != (ForegroundsFieldMask & whichField))
        _mfForegrounds.syncWith(pFrom->_mfForegrounds,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (InitialForegroundsFieldMask & whichField))
        _mfInitialForegrounds.syncWith(pFrom->_mfInitialForegrounds,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (ModelNodesFieldMask & whichField))
        _mfModelNodes.syncWith(pFrom->_mfModelNodes,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (InitialModelNodesFieldMask & whichField))
        _mfInitialModelNodes.syncWith(pFrom->_mfInitialModelNodes,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (RootFieldMask & whichField))
        _sfRoot.syncWith(pFrom->_sfRoot);

    if(FieldBits::NoField != (RootCoreFieldMask & whichField))
        _sfRootCore.syncWith(pFrom->_sfRootCore);

    if(FieldBits::NoField != (DefaultCameraBeaconFieldMask & whichField))
        _sfDefaultCameraBeacon.syncWith(pFrom->_sfDefaultCameraBeacon);

    if(FieldBits::NoField != (DefaultCameraBeaconCoreFieldMask & whichField))
        _sfDefaultCameraBeaconCore.syncWith(pFrom->_sfDefaultCameraBeaconCore);

    if(FieldBits::NoField != (CamerasFieldMask & whichField))
        _mfCameras.syncWith(pFrom->_mfCameras,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (InitialCameraFieldMask & whichField))
        _sfInitialCamera.syncWith(pFrom->_sfInitialCamera);

    if(FieldBits::NoField != (AnimationsFieldMask & whichField))
        _mfAnimations.syncWith(pFrom->_mfAnimations,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (InitialAnimationsFieldMask & whichField))
        _mfInitialAnimations.syncWith(pFrom->_mfInitialAnimations,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (ParticleSystemsFieldMask & whichField))
        _mfParticleSystems.syncWith(pFrom->_mfParticleSystems,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (InitialParticleSystemsFieldMask & whichField))
        _mfInitialParticleSystems.syncWith(pFrom->_mfInitialParticleSystems,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (LuaModuleFieldMask & whichField))
        _sfLuaModule.syncWith(pFrom->_sfLuaModule);

    if(FieldBits::NoField != (PhysicsHandlerFieldMask & whichField))
        _sfPhysicsHandler.syncWith(pFrom->_sfPhysicsHandler);

    if(FieldBits::NoField != (PhysicsWorldFieldMask & whichField))
        _sfPhysicsWorld.syncWith(pFrom->_sfPhysicsWorld);

    if(FieldBits::NoField != (GenericMethodIDsFieldMask & whichField))
        _sfGenericMethodIDs.syncWith(pFrom->_sfGenericMethodIDs);
}
#endif


inline
const Char8 *SceneBase::getClassname(void)
{
    return "Scene";
}

inline
EventConnection SceneBase::attachActivity(ActivityRefPtr TheActivity, UInt32 ProducedEventId)
{
    return _Producer.attachActivity(TheActivity, ProducedEventId);
}

inline
bool SceneBase::isActivityAttached(ActivityRefPtr TheActivity, UInt32 ProducedEventId) const
{
    return _Producer.isActivityAttached(TheActivity, ProducedEventId);
}

inline
UInt32 SceneBase::getNumActivitiesAttached(UInt32 ProducedEventId) const
{
    return _Producer.getNumActivitiesAttached(ProducedEventId);
}

inline
ActivityRefPtr SceneBase::getAttachedActivity(UInt32 ProducedEventId, UInt32 ActivityIndex) const
{
    return _Producer.getAttachedActivity(ProducedEventId,ActivityIndex);
}

inline
void SceneBase::detachActivity(ActivityRefPtr TheActivity, UInt32 ProducedEventId)
{
    _Producer.detachActivity(TheActivity, ProducedEventId);
}

inline
UInt32 SceneBase::getNumProducedEvents(void) const
{
    return _Producer.getNumProducedEvents();
}

inline
const MethodDescription *SceneBase::getProducedEventDescription(const std::string &ProducedEventName) const
{
    return _Producer.getProducedEventDescription(ProducedEventName);
}

inline
const MethodDescription *SceneBase::getProducedEventDescription(UInt32 ProducedEventId) const
{
    return _Producer.getProducedEventDescription(ProducedEventId);
}

inline
UInt32 SceneBase::getProducedEventId(const std::string &ProducedEventName) const
{
    return _Producer.getProducedEventId(ProducedEventName);
}

inline
SFEventProducerPtr *SceneBase::editSFEventProducer(void)
{
    return &_sfEventProducer;
}

//! Get the value of the Scene::_sfEventProducer field.
inline
EventProducerPtr &SceneBase::editEventProducer(void)
{
    return _sfEventProducer.getValue();
}

OSG_GEN_CONTAINERPTR(Scene);

OSG_END_NAMESPACE

