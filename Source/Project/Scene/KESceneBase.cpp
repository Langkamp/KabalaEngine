/*---------------------------------------------------------------------------*\
 *                             Kabala Engine                                 *
 *                                                                           *
 *                         www.vrac.iastate.edu                              *
 *                                                                           *
 *   Authors: David Kabala (dkabala@vrac.iastate.edu)                        *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 3.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class Scene!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#define KE_COMPILESCENEINST

#include <stdlib.h>
#include <stdio.h>

#include "KEConfig.h"

#include "KESceneBase.h"
#include "KEScene.h"


KE_USING_NAMESPACE

const OSG::BitVector  SceneBase::InternalParentProjectFieldMask = 
    (TypeTraits<BitVector>::One << SceneBase::InternalParentProjectFieldId);

const OSG::BitVector  SceneBase::NameFieldMask = 
    (TypeTraits<BitVector>::One << SceneBase::NameFieldId);

const OSG::BitVector  SceneBase::BackgroundsFieldMask = 
    (TypeTraits<BitVector>::One << SceneBase::BackgroundsFieldId);

const OSG::BitVector  SceneBase::UIDrawingSurfacesFieldMask = 
    (TypeTraits<BitVector>::One << SceneBase::UIDrawingSurfacesFieldId);

const OSG::BitVector  SceneBase::InitialBackgroundFieldMask = 
    (TypeTraits<BitVector>::One << SceneBase::InitialBackgroundFieldId);

const OSG::BitVector  SceneBase::ForegroundsFieldMask = 
    (TypeTraits<BitVector>::One << SceneBase::ForegroundsFieldId);

const OSG::BitVector  SceneBase::InitialForegroundsFieldMask = 
    (TypeTraits<BitVector>::One << SceneBase::InitialForegroundsFieldId);

const OSG::BitVector  SceneBase::ModelNodesFieldMask = 
    (TypeTraits<BitVector>::One << SceneBase::ModelNodesFieldId);

const OSG::BitVector  SceneBase::InitialModelNodesFieldMask = 
    (TypeTraits<BitVector>::One << SceneBase::InitialModelNodesFieldId);

const OSG::BitVector  SceneBase::RootFieldMask = 
    (TypeTraits<BitVector>::One << SceneBase::RootFieldId);

const OSG::BitVector  SceneBase::RootCoreFieldMask = 
    (TypeTraits<BitVector>::One << SceneBase::RootCoreFieldId);

const OSG::BitVector  SceneBase::DefaultCameraBeaconFieldMask = 
    (TypeTraits<BitVector>::One << SceneBase::DefaultCameraBeaconFieldId);

const OSG::BitVector  SceneBase::DefaultCameraBeaconCoreFieldMask = 
    (TypeTraits<BitVector>::One << SceneBase::DefaultCameraBeaconCoreFieldId);

const OSG::BitVector  SceneBase::CamerasFieldMask = 
    (TypeTraits<BitVector>::One << SceneBase::CamerasFieldId);

const OSG::BitVector  SceneBase::InitialCameraFieldMask = 
    (TypeTraits<BitVector>::One << SceneBase::InitialCameraFieldId);

const OSG::BitVector  SceneBase::AnimationsFieldMask = 
    (TypeTraits<BitVector>::One << SceneBase::AnimationsFieldId);

const OSG::BitVector  SceneBase::InitialAnimationsFieldMask = 
    (TypeTraits<BitVector>::One << SceneBase::InitialAnimationsFieldId);

const OSG::BitVector  SceneBase::TimeInSceneFieldMask = 
    (TypeTraits<BitVector>::One << SceneBase::TimeInSceneFieldId);

const OSG::BitVector  SceneBase::ParticleSystemsFieldMask = 
    (TypeTraits<BitVector>::One << SceneBase::ParticleSystemsFieldId);

const OSG::BitVector  SceneBase::InitialParticleSystemsFieldMask = 
    (TypeTraits<BitVector>::One << SceneBase::InitialParticleSystemsFieldId);

const OSG::BitVector SceneBase::MTInfluenceMask = 
    (Inherited::MTInfluenceMask) | 
    (static_cast<BitVector>(0x0) << Inherited::NextFieldId); 


// Field descriptions

/*! \var ProjectPtr      SceneBase::_sfInternalParentProject
    
*/
/*! \var std::string     SceneBase::_sfName
    
*/
/*! \var BackgroundPtr   SceneBase::_mfBackgrounds
    
*/
/*! \var UIDrawingSurfacePtr SceneBase::_mfUIDrawingSurfaces
    
*/
/*! \var BackgroundPtr   SceneBase::_sfInitialBackground
    
*/
/*! \var ForegroundPtr   SceneBase::_mfForegrounds
    
*/
/*! \var ForegroundPtr   SceneBase::_mfInitialForegrounds
    
*/
/*! \var NodePtr         SceneBase::_mfModelNodes
    
*/
/*! \var NodePtr         SceneBase::_mfInitialModelNodes
    
*/
/*! \var NodePtr         SceneBase::_sfRoot
    
*/
/*! \var TransformPtr    SceneBase::_sfRootCore
    
*/
/*! \var NodePtr         SceneBase::_sfDefaultCameraBeacon
    
*/
/*! \var TransformPtr    SceneBase::_sfDefaultCameraBeaconCore
    
*/
/*! \var CameraPtr       SceneBase::_mfCameras
    
*/
/*! \var CameraPtr       SceneBase::_sfInitialCamera
    
*/
/*! \var AnimationPtr    SceneBase::_mfAnimations
    
*/
/*! \var AnimationPtr    SceneBase::_mfInitialAnimations
    
*/
/*! \var Real32          SceneBase::_sfTimeInScene
    
*/
/*! \var ParticleSystemPtr SceneBase::_mfParticleSystems
    
*/
/*! \var ParticleSystemPtr SceneBase::_mfInitialParticleSystems
    
*/

//! Scene description

FieldDescription *SceneBase::_desc[] = 
{
    new FieldDescription(SFProjectPtr::getClassType(), 
                     "InternalParentProject", 
                     InternalParentProjectFieldId, InternalParentProjectFieldMask,
                     false,
                     (FieldAccessMethod) &SceneBase::getSFInternalParentProject),
    new FieldDescription(SFString::getClassType(), 
                     "Name", 
                     NameFieldId, NameFieldMask,
                     false,
                     (FieldAccessMethod) &SceneBase::getSFName),
    new FieldDescription(MFBackgroundPtr::getClassType(), 
                     "Backgrounds", 
                     BackgroundsFieldId, BackgroundsFieldMask,
                     false,
                     (FieldAccessMethod) &SceneBase::getMFBackgrounds),
    new FieldDescription(MFUIDrawingSurfacePtr::getClassType(), 
                     "UIDrawingSurfaces", 
                     UIDrawingSurfacesFieldId, UIDrawingSurfacesFieldMask,
                     false,
                     (FieldAccessMethod) &SceneBase::getMFUIDrawingSurfaces),
    new FieldDescription(SFBackgroundPtr::getClassType(), 
                     "InitialBackground", 
                     InitialBackgroundFieldId, InitialBackgroundFieldMask,
                     false,
                     (FieldAccessMethod) &SceneBase::getSFInitialBackground),
    new FieldDescription(MFForegroundPtr::getClassType(), 
                     "Foregrounds", 
                     ForegroundsFieldId, ForegroundsFieldMask,
                     false,
                     (FieldAccessMethod) &SceneBase::getMFForegrounds),
    new FieldDescription(MFForegroundPtr::getClassType(), 
                     "InitialForegrounds", 
                     InitialForegroundsFieldId, InitialForegroundsFieldMask,
                     false,
                     (FieldAccessMethod) &SceneBase::getMFInitialForegrounds),
    new FieldDescription(MFNodePtr::getClassType(), 
                     "ModelNodes", 
                     ModelNodesFieldId, ModelNodesFieldMask,
                     false,
                     (FieldAccessMethod) &SceneBase::getMFModelNodes),
    new FieldDescription(MFNodePtr::getClassType(), 
                     "InitialModelNodes", 
                     InitialModelNodesFieldId, InitialModelNodesFieldMask,
                     false,
                     (FieldAccessMethod) &SceneBase::getMFInitialModelNodes),
    new FieldDescription(SFNodePtr::getClassType(), 
                     "Root", 
                     RootFieldId, RootFieldMask,
                     true,
                     (FieldAccessMethod) &SceneBase::getSFRoot),
    new FieldDescription(SFTransformPtr::getClassType(), 
                     "RootCore", 
                     RootCoreFieldId, RootCoreFieldMask,
                     true,
                     (FieldAccessMethod) &SceneBase::getSFRootCore),
    new FieldDescription(SFNodePtr::getClassType(), 
                     "DefaultCameraBeacon", 
                     DefaultCameraBeaconFieldId, DefaultCameraBeaconFieldMask,
                     true,
                     (FieldAccessMethod) &SceneBase::getSFDefaultCameraBeacon),
    new FieldDescription(SFTransformPtr::getClassType(), 
                     "DefaultCameraBeaconCore", 
                     DefaultCameraBeaconCoreFieldId, DefaultCameraBeaconCoreFieldMask,
                     true,
                     (FieldAccessMethod) &SceneBase::getSFDefaultCameraBeaconCore),
    new FieldDescription(MFCameraPtr::getClassType(), 
                     "Cameras", 
                     CamerasFieldId, CamerasFieldMask,
                     false,
                     (FieldAccessMethod) &SceneBase::getMFCameras),
    new FieldDescription(SFCameraPtr::getClassType(), 
                     "InitialCamera", 
                     InitialCameraFieldId, InitialCameraFieldMask,
                     false,
                     (FieldAccessMethod) &SceneBase::getSFInitialCamera),
    new FieldDescription(MFAnimationPtr::getClassType(), 
                     "Animations", 
                     AnimationsFieldId, AnimationsFieldMask,
                     false,
                     (FieldAccessMethod) &SceneBase::getMFAnimations),
    new FieldDescription(MFAnimationPtr::getClassType(), 
                     "InitialAnimations", 
                     InitialAnimationsFieldId, InitialAnimationsFieldMask,
                     false,
                     (FieldAccessMethod) &SceneBase::getMFInitialAnimations),
    new FieldDescription(SFReal32::getClassType(), 
                     "TimeInScene", 
                     TimeInSceneFieldId, TimeInSceneFieldMask,
                     false,
                     (FieldAccessMethod) &SceneBase::getSFTimeInScene),
    new FieldDescription(MFParticleSystemPtr::getClassType(), 
                     "ParticleSystems", 
                     ParticleSystemsFieldId, ParticleSystemsFieldMask,
                     false,
                     (FieldAccessMethod) &SceneBase::getMFParticleSystems),
    new FieldDescription(MFParticleSystemPtr::getClassType(), 
                     "InitialParticleSystems", 
                     InitialParticleSystemsFieldId, InitialParticleSystemsFieldMask,
                     false,
                     (FieldAccessMethod) &SceneBase::getMFInitialParticleSystems)
};


FieldContainerType SceneBase::_type(
    "Scene",
    "FieldContainer",
    NULL,
    (PrototypeCreateF) &SceneBase::createEmpty,
    Scene::initMethod,
    _desc,
    sizeof(_desc));

//OSG_FIELD_CONTAINER_DEF(SceneBase, ScenePtr)

/*------------------------------ get -----------------------------------*/

FieldContainerType &SceneBase::getType(void) 
{
    return _type; 
} 

const FieldContainerType &SceneBase::getType(void) const 
{
    return _type;
} 


FieldContainerPtr SceneBase::shallowCopy(void) const 
{ 
    ScenePtr returnValue; 

    newPtr(returnValue, dynamic_cast<const Scene *>(this)); 

    return returnValue; 
}

UInt32 SceneBase::getContainerSize(void) const 
{ 
    return sizeof(Scene); 
}


#if !defined(OSG_FIXED_MFIELDSYNC)
void SceneBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField)
{
    this->executeSyncImpl((SceneBase *) &other, whichField);
}
#else
void SceneBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField,                                    const SyncInfo       &sInfo     )
{
    this->executeSyncImpl((SceneBase *) &other, whichField, sInfo);
}
void SceneBase::execBeginEdit(const BitVector &whichField, 
                                            UInt32     uiAspect,
                                            UInt32     uiContainerSize) 
{
    this->execBeginEditImpl(whichField, uiAspect, uiContainerSize);
}

void SceneBase::onDestroyAspect(UInt32 uiId, UInt32 uiAspect)
{
    Inherited::onDestroyAspect(uiId, uiAspect);

    _mfBackgrounds.terminateShare(uiAspect, this->getContainerSize());
    _mfUIDrawingSurfaces.terminateShare(uiAspect, this->getContainerSize());
    _mfForegrounds.terminateShare(uiAspect, this->getContainerSize());
    _mfInitialForegrounds.terminateShare(uiAspect, this->getContainerSize());
    _mfModelNodes.terminateShare(uiAspect, this->getContainerSize());
    _mfInitialModelNodes.terminateShare(uiAspect, this->getContainerSize());
    _mfCameras.terminateShare(uiAspect, this->getContainerSize());
    _mfAnimations.terminateShare(uiAspect, this->getContainerSize());
    _mfInitialAnimations.terminateShare(uiAspect, this->getContainerSize());
    _mfParticleSystems.terminateShare(uiAspect, this->getContainerSize());
    _mfInitialParticleSystems.terminateShare(uiAspect, this->getContainerSize());
}
#endif

/*------------------------- constructors ----------------------------------*/

SceneBase::SceneBase(void) :
    _sfInternalParentProject  (ProjectPtr(NullFC)), 
    _sfName                   (), 
    _mfBackgrounds            (), 
    _mfUIDrawingSurfaces      (), 
    _sfInitialBackground      (BackgroundPtr(NullFC)), 
    _mfForegrounds            (), 
    _mfInitialForegrounds     (), 
    _mfModelNodes             (), 
    _mfInitialModelNodes      (), 
    _sfRoot                   (NodePtr(NullFC)), 
    _sfRootCore               (TransformPtr(NullFC)), 
    _sfDefaultCameraBeacon    (NodePtr(NullFC)), 
    _sfDefaultCameraBeaconCore(TransformPtr(NullFC)), 
    _mfCameras                (), 
    _sfInitialCamera          (CameraPtr(NullFC)), 
    _mfAnimations             (), 
    _mfInitialAnimations      (), 
    _sfTimeInScene            (), 
    _mfParticleSystems        (), 
    _mfInitialParticleSystems (), 
    Inherited() 
{
}

SceneBase::SceneBase(const SceneBase &source) :
    _sfInternalParentProject  (source._sfInternalParentProject  ), 
    _sfName                   (source._sfName                   ), 
    _mfBackgrounds            (source._mfBackgrounds            ), 
    _mfUIDrawingSurfaces      (source._mfUIDrawingSurfaces      ), 
    _sfInitialBackground      (source._sfInitialBackground      ), 
    _mfForegrounds            (source._mfForegrounds            ), 
    _mfInitialForegrounds     (source._mfInitialForegrounds     ), 
    _mfModelNodes             (source._mfModelNodes             ), 
    _mfInitialModelNodes      (source._mfInitialModelNodes      ), 
    _sfRoot                   (source._sfRoot                   ), 
    _sfRootCore               (source._sfRootCore               ), 
    _sfDefaultCameraBeacon    (source._sfDefaultCameraBeacon    ), 
    _sfDefaultCameraBeaconCore(source._sfDefaultCameraBeaconCore), 
    _mfCameras                (source._mfCameras                ), 
    _sfInitialCamera          (source._sfInitialCamera          ), 
    _mfAnimations             (source._mfAnimations             ), 
    _mfInitialAnimations      (source._mfInitialAnimations      ), 
    _sfTimeInScene            (source._sfTimeInScene            ), 
    _mfParticleSystems        (source._mfParticleSystems        ), 
    _mfInitialParticleSystems (source._mfInitialParticleSystems ), 
    Inherited                 (source)
{
}

/*-------------------------- destructors ----------------------------------*/

SceneBase::~SceneBase(void)
{
}

/*------------------------------ access -----------------------------------*/

UInt32 SceneBase::getBinSize(const BitVector &whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (InternalParentProjectFieldMask & whichField))
    {
        returnValue += _sfInternalParentProject.getBinSize();
    }

    if(FieldBits::NoField != (NameFieldMask & whichField))
    {
        returnValue += _sfName.getBinSize();
    }

    if(FieldBits::NoField != (BackgroundsFieldMask & whichField))
    {
        returnValue += _mfBackgrounds.getBinSize();
    }

    if(FieldBits::NoField != (UIDrawingSurfacesFieldMask & whichField))
    {
        returnValue += _mfUIDrawingSurfaces.getBinSize();
    }

    if(FieldBits::NoField != (InitialBackgroundFieldMask & whichField))
    {
        returnValue += _sfInitialBackground.getBinSize();
    }

    if(FieldBits::NoField != (ForegroundsFieldMask & whichField))
    {
        returnValue += _mfForegrounds.getBinSize();
    }

    if(FieldBits::NoField != (InitialForegroundsFieldMask & whichField))
    {
        returnValue += _mfInitialForegrounds.getBinSize();
    }

    if(FieldBits::NoField != (ModelNodesFieldMask & whichField))
    {
        returnValue += _mfModelNodes.getBinSize();
    }

    if(FieldBits::NoField != (InitialModelNodesFieldMask & whichField))
    {
        returnValue += _mfInitialModelNodes.getBinSize();
    }

    if(FieldBits::NoField != (RootFieldMask & whichField))
    {
        returnValue += _sfRoot.getBinSize();
    }

    if(FieldBits::NoField != (RootCoreFieldMask & whichField))
    {
        returnValue += _sfRootCore.getBinSize();
    }

    if(FieldBits::NoField != (DefaultCameraBeaconFieldMask & whichField))
    {
        returnValue += _sfDefaultCameraBeacon.getBinSize();
    }

    if(FieldBits::NoField != (DefaultCameraBeaconCoreFieldMask & whichField))
    {
        returnValue += _sfDefaultCameraBeaconCore.getBinSize();
    }

    if(FieldBits::NoField != (CamerasFieldMask & whichField))
    {
        returnValue += _mfCameras.getBinSize();
    }

    if(FieldBits::NoField != (InitialCameraFieldMask & whichField))
    {
        returnValue += _sfInitialCamera.getBinSize();
    }

    if(FieldBits::NoField != (AnimationsFieldMask & whichField))
    {
        returnValue += _mfAnimations.getBinSize();
    }

    if(FieldBits::NoField != (InitialAnimationsFieldMask & whichField))
    {
        returnValue += _mfInitialAnimations.getBinSize();
    }

    if(FieldBits::NoField != (TimeInSceneFieldMask & whichField))
    {
        returnValue += _sfTimeInScene.getBinSize();
    }

    if(FieldBits::NoField != (ParticleSystemsFieldMask & whichField))
    {
        returnValue += _mfParticleSystems.getBinSize();
    }

    if(FieldBits::NoField != (InitialParticleSystemsFieldMask & whichField))
    {
        returnValue += _mfInitialParticleSystems.getBinSize();
    }


    return returnValue;
}

void SceneBase::copyToBin(      BinaryDataHandler &pMem,
                                  const BitVector         &whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (InternalParentProjectFieldMask & whichField))
    {
        _sfInternalParentProject.copyToBin(pMem);
    }

    if(FieldBits::NoField != (NameFieldMask & whichField))
    {
        _sfName.copyToBin(pMem);
    }

    if(FieldBits::NoField != (BackgroundsFieldMask & whichField))
    {
        _mfBackgrounds.copyToBin(pMem);
    }

    if(FieldBits::NoField != (UIDrawingSurfacesFieldMask & whichField))
    {
        _mfUIDrawingSurfaces.copyToBin(pMem);
    }

    if(FieldBits::NoField != (InitialBackgroundFieldMask & whichField))
    {
        _sfInitialBackground.copyToBin(pMem);
    }

    if(FieldBits::NoField != (ForegroundsFieldMask & whichField))
    {
        _mfForegrounds.copyToBin(pMem);
    }

    if(FieldBits::NoField != (InitialForegroundsFieldMask & whichField))
    {
        _mfInitialForegrounds.copyToBin(pMem);
    }

    if(FieldBits::NoField != (ModelNodesFieldMask & whichField))
    {
        _mfModelNodes.copyToBin(pMem);
    }

    if(FieldBits::NoField != (InitialModelNodesFieldMask & whichField))
    {
        _mfInitialModelNodes.copyToBin(pMem);
    }

    if(FieldBits::NoField != (RootFieldMask & whichField))
    {
        _sfRoot.copyToBin(pMem);
    }

    if(FieldBits::NoField != (RootCoreFieldMask & whichField))
    {
        _sfRootCore.copyToBin(pMem);
    }

    if(FieldBits::NoField != (DefaultCameraBeaconFieldMask & whichField))
    {
        _sfDefaultCameraBeacon.copyToBin(pMem);
    }

    if(FieldBits::NoField != (DefaultCameraBeaconCoreFieldMask & whichField))
    {
        _sfDefaultCameraBeaconCore.copyToBin(pMem);
    }

    if(FieldBits::NoField != (CamerasFieldMask & whichField))
    {
        _mfCameras.copyToBin(pMem);
    }

    if(FieldBits::NoField != (InitialCameraFieldMask & whichField))
    {
        _sfInitialCamera.copyToBin(pMem);
    }

    if(FieldBits::NoField != (AnimationsFieldMask & whichField))
    {
        _mfAnimations.copyToBin(pMem);
    }

    if(FieldBits::NoField != (InitialAnimationsFieldMask & whichField))
    {
        _mfInitialAnimations.copyToBin(pMem);
    }

    if(FieldBits::NoField != (TimeInSceneFieldMask & whichField))
    {
        _sfTimeInScene.copyToBin(pMem);
    }

    if(FieldBits::NoField != (ParticleSystemsFieldMask & whichField))
    {
        _mfParticleSystems.copyToBin(pMem);
    }

    if(FieldBits::NoField != (InitialParticleSystemsFieldMask & whichField))
    {
        _mfInitialParticleSystems.copyToBin(pMem);
    }


}

void SceneBase::copyFromBin(      BinaryDataHandler &pMem,
                                    const BitVector    &whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (InternalParentProjectFieldMask & whichField))
    {
        _sfInternalParentProject.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (NameFieldMask & whichField))
    {
        _sfName.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (BackgroundsFieldMask & whichField))
    {
        _mfBackgrounds.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (UIDrawingSurfacesFieldMask & whichField))
    {
        _mfUIDrawingSurfaces.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (InitialBackgroundFieldMask & whichField))
    {
        _sfInitialBackground.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (ForegroundsFieldMask & whichField))
    {
        _mfForegrounds.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (InitialForegroundsFieldMask & whichField))
    {
        _mfInitialForegrounds.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (ModelNodesFieldMask & whichField))
    {
        _mfModelNodes.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (InitialModelNodesFieldMask & whichField))
    {
        _mfInitialModelNodes.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (RootFieldMask & whichField))
    {
        _sfRoot.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (RootCoreFieldMask & whichField))
    {
        _sfRootCore.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (DefaultCameraBeaconFieldMask & whichField))
    {
        _sfDefaultCameraBeacon.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (DefaultCameraBeaconCoreFieldMask & whichField))
    {
        _sfDefaultCameraBeaconCore.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (CamerasFieldMask & whichField))
    {
        _mfCameras.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (InitialCameraFieldMask & whichField))
    {
        _sfInitialCamera.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (AnimationsFieldMask & whichField))
    {
        _mfAnimations.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (InitialAnimationsFieldMask & whichField))
    {
        _mfInitialAnimations.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (TimeInSceneFieldMask & whichField))
    {
        _sfTimeInScene.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (ParticleSystemsFieldMask & whichField))
    {
        _mfParticleSystems.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (InitialParticleSystemsFieldMask & whichField))
    {
        _mfInitialParticleSystems.copyFromBin(pMem);
    }


}

#if !defined(OSG_FIXED_MFIELDSYNC)
void SceneBase::executeSyncImpl(      SceneBase *pOther,
                                        const BitVector         &whichField)
{

    Inherited::executeSyncImpl(pOther, whichField);

    if(FieldBits::NoField != (InternalParentProjectFieldMask & whichField))
        _sfInternalParentProject.syncWith(pOther->_sfInternalParentProject);

    if(FieldBits::NoField != (NameFieldMask & whichField))
        _sfName.syncWith(pOther->_sfName);

    if(FieldBits::NoField != (BackgroundsFieldMask & whichField))
        _mfBackgrounds.syncWith(pOther->_mfBackgrounds);

    if(FieldBits::NoField != (UIDrawingSurfacesFieldMask & whichField))
        _mfUIDrawingSurfaces.syncWith(pOther->_mfUIDrawingSurfaces);

    if(FieldBits::NoField != (InitialBackgroundFieldMask & whichField))
        _sfInitialBackground.syncWith(pOther->_sfInitialBackground);

    if(FieldBits::NoField != (ForegroundsFieldMask & whichField))
        _mfForegrounds.syncWith(pOther->_mfForegrounds);

    if(FieldBits::NoField != (InitialForegroundsFieldMask & whichField))
        _mfInitialForegrounds.syncWith(pOther->_mfInitialForegrounds);

    if(FieldBits::NoField != (ModelNodesFieldMask & whichField))
        _mfModelNodes.syncWith(pOther->_mfModelNodes);

    if(FieldBits::NoField != (InitialModelNodesFieldMask & whichField))
        _mfInitialModelNodes.syncWith(pOther->_mfInitialModelNodes);

    if(FieldBits::NoField != (RootFieldMask & whichField))
        _sfRoot.syncWith(pOther->_sfRoot);

    if(FieldBits::NoField != (RootCoreFieldMask & whichField))
        _sfRootCore.syncWith(pOther->_sfRootCore);

    if(FieldBits::NoField != (DefaultCameraBeaconFieldMask & whichField))
        _sfDefaultCameraBeacon.syncWith(pOther->_sfDefaultCameraBeacon);

    if(FieldBits::NoField != (DefaultCameraBeaconCoreFieldMask & whichField))
        _sfDefaultCameraBeaconCore.syncWith(pOther->_sfDefaultCameraBeaconCore);

    if(FieldBits::NoField != (CamerasFieldMask & whichField))
        _mfCameras.syncWith(pOther->_mfCameras);

    if(FieldBits::NoField != (InitialCameraFieldMask & whichField))
        _sfInitialCamera.syncWith(pOther->_sfInitialCamera);

    if(FieldBits::NoField != (AnimationsFieldMask & whichField))
        _mfAnimations.syncWith(pOther->_mfAnimations);

    if(FieldBits::NoField != (InitialAnimationsFieldMask & whichField))
        _mfInitialAnimations.syncWith(pOther->_mfInitialAnimations);

    if(FieldBits::NoField != (TimeInSceneFieldMask & whichField))
        _sfTimeInScene.syncWith(pOther->_sfTimeInScene);

    if(FieldBits::NoField != (ParticleSystemsFieldMask & whichField))
        _mfParticleSystems.syncWith(pOther->_mfParticleSystems);

    if(FieldBits::NoField != (InitialParticleSystemsFieldMask & whichField))
        _mfInitialParticleSystems.syncWith(pOther->_mfInitialParticleSystems);


}
#else
void SceneBase::executeSyncImpl(      SceneBase *pOther,
                                        const BitVector         &whichField,
                                        const SyncInfo          &sInfo      )
{

    Inherited::executeSyncImpl(pOther, whichField, sInfo);

    if(FieldBits::NoField != (InternalParentProjectFieldMask & whichField))
        _sfInternalParentProject.syncWith(pOther->_sfInternalParentProject);

    if(FieldBits::NoField != (NameFieldMask & whichField))
        _sfName.syncWith(pOther->_sfName);

    if(FieldBits::NoField != (InitialBackgroundFieldMask & whichField))
        _sfInitialBackground.syncWith(pOther->_sfInitialBackground);

    if(FieldBits::NoField != (RootFieldMask & whichField))
        _sfRoot.syncWith(pOther->_sfRoot);

    if(FieldBits::NoField != (RootCoreFieldMask & whichField))
        _sfRootCore.syncWith(pOther->_sfRootCore);

    if(FieldBits::NoField != (DefaultCameraBeaconFieldMask & whichField))
        _sfDefaultCameraBeacon.syncWith(pOther->_sfDefaultCameraBeacon);

    if(FieldBits::NoField != (DefaultCameraBeaconCoreFieldMask & whichField))
        _sfDefaultCameraBeaconCore.syncWith(pOther->_sfDefaultCameraBeaconCore);

    if(FieldBits::NoField != (InitialCameraFieldMask & whichField))
        _sfInitialCamera.syncWith(pOther->_sfInitialCamera);

    if(FieldBits::NoField != (TimeInSceneFieldMask & whichField))
        _sfTimeInScene.syncWith(pOther->_sfTimeInScene);


    if(FieldBits::NoField != (BackgroundsFieldMask & whichField))
        _mfBackgrounds.syncWith(pOther->_mfBackgrounds, sInfo);

    if(FieldBits::NoField != (UIDrawingSurfacesFieldMask & whichField))
        _mfUIDrawingSurfaces.syncWith(pOther->_mfUIDrawingSurfaces, sInfo);

    if(FieldBits::NoField != (ForegroundsFieldMask & whichField))
        _mfForegrounds.syncWith(pOther->_mfForegrounds, sInfo);

    if(FieldBits::NoField != (InitialForegroundsFieldMask & whichField))
        _mfInitialForegrounds.syncWith(pOther->_mfInitialForegrounds, sInfo);

    if(FieldBits::NoField != (ModelNodesFieldMask & whichField))
        _mfModelNodes.syncWith(pOther->_mfModelNodes, sInfo);

    if(FieldBits::NoField != (InitialModelNodesFieldMask & whichField))
        _mfInitialModelNodes.syncWith(pOther->_mfInitialModelNodes, sInfo);

    if(FieldBits::NoField != (CamerasFieldMask & whichField))
        _mfCameras.syncWith(pOther->_mfCameras, sInfo);

    if(FieldBits::NoField != (AnimationsFieldMask & whichField))
        _mfAnimations.syncWith(pOther->_mfAnimations, sInfo);

    if(FieldBits::NoField != (InitialAnimationsFieldMask & whichField))
        _mfInitialAnimations.syncWith(pOther->_mfInitialAnimations, sInfo);

    if(FieldBits::NoField != (ParticleSystemsFieldMask & whichField))
        _mfParticleSystems.syncWith(pOther->_mfParticleSystems, sInfo);

    if(FieldBits::NoField != (InitialParticleSystemsFieldMask & whichField))
        _mfInitialParticleSystems.syncWith(pOther->_mfInitialParticleSystems, sInfo);


}

void SceneBase::execBeginEditImpl (const BitVector &whichField, 
                                                 UInt32     uiAspect,
                                                 UInt32     uiContainerSize)
{
    Inherited::execBeginEditImpl(whichField, uiAspect, uiContainerSize);

    if(FieldBits::NoField != (BackgroundsFieldMask & whichField))
        _mfBackgrounds.beginEdit(uiAspect, uiContainerSize);

    if(FieldBits::NoField != (UIDrawingSurfacesFieldMask & whichField))
        _mfUIDrawingSurfaces.beginEdit(uiAspect, uiContainerSize);

    if(FieldBits::NoField != (ForegroundsFieldMask & whichField))
        _mfForegrounds.beginEdit(uiAspect, uiContainerSize);

    if(FieldBits::NoField != (InitialForegroundsFieldMask & whichField))
        _mfInitialForegrounds.beginEdit(uiAspect, uiContainerSize);

    if(FieldBits::NoField != (ModelNodesFieldMask & whichField))
        _mfModelNodes.beginEdit(uiAspect, uiContainerSize);

    if(FieldBits::NoField != (InitialModelNodesFieldMask & whichField))
        _mfInitialModelNodes.beginEdit(uiAspect, uiContainerSize);

    if(FieldBits::NoField != (CamerasFieldMask & whichField))
        _mfCameras.beginEdit(uiAspect, uiContainerSize);

    if(FieldBits::NoField != (AnimationsFieldMask & whichField))
        _mfAnimations.beginEdit(uiAspect, uiContainerSize);

    if(FieldBits::NoField != (InitialAnimationsFieldMask & whichField))
        _mfInitialAnimations.beginEdit(uiAspect, uiContainerSize);

    if(FieldBits::NoField != (ParticleSystemsFieldMask & whichField))
        _mfParticleSystems.beginEdit(uiAspect, uiContainerSize);

    if(FieldBits::NoField != (InitialParticleSystemsFieldMask & whichField))
        _mfInitialParticleSystems.beginEdit(uiAspect, uiContainerSize);

}
#endif



#include <OpenSG/OSGSFieldTypeDef.inl>
#include <OpenSG/OSGMFieldTypeDef.inl>

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldDataTraits<ScenePtr>::_type("ScenePtr", "FieldContainerPtr");
#endif

KE_BEGIN_NAMESPACE

OSG_DLLEXPORT_SFIELD_DEF1(ScenePtr, KE_KABALAENGINELIB_DLLTMPLMAPPING);
OSG_DLLEXPORT_MFIELD_DEF1(ScenePtr, KE_KABALAENGINELIB_DLLTMPLMAPPING);

KE_END_NAMESPACE


