/*---------------------------------------------------------------------------*\
 *                             Kabala Engine                                 *
 *                                                                           *
 *               Copyright (C) 2009-2010 by David Kabala                     *
 *                                                                           *
 *   authors:  Robert Goetz (rdgoetz@iastate.edu)                            *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU General Public License as published            *
 * by the Free Software Foundation, version 3.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU General Public                 *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class ParticleSystemEffect
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _KEPARTICLESYSTEMEFFECTBASE_H_
#define _KEPARTICLESYSTEMEFFECTBASE_H_
#ifdef __sgi
#pragma once
#endif



#include <OpenSG/OSGConfig.h>
#include "KEKabalaEngineDef.h"
#include "KEConfig.h"

//#include "OpenSG/OSGBaseTypes.h"


#include "KEEffect.h" // Parent

#include "OSGParticleSystemFields.h"    // TheSystem type
#include "OSGParticleGeneratorFields.h" // Generators type
#include <OpenSG/OSGSysFields.h>        // MaxVolume type

#include "KEParticleSystemEffectFields.h"

OSG_BEGIN_NAMESPACE

class ParticleSystemEffect;

//! \brief ParticleSystemEffect Base Class.

class KE_KABALAENGINE_DLLMAPPING ParticleSystemEffectBase : public Effect
{
  public:

    typedef Effect Inherited;
    typedef Effect ParentContainer;

    typedef Inherited::TypeObject TypeObject;
    typedef TypeObject::InitPhase InitPhase;

    OSG_GEN_INTERNALPTR(ParticleSystemEffect);

    /*==========================  PUBLIC  =================================*/

  public:

    enum
    {
        TheSystemFieldId = Inherited::NextFieldId,
        GeneratorsFieldId = TheSystemFieldId + 1,
        MaxVolumeFieldId = GeneratorsFieldId + 1,
        MinVolumeFieldId = MaxVolumeFieldId + 1,
        LifespanFieldId = MinVolumeFieldId + 1,
        MaxParticlesFieldId = LifespanFieldId + 1,
        MinParticlesFieldId = MaxParticlesFieldId + 1,
        NextFieldId = MinParticlesFieldId + 1
    };

    static const OSG::BitVector TheSystemFieldMask =
        (TypeTraits<BitVector>::One << TheSystemFieldId);
    static const OSG::BitVector GeneratorsFieldMask =
        (TypeTraits<BitVector>::One << GeneratorsFieldId);
    static const OSG::BitVector MaxVolumeFieldMask =
        (TypeTraits<BitVector>::One << MaxVolumeFieldId);
    static const OSG::BitVector MinVolumeFieldMask =
        (TypeTraits<BitVector>::One << MinVolumeFieldId);
    static const OSG::BitVector LifespanFieldMask =
        (TypeTraits<BitVector>::One << LifespanFieldId);
    static const OSG::BitVector MaxParticlesFieldMask =
        (TypeTraits<BitVector>::One << MaxParticlesFieldId);
    static const OSG::BitVector MinParticlesFieldMask =
        (TypeTraits<BitVector>::One << MinParticlesFieldId);
    static const OSG::BitVector NextFieldMask =
        (TypeTraits<BitVector>::One << NextFieldId);
        
    typedef SFUnrecParticleSystemPtr SFTheSystemType;
    typedef MFUnrecParticleGeneratorPtr MFGeneratorsType;
    typedef SFReal32          SFMaxVolumeType;
    typedef SFReal32          SFMinVolumeType;
    typedef SFReal32          SFLifespanType;
    typedef SFUInt32          SFMaxParticlesType;
    typedef SFUInt32          SFMinParticlesType;

    /*---------------------------------------------------------------------*/
    /*! \name                    Class Get                                 */
    /*! \{                                                                 */

    static FieldContainerType &getClassType   (void);
    static UInt32              getClassTypeId (void);
    static UInt16              getClassGroupId(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                FieldContainer Get                            */
    /*! \{                                                                 */

    virtual       FieldContainerType &getType         (void);
    virtual const FieldContainerType &getType         (void) const;

    virtual       UInt32              getContainerSize(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */

            const SFUnrecParticleSystemPtr *getSFTheSystem      (void) const;
                  SFUnrecParticleSystemPtr *editSFTheSystem      (void);
            const MFUnrecParticleGeneratorPtr *getMFGenerators     (void) const;
                  MFUnrecParticleGeneratorPtr *editMFGenerators     (void);

                  SFReal32            *editSFMaxVolume      (void);
            const SFReal32            *getSFMaxVolume       (void) const;

                  SFReal32            *editSFMinVolume      (void);
            const SFReal32            *getSFMinVolume       (void) const;

                  SFReal32            *editSFLifespan       (void);
            const SFReal32            *getSFLifespan        (void) const;

                  SFUInt32            *editSFMaxParticles   (void);
            const SFUInt32            *getSFMaxParticles    (void) const;

                  SFUInt32            *editSFMinParticles   (void);
            const SFUInt32            *getSFMinParticles    (void) const;


                  ParticleSystem * getTheSystem      (void) const;

                  ParticleGenerator * getGenerators     (const UInt32 index) const;

                  Real32              &editMaxVolume      (void);
                  Real32               getMaxVolume       (void) const;

                  Real32              &editMinVolume      (void);
                  Real32               getMinVolume       (void) const;

                  Real32              &editLifespan       (void);
                  Real32               getLifespan        (void) const;

                  UInt32              &editMaxParticles   (void);
                  UInt32               getMaxParticles    (void) const;

                  UInt32              &editMinParticles   (void);
                  UInt32               getMinParticles    (void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

            void setTheSystem      (ParticleSystem * const value);
            void setMaxVolume      (const Real32 value);
            void setMinVolume      (const Real32 value);
            void setLifespan       (const Real32 value);
            void setMaxParticles   (const UInt32 value);
            void setMinParticles   (const UInt32 value);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr Field Set                                 */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr MField Set                                */
    /*! \{                                                                 */

    void pushToGenerators           (ParticleGenerator * const value   );
    void assignGenerators          (const MFUnrecParticleGeneratorPtr &value);
    void removeFromGenerators (UInt32               uiIndex );
    void removeObjFromGenerators(ParticleGenerator * const value   );
    void clearGenerators            (void                         );

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Binary Access                              */
    /*! \{                                                                 */

    virtual UInt32 getBinSize (ConstFieldMaskArg  whichField);
    virtual void   copyToBin  (BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);
    virtual void   copyFromBin(BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Construction                               */
    /*! \{                                                                 */

    static  ParticleSystemEffectTransitPtr  create          (void);
    static  ParticleSystemEffect           *createEmpty     (void);

    static  ParticleSystemEffectTransitPtr  createLocal     (
                                               BitVector bFlags = FCLocal::All);

    static  ParticleSystemEffect            *createEmptyLocal(
                                              BitVector bFlags = FCLocal::All);

    static  ParticleSystemEffectTransitPtr  createDependent  (BitVector bFlags);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Copy                                   */
    /*! \{                                                                 */

    virtual FieldContainerTransitPtr shallowCopy     (void) const;
    virtual FieldContainerTransitPtr shallowCopyLocal(
                                       BitVector bFlags = FCLocal::All) const;
    virtual FieldContainerTransitPtr shallowCopyDependent(
                                                      BitVector bFlags) const;

    /*! \}                                                                 */
    /*=========================  PROTECTED  ===============================*/

  protected:

    static TypeObject _type;

    static       void   classDescInserter(TypeObject &oType);
    static const Char8 *getClassname     (void             );

    /*---------------------------------------------------------------------*/
    /*! \name                      Fields                                  */
    /*! \{                                                                 */

    SFUnrecParticleSystemPtr _sfTheSystem;
    MFUnrecParticleGeneratorPtr _mfGenerators;
    SFReal32          _sfMaxVolume;
    SFReal32          _sfMinVolume;
    SFReal32          _sfLifespan;
    SFUInt32          _sfMaxParticles;
    SFUInt32          _sfMinParticles;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Constructors                               */
    /*! \{                                                                 */

    ParticleSystemEffectBase(void);
    ParticleSystemEffectBase(const ParticleSystemEffectBase &source);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Destructors                                */
    /*! \{                                                                 */

    virtual ~ParticleSystemEffectBase(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     onCreate                                */
    /*! \{                                                                 */

    void onCreate(const ParticleSystemEffect *source = NULL);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Generic Field Access                      */
    /*! \{                                                                 */

    GetFieldHandlePtr  getHandleTheSystem       (void) const;
    EditFieldHandlePtr editHandleTheSystem      (void);
    GetFieldHandlePtr  getHandleGenerators      (void) const;
    EditFieldHandlePtr editHandleGenerators     (void);
    GetFieldHandlePtr  getHandleMaxVolume       (void) const;
    EditFieldHandlePtr editHandleMaxVolume      (void);
    GetFieldHandlePtr  getHandleMinVolume       (void) const;
    EditFieldHandlePtr editHandleMinVolume      (void);
    GetFieldHandlePtr  getHandleLifespan        (void) const;
    EditFieldHandlePtr editHandleLifespan       (void);
    GetFieldHandlePtr  getHandleMaxParticles    (void) const;
    EditFieldHandlePtr editHandleMaxParticles   (void);
    GetFieldHandlePtr  getHandleMinParticles    (void) const;
    EditFieldHandlePtr editHandleMinParticles   (void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual void execSyncV(      FieldContainer    &oFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);

            void execSync (      ParticleSystemEffectBase *pFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     Aspect Create                            */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual FieldContainer *createAspectCopy(
                                    const FieldContainer *pRefAspect) const;
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */
    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

    virtual void resolveLinks(void);

    /*! \}                                                                 */
    /*==========================  PRIVATE  ================================*/

  private:
    /*---------------------------------------------------------------------*/

    // prohibit default functions (move to 'public' if you need one)
    void operator =(const ParticleSystemEffectBase &source);
};

typedef ParticleSystemEffectBase *ParticleSystemEffectBaseP;

OSG_END_NAMESPACE

#endif /* _OSGPARTICLESYSTEMEFFECTBASE_H_ */
