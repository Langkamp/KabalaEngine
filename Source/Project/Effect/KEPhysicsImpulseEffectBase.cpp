/*---------------------------------------------------------------------------*\
 *                             Kabala Engine                                 *
 *                                                                           *
 *               Copyright (C) 2009-2010 by David Kabala                     *
 *                                                                           *
 *   authors:  Robert Goetz (rdgoetz@iastate.edu)                            *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU General Public License as published            *
 * by the Free Software Foundation, version 3.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU General Public                 *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class PhysicsImpulseEffect!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include <OpenSG/OSGConfig.h>



#include <OpenSG/OSGPhysicsBody.h>      // PhysicsBodies Class
#include <OpenSG/OSGPhysicsWorld.h>     // PhysicsWorld Class
#include <OpenSG/OSGPhysicsSpace.h>     // PhysicsSpace Class

#include "KEPhysicsImpulseEffectBase.h"
#include "KEPhysicsImpulseEffect.h"

#include <boost/bind.hpp>

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::PhysicsImpulseEffect
    The SceneObject.
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var PhysicsBody *   PhysicsImpulseEffectBase::_mfPhysicsBodies
    
*/

/*! \var PhysicsWorld *  PhysicsImpulseEffectBase::_sfPhysicsWorld
    
*/

/*! \var PhysicsSpace *  PhysicsImpulseEffectBase::_sfPhysicsSpace
    
*/

/*! \var PhysicsWorld *  PhysicsImpulseEffectBase::_sfPhysicsWorld
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<PhysicsImpulseEffect *>::_type("PhysicsImpulseEffectPtr", "EffectPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(PhysicsImpulseEffect *)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           PhysicsImpulseEffect *,
                           0);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           PhysicsImpulseEffect *,
                           0);

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void PhysicsImpulseEffectBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new MFUnrecPhysicsBodyPtr::Description(
        MFUnrecPhysicsBodyPtr::getClassType(),
        "PhysicsBodies",
        "",
        PhysicsBodiesFieldId, PhysicsBodiesFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PhysicsImpulseEffect::editHandlePhysicsBodies),
        static_cast<FieldGetMethodSig >(&PhysicsImpulseEffect::getHandlePhysicsBodies));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecPhysicsWorldPtr::Description(
        SFUnrecPhysicsWorldPtr::getClassType(),
        "PhysicsWorld",
        "",
        PhysicsWorldFieldId, PhysicsWorldFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PhysicsImpulseEffect::editHandlePhysicsWorld),
        static_cast<FieldGetMethodSig >(&PhysicsImpulseEffect::getHandlePhysicsWorld));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecPhysicsSpacePtr::Description(
        SFUnrecPhysicsSpacePtr::getClassType(),
        "PhysicsSpace",
        "",
        PhysicsSpaceFieldId, PhysicsSpaceFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PhysicsImpulseEffect::editHandlePhysicsSpace),
        static_cast<FieldGetMethodSig >(&PhysicsImpulseEffect::getHandlePhysicsSpace));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecPhysicsWorldPtr::Description(
        SFUnrecPhysicsWorldPtr::getClassType(),
        "PhysicsWorld",
        "",
        PhysicsWorldFieldId, PhysicsWorldFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PhysicsImpulseEffect::editHandlePhysicsWorld),
        static_cast<FieldGetMethodSig >(&PhysicsImpulseEffect::getHandlePhysicsWorld));

    oType.addInitialDesc(pDesc);
}


PhysicsImpulseEffectBase::TypeObject PhysicsImpulseEffectBase::_type(
    PhysicsImpulseEffectBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    reinterpret_cast<PrototypeCreateF>(&PhysicsImpulseEffectBase::createEmptyLocal),
    PhysicsImpulseEffect::initMethod,
    PhysicsImpulseEffect::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&PhysicsImpulseEffect::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "\tname=\"PhysicsImpulseEffect\"\n"
    "\tparent=\"Effect\"\n"
    "\tlibrary=\"KabalaEngine\"\n"
    "\tpointerfieldtypes=\"both\"\n"
    "\tstructure=\"concrete\"\n"
    "\tsystemcomponent=\"false\"\n"
    "\tparentsystemcomponent=\"false\"\n"
    "\tdecoratable=\"false\"\n"
    "\tuseLocalIncludes=\"false\"\n"
    "\tlibnamespace=\"KE\"\n"
    "    authors=\"Robert Goetz (rdgoetz@iastate.edu)                            \"\n"
    ">\n"
    "The SceneObject.\n"
    "\t<Field\n"
    "\t\tname=\"PhysicsBodies\"\n"
    "\t\ttype=\"PhysicsBody\"\n"
    "\t\tcategory=\"pointer\"\n"
    "\t\tcardinality=\"multi\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "    <Field\n"
    "\t\tname=\"PhysicsWorld\"\n"
    "\t\ttype=\"PhysicsWorld\"\n"
    "\t\tcategory=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "    <Field\n"
    "\t\tname=\"PhysicsSpace\"\n"
    "\t\ttype=\"PhysicsSpace\"\n"
    "\t\tcategory=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "    <Field\n"
    "\t\tname=\"PhysicsWorld\"\n"
    "\t\ttype=\"PhysicsWorld\"\n"
    "\t\tcategory=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "</FieldContainer>\n",
    "The SceneObject.\n"
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &PhysicsImpulseEffectBase::getType(void)
{
    return _type;
}

const FieldContainerType &PhysicsImpulseEffectBase::getType(void) const
{
    return _type;
}

UInt32 PhysicsImpulseEffectBase::getContainerSize(void) const
{
    return sizeof(PhysicsImpulseEffect);
}

/*------------------------- decorator get ------------------------------*/


//! Get the PhysicsImpulseEffect::_mfPhysicsBodies field.
const MFUnrecPhysicsBodyPtr *PhysicsImpulseEffectBase::getMFPhysicsBodies(void) const
{
    return &_mfPhysicsBodies;
}

MFUnrecPhysicsBodyPtr *PhysicsImpulseEffectBase::editMFPhysicsBodies  (void)
{
    editMField(PhysicsBodiesFieldMask, _mfPhysicsBodies);

    return &_mfPhysicsBodies;
}

//! Get the PhysicsImpulseEffect::_sfPhysicsWorld field.
const SFUnrecPhysicsWorldPtr *PhysicsImpulseEffectBase::getSFPhysicsWorld(void) const
{
    return &_sfPhysicsWorld;
}

SFUnrecPhysicsWorldPtr *PhysicsImpulseEffectBase::editSFPhysicsWorld   (void)
{
    editSField(PhysicsWorldFieldMask);

    return &_sfPhysicsWorld;
}

//! Get the PhysicsImpulseEffect::_sfPhysicsSpace field.
const SFUnrecPhysicsSpacePtr *PhysicsImpulseEffectBase::getSFPhysicsSpace(void) const
{
    return &_sfPhysicsSpace;
}

SFUnrecPhysicsSpacePtr *PhysicsImpulseEffectBase::editSFPhysicsSpace   (void)
{
    editSField(PhysicsSpaceFieldMask);

    return &_sfPhysicsSpace;
}

//! Get the PhysicsImpulseEffect::_sfPhysicsWorld field.
const SFUnrecPhysicsWorldPtr *PhysicsImpulseEffectBase::getSFPhysicsWorld(void) const
{
    return &_sfPhysicsWorld;
}

SFUnrecPhysicsWorldPtr *PhysicsImpulseEffectBase::editSFPhysicsWorld   (void)
{
    editSField(PhysicsWorldFieldMask);

    return &_sfPhysicsWorld;
}



void PhysicsImpulseEffectBase::pushToPhysicsBodies(PhysicsBody * const value)
{
    editMField(PhysicsBodiesFieldMask, _mfPhysicsBodies);

    _mfPhysicsBodies.push_back(value);
}

void PhysicsImpulseEffectBase::assignPhysicsBodies(const MFUnrecPhysicsBodyPtr &value)
{
    MFUnrecPhysicsBodyPtr::const_iterator elemIt  =
        value.begin();
    MFUnrecPhysicsBodyPtr::const_iterator elemEnd =
        value.end  ();

    static_cast<PhysicsImpulseEffect *>(this)->clearPhysicsBodies();

    while(elemIt != elemEnd)
    {
        this->pushToPhysicsBodies(*elemIt);

        ++elemIt;
    }
}

void PhysicsImpulseEffectBase::removeFromPhysicsBodies(UInt32 uiIndex)
{
    if(uiIndex < _mfPhysicsBodies.size())
    {
        editMField(PhysicsBodiesFieldMask, _mfPhysicsBodies);

        _mfPhysicsBodies.erase(uiIndex);
    }
}

void PhysicsImpulseEffectBase::removeObjFromPhysicsBodies(PhysicsBody * const value)
{
    Int32 iElemIdx = _mfPhysicsBodies.findIndex(value);

    if(iElemIdx != -1)
    {
        editMField(PhysicsBodiesFieldMask, _mfPhysicsBodies);

        _mfPhysicsBodies.erase(iElemIdx);
    }
}
void PhysicsImpulseEffectBase::clearPhysicsBodies(void)
{
    editMField(PhysicsBodiesFieldMask, _mfPhysicsBodies);


    _mfPhysicsBodies.clear();
}



/*------------------------------ access -----------------------------------*/

UInt32 PhysicsImpulseEffectBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (PhysicsBodiesFieldMask & whichField))
    {
        returnValue += _mfPhysicsBodies.getBinSize();
    }
    if(FieldBits::NoField != (PhysicsWorldFieldMask & whichField))
    {
        returnValue += _sfPhysicsWorld.getBinSize();
    }
    if(FieldBits::NoField != (PhysicsSpaceFieldMask & whichField))
    {
        returnValue += _sfPhysicsSpace.getBinSize();
    }
    if(FieldBits::NoField != (PhysicsWorldFieldMask & whichField))
    {
        returnValue += _sfPhysicsWorld.getBinSize();
    }

    return returnValue;
}

void PhysicsImpulseEffectBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (PhysicsBodiesFieldMask & whichField))
    {
        _mfPhysicsBodies.copyToBin(pMem);
    }
    if(FieldBits::NoField != (PhysicsWorldFieldMask & whichField))
    {
        _sfPhysicsWorld.copyToBin(pMem);
    }
    if(FieldBits::NoField != (PhysicsSpaceFieldMask & whichField))
    {
        _sfPhysicsSpace.copyToBin(pMem);
    }
    if(FieldBits::NoField != (PhysicsWorldFieldMask & whichField))
    {
        _sfPhysicsWorld.copyToBin(pMem);
    }
}

void PhysicsImpulseEffectBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (PhysicsBodiesFieldMask & whichField))
    {
        _mfPhysicsBodies.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (PhysicsWorldFieldMask & whichField))
    {
        _sfPhysicsWorld.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (PhysicsSpaceFieldMask & whichField))
    {
        _sfPhysicsSpace.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (PhysicsWorldFieldMask & whichField))
    {
        _sfPhysicsWorld.copyFromBin(pMem);
    }
}

//! create a new instance of the class
PhysicsImpulseEffectTransitPtr PhysicsImpulseEffectBase::createLocal(BitVector bFlags)
{
    PhysicsImpulseEffectTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<PhysicsImpulseEffect>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
PhysicsImpulseEffectTransitPtr PhysicsImpulseEffectBase::createDependent(BitVector bFlags)
{
    PhysicsImpulseEffectTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<PhysicsImpulseEffect>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
PhysicsImpulseEffectTransitPtr PhysicsImpulseEffectBase::create(void)
{
    PhysicsImpulseEffectTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<PhysicsImpulseEffect>(tmpPtr);
    }

    return fc;
}

PhysicsImpulseEffect *PhysicsImpulseEffectBase::createEmptyLocal(BitVector bFlags)
{
    PhysicsImpulseEffect *returnValue;

    newPtr<PhysicsImpulseEffect>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
PhysicsImpulseEffect *PhysicsImpulseEffectBase::createEmpty(void)
{
    PhysicsImpulseEffect *returnValue;

    newPtr<PhysicsImpulseEffect>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}


FieldContainerTransitPtr PhysicsImpulseEffectBase::shallowCopyLocal(
    BitVector bFlags) const
{
    PhysicsImpulseEffect *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const PhysicsImpulseEffect *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr PhysicsImpulseEffectBase::shallowCopyDependent(
    BitVector bFlags) const
{
    PhysicsImpulseEffect *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const PhysicsImpulseEffect *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr PhysicsImpulseEffectBase::shallowCopy(void) const
{
    PhysicsImpulseEffect *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const PhysicsImpulseEffect *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}




/*------------------------- constructors ----------------------------------*/

PhysicsImpulseEffectBase::PhysicsImpulseEffectBase(void) :
    Inherited(),
    _mfPhysicsBodies          (),
    _sfPhysicsWorld           (NULL),
    _sfPhysicsSpace           (NULL),
    _sfPhysicsWorld           (NULL)
{
}

PhysicsImpulseEffectBase::PhysicsImpulseEffectBase(const PhysicsImpulseEffectBase &source) :
    Inherited(source),
    _mfPhysicsBodies          (),
    _sfPhysicsWorld           (NULL),
    _sfPhysicsSpace           (NULL),
    _sfPhysicsWorld           (NULL)
{
}


/*-------------------------- destructors ----------------------------------*/

PhysicsImpulseEffectBase::~PhysicsImpulseEffectBase(void)
{
}

void PhysicsImpulseEffectBase::onCreate(const PhysicsImpulseEffect *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        PhysicsImpulseEffect *pThis = static_cast<PhysicsImpulseEffect *>(this);

        MFUnrecPhysicsBodyPtr::const_iterator PhysicsBodiesIt  =
            source->_mfPhysicsBodies.begin();
        MFUnrecPhysicsBodyPtr::const_iterator PhysicsBodiesEnd =
            source->_mfPhysicsBodies.end  ();

        while(PhysicsBodiesIt != PhysicsBodiesEnd)
        {
            pThis->pushToPhysicsBodies(*PhysicsBodiesIt);

            ++PhysicsBodiesIt;
        }

        pThis->setPhysicsWorld(source->getPhysicsWorld());

        pThis->setPhysicsSpace(source->getPhysicsSpace());

        pThis->setPhysicsWorld(source->getPhysicsWorld());
    }
}

GetFieldHandlePtr PhysicsImpulseEffectBase::getHandlePhysicsBodies   (void) const
{
    MFUnrecPhysicsBodyPtr::GetHandlePtr returnValue(
        new  MFUnrecPhysicsBodyPtr::GetHandle(
             &_mfPhysicsBodies,
             this->getType().getFieldDesc(PhysicsBodiesFieldId),
             const_cast<PhysicsImpulseEffectBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PhysicsImpulseEffectBase::editHandlePhysicsBodies  (void)
{
    MFUnrecPhysicsBodyPtr::EditHandlePtr returnValue(
        new  MFUnrecPhysicsBodyPtr::EditHandle(
             &_mfPhysicsBodies,
             this->getType().getFieldDesc(PhysicsBodiesFieldId),
             this));

    returnValue->setAddMethod(
        boost::bind(&PhysicsImpulseEffect::pushToPhysicsBodies,
                    static_cast<PhysicsImpulseEffect *>(this), _1));
    returnValue->setRemoveMethod(
        boost::bind(&PhysicsImpulseEffect::removeFromPhysicsBodies,
                    static_cast<PhysicsImpulseEffect *>(this), _1));
    returnValue->setRemoveObjMethod(
        boost::bind(&PhysicsImpulseEffect::removeObjFromPhysicsBodies,
                    static_cast<PhysicsImpulseEffect *>(this), _1));
    returnValue->setClearMethod(
        boost::bind(&PhysicsImpulseEffect::clearPhysicsBodies,
                    static_cast<PhysicsImpulseEffect *>(this)));

    editMField(PhysicsBodiesFieldMask, _mfPhysicsBodies);

    return returnValue;
}

GetFieldHandlePtr PhysicsImpulseEffectBase::getHandlePhysicsWorld    (void) const
{
    SFUnrecPhysicsWorldPtr::GetHandlePtr returnValue(
        new  SFUnrecPhysicsWorldPtr::GetHandle(
             &_sfPhysicsWorld,
             this->getType().getFieldDesc(PhysicsWorldFieldId),
             const_cast<PhysicsImpulseEffectBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PhysicsImpulseEffectBase::editHandlePhysicsWorld   (void)
{
    SFUnrecPhysicsWorldPtr::EditHandlePtr returnValue(
        new  SFUnrecPhysicsWorldPtr::EditHandle(
             &_sfPhysicsWorld,
             this->getType().getFieldDesc(PhysicsWorldFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&PhysicsImpulseEffect::setPhysicsWorld,
                    static_cast<PhysicsImpulseEffect *>(this), _1));

    editSField(PhysicsWorldFieldMask);

    return returnValue;
}

GetFieldHandlePtr PhysicsImpulseEffectBase::getHandlePhysicsSpace    (void) const
{
    SFUnrecPhysicsSpacePtr::GetHandlePtr returnValue(
        new  SFUnrecPhysicsSpacePtr::GetHandle(
             &_sfPhysicsSpace,
             this->getType().getFieldDesc(PhysicsSpaceFieldId),
             const_cast<PhysicsImpulseEffectBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PhysicsImpulseEffectBase::editHandlePhysicsSpace   (void)
{
    SFUnrecPhysicsSpacePtr::EditHandlePtr returnValue(
        new  SFUnrecPhysicsSpacePtr::EditHandle(
             &_sfPhysicsSpace,
             this->getType().getFieldDesc(PhysicsSpaceFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&PhysicsImpulseEffect::setPhysicsSpace,
                    static_cast<PhysicsImpulseEffect *>(this), _1));

    editSField(PhysicsSpaceFieldMask);

    return returnValue;
}

GetFieldHandlePtr PhysicsImpulseEffectBase::getHandlePhysicsWorld    (void) const
{
    SFUnrecPhysicsWorldPtr::GetHandlePtr returnValue(
        new  SFUnrecPhysicsWorldPtr::GetHandle(
             &_sfPhysicsWorld,
             this->getType().getFieldDesc(PhysicsWorldFieldId),
             const_cast<PhysicsImpulseEffectBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PhysicsImpulseEffectBase::editHandlePhysicsWorld   (void)
{
    SFUnrecPhysicsWorldPtr::EditHandlePtr returnValue(
        new  SFUnrecPhysicsWorldPtr::EditHandle(
             &_sfPhysicsWorld,
             this->getType().getFieldDesc(PhysicsWorldFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&PhysicsImpulseEffect::setPhysicsWorld,
                    static_cast<PhysicsImpulseEffect *>(this), _1));

    editSField(PhysicsWorldFieldMask);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void PhysicsImpulseEffectBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    PhysicsImpulseEffect *pThis = static_cast<PhysicsImpulseEffect *>(this);

    pThis->execSync(static_cast<PhysicsImpulseEffect *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *PhysicsImpulseEffectBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    PhysicsImpulseEffect *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const PhysicsImpulseEffect *>(pRefAspect),
                  dynamic_cast<const PhysicsImpulseEffect *>(this));

    return returnValue;
}
#endif

void PhysicsImpulseEffectBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<PhysicsImpulseEffect *>(this)->clearPhysicsBodies();

    static_cast<PhysicsImpulseEffect *>(this)->setPhysicsWorld(NULL);

    static_cast<PhysicsImpulseEffect *>(this)->setPhysicsSpace(NULL);

    static_cast<PhysicsImpulseEffect *>(this)->setPhysicsWorld(NULL);


}


OSG_END_NAMESPACE
