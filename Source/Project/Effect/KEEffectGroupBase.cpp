/*---------------------------------------------------------------------------*\
 *                             Kabala Engine                                 *
 *                                                                           *
 *               Copyright (C) 2009-2010 by David Kabala                     *
 *                                                                           *
 *   authors:  Robert Goetz (rdgoetz@iastate.edu)                            *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU General Public License as published            *
 * by the Free Software Foundation, version 3.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU General Public                 *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class EffectGroup!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include <OpenSG/OSGConfig.h>



#include "Project/Effect/KEEffect.h"    // EffectList Class

#include "KEEffectGroupBase.h"
#include "KEEffectGroup.h"

#include <boost/bind.hpp>

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::EffectGroup
    The SceneObject.
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var Effect *        EffectGroupBase::_mfEffectList
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<EffectGroup *>::_type("EffectGroupPtr", "EffectPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(EffectGroup *)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           EffectGroup *,
                           0);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           EffectGroup *,
                           0);

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void EffectGroupBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new MFUnrecEffectPtr::Description(
        MFUnrecEffectPtr::getClassType(),
        "EffectList",
        "",
        EffectListFieldId, EffectListFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&EffectGroup::editHandleEffectList),
        static_cast<FieldGetMethodSig >(&EffectGroup::getHandleEffectList));

    oType.addInitialDesc(pDesc);
}


EffectGroupBase::TypeObject EffectGroupBase::_type(
    EffectGroupBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    NULL,
    EffectGroup::initMethod,
    EffectGroup::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&EffectGroup::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "\tname=\"EffectGroup\"\n"
    "\tparent=\"Effect\"\n"
    "\tlibrary=\"KabalaEngine\"\n"
    "\tpointerfieldtypes=\"both\"\n"
    "\tstructure=\"abstract\"\n"
    "\tsystemcomponent=\"false\"\n"
    "\tparentsystemcomponent=\"false\"\n"
    "\tdecoratable=\"false\"\n"
    "\tuseLocalIncludes=\"false\"\n"
    "\tlibnamespace=\"KE\"\n"
    "    authors=\"Robert Goetz (rdgoetz@iastate.edu)                            \"\n"
    ">\n"
    "The SceneObject.\n"
    "\t<Field\n"
    "\t\tname=\"EffectList\"\n"
    "\t\ttype=\"Effect\"\n"
    "\t\tcategory=\"pointer\"\n"
    "\t\tcardinality=\"multi\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "        fieldHeader=\"Project/Effect/KEEffectFields.h\"\n"
    "\t\ttypeHeader=\"Project/Effect/KEEffect.h\"\n"
    "\t>\n"
    "\t</Field>\n"
    "</FieldContainer>\n",
    "The SceneObject.\n"
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &EffectGroupBase::getType(void)
{
    return _type;
}

const FieldContainerType &EffectGroupBase::getType(void) const
{
    return _type;
}

UInt32 EffectGroupBase::getContainerSize(void) const
{
    return sizeof(EffectGroup);
}

/*------------------------- decorator get ------------------------------*/


//! Get the EffectGroup::_mfEffectList field.
const MFUnrecEffectPtr *EffectGroupBase::getMFEffectList(void) const
{
    return &_mfEffectList;
}

MFUnrecEffectPtr    *EffectGroupBase::editMFEffectList     (void)
{
    editMField(EffectListFieldMask, _mfEffectList);

    return &_mfEffectList;
}



void EffectGroupBase::pushToEffectList(Effect * const value)
{
    editMField(EffectListFieldMask, _mfEffectList);

    _mfEffectList.push_back(value);
}

void EffectGroupBase::assignEffectList(const MFUnrecEffectPtr  &value)
{
    MFUnrecEffectPtr ::const_iterator elemIt  =
        value.begin();
    MFUnrecEffectPtr ::const_iterator elemEnd =
        value.end  ();

    static_cast<EffectGroup *>(this)->clearEffectList();

    while(elemIt != elemEnd)
    {
        this->pushToEffectList(*elemIt);

        ++elemIt;
    }
}

void EffectGroupBase::removeFromEffectList(UInt32 uiIndex)
{
    if(uiIndex < _mfEffectList.size())
    {
        editMField(EffectListFieldMask, _mfEffectList);

        _mfEffectList.erase(uiIndex);
    }
}

void EffectGroupBase::removeObjFromEffectList(Effect * const value)
{
    Int32 iElemIdx = _mfEffectList.findIndex(value);

    if(iElemIdx != -1)
    {
        editMField(EffectListFieldMask, _mfEffectList);

        _mfEffectList.erase(iElemIdx);
    }
}
void EffectGroupBase::clearEffectList(void)
{
    editMField(EffectListFieldMask, _mfEffectList);


    _mfEffectList.clear();
}



/*------------------------------ access -----------------------------------*/

UInt32 EffectGroupBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (EffectListFieldMask & whichField))
    {
        returnValue += _mfEffectList.getBinSize();
    }

    return returnValue;
}

void EffectGroupBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (EffectListFieldMask & whichField))
    {
        _mfEffectList.copyToBin(pMem);
    }
}

void EffectGroupBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (EffectListFieldMask & whichField))
    {
        _mfEffectList.copyFromBin(pMem);
    }
}




/*------------------------- constructors ----------------------------------*/

EffectGroupBase::EffectGroupBase(void) :
    Inherited(),
    _mfEffectList             ()
{
}

EffectGroupBase::EffectGroupBase(const EffectGroupBase &source) :
    Inherited(source),
    _mfEffectList             ()
{
}


/*-------------------------- destructors ----------------------------------*/

EffectGroupBase::~EffectGroupBase(void)
{
}

void EffectGroupBase::onCreate(const EffectGroup *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        EffectGroup *pThis = static_cast<EffectGroup *>(this);

        MFUnrecEffectPtr::const_iterator EffectListIt  =
            source->_mfEffectList.begin();
        MFUnrecEffectPtr::const_iterator EffectListEnd =
            source->_mfEffectList.end  ();

        while(EffectListIt != EffectListEnd)
        {
            pThis->pushToEffectList(*EffectListIt);

            ++EffectListIt;
        }
    }
}

GetFieldHandlePtr EffectGroupBase::getHandleEffectList      (void) const
{
    MFUnrecEffectPtr::GetHandlePtr returnValue(
        new  MFUnrecEffectPtr::GetHandle(
             &_mfEffectList,
             this->getType().getFieldDesc(EffectListFieldId),
             const_cast<EffectGroupBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr EffectGroupBase::editHandleEffectList     (void)
{
    MFUnrecEffectPtr::EditHandlePtr returnValue(
        new  MFUnrecEffectPtr::EditHandle(
             &_mfEffectList,
             this->getType().getFieldDesc(EffectListFieldId),
             this));

    returnValue->setAddMethod(
        boost::bind(&EffectGroup::pushToEffectList,
                    static_cast<EffectGroup *>(this), _1));
    returnValue->setRemoveMethod(
        boost::bind(&EffectGroup::removeFromEffectList,
                    static_cast<EffectGroup *>(this), _1));
    returnValue->setRemoveObjMethod(
        boost::bind(&EffectGroup::removeObjFromEffectList,
                    static_cast<EffectGroup *>(this), _1));
    returnValue->setClearMethod(
        boost::bind(&EffectGroup::clearEffectList,
                    static_cast<EffectGroup *>(this)));

    editMField(EffectListFieldMask, _mfEffectList);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void EffectGroupBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    EffectGroup *pThis = static_cast<EffectGroup *>(this);

    pThis->execSync(static_cast<EffectGroup *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif



void EffectGroupBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<EffectGroup *>(this)->clearEffectList();


}


OSG_END_NAMESPACE
