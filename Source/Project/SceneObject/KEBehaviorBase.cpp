/*---------------------------------------------------------------------------*\
 *                             Kabala Engine                                 *
 *                                                                           *
 *               Copyright (C) 2009-2010 by David Kabala                     *
 *                                                                           *
 *   authors:  David Kabala (djkabala@gmail.com)                             *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU General Public License as published            *
 * by the Free Software Foundation, version 3.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU General Public                 *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class Behavior!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include <OpenSG/OSGConfig.h>



#include <OpenSG/OSGFieldContainer.h>   // SceneObject Class

#include "KEBehaviorBase.h"
#include "KEBehavior.h"

#include <boost/bind.hpp>

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::Behavior
    The SceneObject.
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var FieldContainer * BehaviorBase::_sfSceneObject
    
*/

/*! \var std::string     BehaviorBase::_mfDependencies
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<Behavior *>::_type("BehaviorPtr", "AttachmentContainerPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(Behavior *)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           Behavior *,
                           0);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           Behavior *,
                           0);

DataType &FieldTraits< Behavior *, 1 >::getType(void)
{
    return FieldTraits<Behavior *, 0>::getType();
}


OSG_EXPORT_PTR_MFIELD(ChildPointerMField,
                      Behavior *,
                      UnrecordedRefCountPolicy,
                      1);


/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void BehaviorBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFParentFieldContainerPtr::Description(
        SFParentFieldContainerPtr::getClassType(),
        "SceneObject",
        "",
        SceneObjectFieldId, SceneObjectFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast     <FieldEditMethodSig>(&Behavior::invalidEditField),
        static_cast     <FieldGetMethodSig >(&Behavior::invalidGetField));

    oType.addInitialDesc(pDesc);

    pDesc = new MFString::Description(
        MFString::getClassType(),
        "Dependencies",
        "",
        DependenciesFieldId, DependenciesFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Behavior::editHandleDependencies),
        static_cast<FieldGetMethodSig >(&Behavior::getHandleDependencies));

    oType.addInitialDesc(pDesc);
}


BehaviorBase::TypeObject BehaviorBase::_type(
    BehaviorBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    "",
    Behavior::initMethod,
    Behavior::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&Behavior::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "\tname=\"Behavior\"\n"
    "\tparent=\"AttachmentContainer\"\n"
    "\tlibrary=\"KabalaEngine\"\n"
    "\tpointerfieldtypes=\"both\"\n"
    "\tstructure=\"abstract\"\n"
    "\tsystemcomponent=\"false\"\n"
    "\tparentsystemcomponent=\"true\"\n"
    "\tdecoratable=\"false\"\n"
    "\tuseLocalIncludes=\"false\"\n"
    "\tlibnamespace=\"KE\"\n"
    "    childFields=\"multi\"\n"
    "    authors=\"David Kabala (djkabala@gmail.com)                             \"\n"
    ">\n"
    "The SceneObject.\n"
    "    <Field\n"
    "\t\tname=\"SceneObject\"\n"
    "\t\ttype=\"FieldContainer\"\n"
    "\t\tcategory=\"parentpointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"none\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "        doRefCount=\"false\"\n"
    "        passFieldMask=\"true\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"Dependencies\"\n"
    "\t\ttype=\"std::string\"\n"
    "\t\tcategory=\"data\"\n"
    "\t\tcardinality=\"multi\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "</FieldContainer>\n",
    "The SceneObject.\n"
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &BehaviorBase::getType(void)
{
    return _type;
}

const FieldContainerType &BehaviorBase::getType(void) const
{
    return _type;
}

UInt32 BehaviorBase::getContainerSize(void) const
{
    return sizeof(Behavior);
}

/*------------------------- decorator get ------------------------------*/



MFString *BehaviorBase::editMFDependencies(void)
{
    editMField(DependenciesFieldMask, _mfDependencies);

    return &_mfDependencies;
}

const MFString *BehaviorBase::getMFDependencies(void) const
{
    return &_mfDependencies;
}






/*------------------------------ access -----------------------------------*/

UInt32 BehaviorBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (SceneObjectFieldMask & whichField))
    {
        returnValue += _sfSceneObject.getBinSize();
    }
    if(FieldBits::NoField != (DependenciesFieldMask & whichField))
    {
        returnValue += _mfDependencies.getBinSize();
    }

    return returnValue;
}

void BehaviorBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (SceneObjectFieldMask & whichField))
    {
        _sfSceneObject.copyToBin(pMem);
    }
    if(FieldBits::NoField != (DependenciesFieldMask & whichField))
    {
        _mfDependencies.copyToBin(pMem);
    }
}

void BehaviorBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (SceneObjectFieldMask & whichField))
    {
        _sfSceneObject.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (DependenciesFieldMask & whichField))
    {
        _mfDependencies.copyFromBin(pMem);
    }
}




/*------------------------- constructors ----------------------------------*/

BehaviorBase::BehaviorBase(void) :
    Inherited(),
    _sfSceneObject            (NULL),
    _mfDependencies           ()
{
}

BehaviorBase::BehaviorBase(const BehaviorBase &source) :
    Inherited(source),
    _sfSceneObject            (NULL),
    _mfDependencies           (source._mfDependencies           )
{
}


/*-------------------------- destructors ----------------------------------*/

BehaviorBase::~BehaviorBase(void)
{
}
/*-------------------------------------------------------------------------*/
/* Parent linking                                                          */

bool BehaviorBase::linkParent(
    FieldContainer * const pParent,
    UInt16           const childFieldId,
    UInt16           const parentFieldId )
{
    if(parentFieldId == SceneObjectFieldId)
    {
        FieldContainer * pTypedParent =
            dynamic_cast< FieldContainer * >(pParent);

        if(pTypedParent != NULL)
        {
            FieldContainer *pOldParent =
                _sfSceneObject.getValue         ();

            UInt16 oldChildFieldId =
                _sfSceneObject.getParentFieldPos();

            if(pOldParent != NULL)
            {
                pOldParent->unlinkChild(this, oldChildFieldId);
            }

            editSField(SceneObjectFieldMask);

            _sfSceneObject.setValue(static_cast<FieldContainer *>(pParent), childFieldId);

            return true;
        }

        return false;
    }

    return Inherited::linkParent(pParent, childFieldId, parentFieldId);
}

bool BehaviorBase::unlinkParent(
    FieldContainer * const pParent,
    UInt16           const parentFieldId)
{
    if(parentFieldId == SceneObjectFieldId)
    {
        FieldContainer * pTypedParent =
            dynamic_cast< FieldContainer * >(pParent);

        if(pTypedParent != NULL)
        {
            if(_sfSceneObject.getValue() == pParent)
            {
                editSField(SceneObjectFieldMask);

                _sfSceneObject.setValue(NULL, 0xFFFF);

                return true;
            }

            FWARNING(("BehaviorBase::unlinkParent: "
                      "Child <-> Parent link inconsistent.\n"));

            return false;
        }

        return false;
    }

    return Inherited::unlinkParent(pParent, parentFieldId);
}



GetFieldHandlePtr BehaviorBase::getHandleSceneObject     (void) const
{
    SFParentFieldContainerPtr::GetHandlePtr returnValue;

    return returnValue;
}

EditFieldHandlePtr BehaviorBase::editHandleSceneObject    (void)
{
    EditFieldHandlePtr returnValue;

    return returnValue;
}

GetFieldHandlePtr BehaviorBase::getHandleDependencies    (void) const
{
    MFString::GetHandlePtr returnValue(
        new  MFString::GetHandle(
             &_mfDependencies,
             this->getType().getFieldDesc(DependenciesFieldId),
             const_cast<BehaviorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr BehaviorBase::editHandleDependencies   (void)
{
    MFString::EditHandlePtr returnValue(
        new  MFString::EditHandle(
             &_mfDependencies,
             this->getType().getFieldDesc(DependenciesFieldId),
             this));


    editMField(DependenciesFieldMask, _mfDependencies);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void BehaviorBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    Behavior *pThis = static_cast<Behavior *>(this);

    pThis->execSync(static_cast<Behavior *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif



void BehaviorBase::resolveLinks(void)
{
    Inherited::resolveLinks();

#ifdef OSG_MT_CPTR_ASPECT
    AspectOffsetStore oOffsets;

    _pAspectStore->fillOffsetArray(oOffsets, this);
#endif

#ifdef OSG_MT_CPTR_ASPECT
    _mfDependencies.terminateShare(Thread::getCurrentAspect(),
                                      oOffsets);
#endif
}


OSG_END_NAMESPACE
