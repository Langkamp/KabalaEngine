/*---------------------------------------------------------------------------*\
 *                             Kabala Engine                                 *
 *                                                                           *
 *               Copyright (C) 2009-2010 by David Kabala                     *
 *                                                                           *
 *   authors:  David Kabala (djkabala@gmail.com)                             *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU General Public License as published            *
 * by the Free Software Foundation, version 3.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU General Public                 *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class Project!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

OSG_BEGIN_NAMESPACE


//! access the type of the class
inline
OSG::FieldContainerType &ProjectBase::getClassType(void)
{
    return _type;
}

//! access the numerical type of the class
inline
OSG::UInt32 ProjectBase::getClassTypeId(void)
{
    return _type.getId();
}
//! access the producer type of the class
inline
const EventProducerType &ProjectBase::getProducerClassType(void)
{
    return _producerType;
}

//! access the producer type id of the class
inline
UInt32 ProjectBase::getProducerClassTypeId(void)
{
    return _producerType.getId();
}

inline
OSG::UInt16 ProjectBase::getClassGroupId(void)
{
    return _type.getGroupId();
}

/*------------------------------ get -----------------------------------*/

//! Get the value of the Project::_sfVersion field.

inline
std::string &ProjectBase::editVersion(void)
{
    editSField(VersionFieldMask);

    return _sfVersion.getValue();
}

//! Get the value of the Project::_sfVersion field.
inline
const std::string &ProjectBase::getVersion(void) const
{
    return _sfVersion.getValue();
}

//! Set the value of the Project::_sfVersion field.
inline
void ProjectBase::setVersion(const std::string &value)
{
    editSField(VersionFieldMask);

    _sfVersion.setValue(value);
}
//! Get the value of the Project::_sfMainWindowTitle field.

inline
std::string &ProjectBase::editMainWindowTitle(void)
{
    editSField(MainWindowTitleFieldMask);

    return _sfMainWindowTitle.getValue();
}

//! Get the value of the Project::_sfMainWindowTitle field.
inline
const std::string &ProjectBase::getMainWindowTitle(void) const
{
    return _sfMainWindowTitle.getValue();
}

//! Set the value of the Project::_sfMainWindowTitle field.
inline
void ProjectBase::setMainWindowTitle(const std::string &value)
{
    editSField(MainWindowTitleFieldMask);

    _sfMainWindowTitle.setValue(value);
}
//! Get the value of the Project::_sfFilePath field.

inline
BoostPath &ProjectBase::editFilePath(void)
{
    editSField(FilePathFieldMask);

    return _sfFilePath.getValue();
}

//! Get the value of the Project::_sfFilePath field.
inline
const BoostPath &ProjectBase::getFilePath(void) const
{
    return _sfFilePath.getValue();
}

//! Set the value of the Project::_sfFilePath field.
inline
void ProjectBase::setFilePath(const BoostPath &value)
{
    editSField(FilePathFieldMask);

    _sfFilePath.setValue(value);
}

//! Get the value of the Project::_sfInitialScene field.
inline
Scene * ProjectBase::getInitialScene(void) const
{
    return _sfInitialScene.getValue();
}

//! Set the value of the Project::_sfInitialScene field.
inline
void ProjectBase::setInitialScene(Scene * const value)
{
    editSField(InitialSceneFieldMask);

    _sfInitialScene.setValue(value);
}

//! Get the value of the Project::_sfInternalActiveScene field.
inline
Scene * ProjectBase::getInternalActiveScene(void) const
{
    return _sfInternalActiveScene.getValue();
}

//! Set the value of the Project::_sfInternalActiveScene field.
inline
void ProjectBase::setInternalActiveScene(Scene * const value)
{
    editSField(InternalActiveSceneFieldMask);

    _sfInternalActiveScene.setValue(value);
}

//! Get the value of the Project::_sfInternalActiveBackground field.
inline
Background * ProjectBase::getInternalActiveBackground(void) const
{
    return _sfInternalActiveBackground.getValue();
}

//! Set the value of the Project::_sfInternalActiveBackground field.
inline
void ProjectBase::setInternalActiveBackground(Background * const value)
{
    editSField(InternalActiveBackgroundFieldMask);

    _sfInternalActiveBackground.setValue(value);
}

//! Get the value of the Project::_sfInternalActiveCamera field.
inline
Camera * ProjectBase::getInternalActiveCamera(void) const
{
    return _sfInternalActiveCamera.getValue();
}

//! Set the value of the Project::_sfInternalActiveCamera field.
inline
void ProjectBase::setInternalActiveCamera(Camera * const value)
{
    editSField(InternalActiveCameraFieldMask);

    _sfInternalActiveCamera.setValue(value);
}
//! Get the value of the Project::_sfLuaModule field.

inline
BoostPath &ProjectBase::editLuaModule(void)
{
    editSField(LuaModuleFieldMask);

    return _sfLuaModule.getValue();
}

//! Get the value of the Project::_sfLuaModule field.
inline
const BoostPath &ProjectBase::getLuaModule(void) const
{
    return _sfLuaModule.getValue();
}

//! Set the value of the Project::_sfLuaModule field.
inline
void ProjectBase::setLuaModule(const BoostPath &value)
{
    editSField(LuaModuleFieldMask);

    _sfLuaModule.setValue(value);
}
//! Get the value of the Project::_sfLuaModulesDirectory field.

inline
BoostPath &ProjectBase::editLuaModulesDirectory(void)
{
    editSField(LuaModulesDirectoryFieldMask);

    return _sfLuaModulesDirectory.getValue();
}

//! Get the value of the Project::_sfLuaModulesDirectory field.
inline
const BoostPath &ProjectBase::getLuaModulesDirectory(void) const
{
    return _sfLuaModulesDirectory.getValue();
}

//! Set the value of the Project::_sfLuaModulesDirectory field.
inline
void ProjectBase::setLuaModulesDirectory(const BoostPath &value)
{
    editSField(LuaModulesDirectoryFieldMask);

    _sfLuaModulesDirectory.setValue(value);
}

//! Get the value of the \a index element the Project::_mfScenes field.
inline
Scene * ProjectBase::getScenes(const UInt32 index) const
{
    return _mfScenes[index];
}

//! Get the value of the \a index element the Project::_mfBackgrounds field.
inline
Background * ProjectBase::getBackgrounds(const UInt32 index) const
{
    return _mfBackgrounds[index];
}

//! Get the value of the \a index element the Project::_mfForegrounds field.
inline
Foreground * ProjectBase::getForegrounds(const UInt32 index) const
{
    return _mfForegrounds[index];
}

//! Get the value of the \a index element the Project::_mfInternalActiveForegrounds field.
inline
Foreground * ProjectBase::getInternalActiveForegrounds(const UInt32 index) const
{
    return _mfInternalActiveForegrounds[index];
}

//! Get the value of the \a index element the Project::_mfGlobalActiveForegrounds field.
inline
Foreground * ProjectBase::getGlobalActiveForegrounds(const UInt32 index) const
{
    return _mfGlobalActiveForegrounds[index];
}

//! Get the value of the \a index element the Project::_mfModelNodes field.
inline
Node * ProjectBase::getModelNodes(const UInt32 index) const
{
    return _mfModelNodes[index];
}

//! Get the value of the \a index element the Project::_mfInternalActiveModelNodes field.
inline
Node * ProjectBase::getInternalActiveModelNodes(const UInt32 index) const
{
    return _mfInternalActiveModelNodes[index];
}

//! Get the value of the \a index element the Project::_mfGlobalActiveModelNodes field.
inline
Node * ProjectBase::getGlobalActiveModelNodes(const UInt32 index) const
{
    return _mfGlobalActiveModelNodes[index];
}

//! Get the value of the \a index element the Project::_mfCameras field.
inline
Camera * ProjectBase::getCameras(const UInt32 index) const
{
    return _mfCameras[index];
}

//! Get the value of the \a index element the Project::_mfActiveAnimations field.
inline
Animation * ProjectBase::getActiveAnimations(const UInt32 index) const
{
    return _mfActiveAnimations[index];
}

//! Get the value of the \a index element the Project::_mfActiveParticleSystems field.
inline
ParticleSystem * ProjectBase::getActiveParticleSystems(const UInt32 index) const
{
    return _mfActiveParticleSystems[index];
}


#ifdef OSG_MT_CPTR_ASPECT
inline
void ProjectBase::execSync (      ProjectBase *pFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    Inherited::execSync(pFrom, whichField, oOffsets, syncMode, uiSyncInfo);

    if(FieldBits::NoField != (VersionFieldMask & whichField))
        _sfVersion.syncWith(pFrom->_sfVersion);

    if(FieldBits::NoField != (MainWindowTitleFieldMask & whichField))
        _sfMainWindowTitle.syncWith(pFrom->_sfMainWindowTitle);

    if(FieldBits::NoField != (FilePathFieldMask & whichField))
        _sfFilePath.syncWith(pFrom->_sfFilePath);

    if(FieldBits::NoField != (ScenesFieldMask & whichField))
        _mfScenes.syncWith(pFrom->_mfScenes,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (InitialSceneFieldMask & whichField))
        _sfInitialScene.syncWith(pFrom->_sfInitialScene);

    if(FieldBits::NoField != (InternalActiveSceneFieldMask & whichField))
        _sfInternalActiveScene.syncWith(pFrom->_sfInternalActiveScene);

    if(FieldBits::NoField != (BackgroundsFieldMask & whichField))
        _mfBackgrounds.syncWith(pFrom->_mfBackgrounds,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (InternalActiveBackgroundFieldMask & whichField))
        _sfInternalActiveBackground.syncWith(pFrom->_sfInternalActiveBackground);

    if(FieldBits::NoField != (ForegroundsFieldMask & whichField))
        _mfForegrounds.syncWith(pFrom->_mfForegrounds,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (InternalActiveForegroundsFieldMask & whichField))
        _mfInternalActiveForegrounds.syncWith(pFrom->_mfInternalActiveForegrounds,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (GlobalActiveForegroundsFieldMask & whichField))
        _mfGlobalActiveForegrounds.syncWith(pFrom->_mfGlobalActiveForegrounds,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (ModelNodesFieldMask & whichField))
        _mfModelNodes.syncWith(pFrom->_mfModelNodes,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (InternalActiveModelNodesFieldMask & whichField))
        _mfInternalActiveModelNodes.syncWith(pFrom->_mfInternalActiveModelNodes,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (GlobalActiveModelNodesFieldMask & whichField))
        _mfGlobalActiveModelNodes.syncWith(pFrom->_mfGlobalActiveModelNodes,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (CamerasFieldMask & whichField))
        _mfCameras.syncWith(pFrom->_mfCameras,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (InternalActiveCameraFieldMask & whichField))
        _sfInternalActiveCamera.syncWith(pFrom->_sfInternalActiveCamera);

    if(FieldBits::NoField != (ActiveAnimationsFieldMask & whichField))
        _mfActiveAnimations.syncWith(pFrom->_mfActiveAnimations,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (ActiveParticleSystemsFieldMask & whichField))
        _mfActiveParticleSystems.syncWith(pFrom->_mfActiveParticleSystems,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (LuaModuleFieldMask & whichField))
        _sfLuaModule.syncWith(pFrom->_sfLuaModule);

    if(FieldBits::NoField != (LuaModulesDirectoryFieldMask & whichField))
        _sfLuaModulesDirectory.syncWith(pFrom->_sfLuaModulesDirectory);
}
#endif


inline
const Char8 *ProjectBase::getClassname(void)
{
    return "Project";
}

inline
EventConnection ProjectBase::attachActivity(ActivityRefPtr TheActivity, UInt32 ProducedEventId)
{
    return _Producer.attachActivity(TheActivity, ProducedEventId);
}

inline
bool ProjectBase::isActivityAttached(ActivityRefPtr TheActivity, UInt32 ProducedEventId) const
{
    return _Producer.isActivityAttached(TheActivity, ProducedEventId);
}

inline
UInt32 ProjectBase::getNumActivitiesAttached(UInt32 ProducedEventId) const
{
    return _Producer.getNumActivitiesAttached(ProducedEventId);
}

inline
ActivityRefPtr ProjectBase::getAttachedActivity(UInt32 ProducedEventId, UInt32 ActivityIndex) const
{
    return _Producer.getAttachedActivity(ProducedEventId,ActivityIndex);
}

inline
void ProjectBase::detachActivity(ActivityRefPtr TheActivity, UInt32 ProducedEventId)
{
    _Producer.detachActivity(TheActivity, ProducedEventId);
}

inline
UInt32 ProjectBase::getNumProducedEvents(void) const
{
    return _Producer.getNumProducedEvents();
}

inline
const MethodDescription *ProjectBase::getProducedEventDescription(const std::string &ProducedEventName) const
{
    return _Producer.getProducedEventDescription(ProducedEventName);
}

inline
const MethodDescription *ProjectBase::getProducedEventDescription(UInt32 ProducedEventId) const
{
    return _Producer.getProducedEventDescription(ProducedEventId);
}

inline
UInt32 ProjectBase::getProducedEventId(const std::string &ProducedEventName) const
{
    return _Producer.getProducedEventId(ProducedEventName);
}

inline
SFEventProducerPtr *ProjectBase::editSFEventProducer(void)
{
    return &_sfEventProducer;
}

//! Get the value of the Project::_sfEventProducer field.
inline
EventProducerPtr &ProjectBase::editEventProducer(void)
{
    return _sfEventProducer.getValue();
}

OSG_GEN_CONTAINERPTR(Project);

OSG_END_NAMESPACE

