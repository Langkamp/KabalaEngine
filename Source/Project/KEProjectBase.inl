/*---------------------------------------------------------------------------*\
 *                             Kabala Engine                                 *
 *                                                                           *
 *                                                                           *
 *   contact: djkabala@gmail.com                                             *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU General Public License as published            *
 * by the Free Software Foundation, version 3.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU General Public                 *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class Project!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <OpenSG/OSGConfig.h>

OSG_BEGIN_NAMESPACE


//! access the type of the class
inline
OSG::FieldContainerType &ProjectBase::getClassType(void)
{
    return _type; 
} 

//! access the numerical type of the class
inline
OSG::UInt32 ProjectBase::getClassTypeId(void) 
{
    return _type.getId(); 
} 

//! create a new instance of the class
inline
ProjectPtr ProjectBase::create(void) 
{
    ProjectPtr fc; 

    if(getClassType().getPrototype() != OSG::NullFC) 
    {
        fc = ProjectPtr::dcast(
            getClassType().getPrototype()-> shallowCopy()); 
    }
    
    return fc; 
}

//! create an empty new instance of the class, do not copy the prototype
inline
ProjectPtr ProjectBase::createEmpty(void) 
{ 
    ProjectPtr returnValue; 
    
    newPtr(returnValue); 

    return returnValue; 
}


/*------------------------------ get -----------------------------------*/

//! Get the Project::_sfName field.
inline
const SFString *ProjectBase::getSFName(void) const
{
    return &_sfName;
}

//! Get the Project::_sfName field.
inline
SFString *ProjectBase::editSFName(void)
{
    return &_sfName;
}

#ifndef OSG_2_PREP
//! Get the Project::_sfName field.
inline
SFString *ProjectBase::getSFName(void)
{
    return &_sfName;
}
#endif

//! Get the Project::_sfMainWindowTitle field.
inline
const SFString *ProjectBase::getSFMainWindowTitle(void) const
{
    return &_sfMainWindowTitle;
}

//! Get the Project::_sfMainWindowTitle field.
inline
SFString *ProjectBase::editSFMainWindowTitle(void)
{
    return &_sfMainWindowTitle;
}

#ifndef OSG_2_PREP
//! Get the Project::_sfMainWindowTitle field.
inline
SFString *ProjectBase::getSFMainWindowTitle(void)
{
    return &_sfMainWindowTitle;
}
#endif

//! Get the Project::_sfFilePath field.
inline
const SFPath *ProjectBase::getSFFilePath(void) const
{
    return &_sfFilePath;
}

//! Get the Project::_sfFilePath field.
inline
SFPath *ProjectBase::editSFFilePath(void)
{
    return &_sfFilePath;
}

#ifndef OSG_2_PREP
//! Get the Project::_sfFilePath field.
inline
SFPath *ProjectBase::getSFFilePath(void)
{
    return &_sfFilePath;
}
#endif

//! Get the Project::_mfScenes field.
inline
const MFScenePtr *ProjectBase::getMFScenes(void) const
{
    return &_mfScenes;
}

//! Get the Project::_mfScenes field.
inline
MFScenePtr *ProjectBase::editMFScenes(void)
{
    return &_mfScenes;
}

#ifndef OSG_2_PREP
//! Get the Project::_mfScenes field.
inline
MFScenePtr *ProjectBase::getMFScenes(void)
{
    return &_mfScenes;
}
#endif

//! Get the Project::_sfInitialScene field.
inline
const SFScenePtr *ProjectBase::getSFInitialScene(void) const
{
    return &_sfInitialScene;
}

//! Get the Project::_sfInitialScene field.
inline
SFScenePtr *ProjectBase::editSFInitialScene(void)
{
    return &_sfInitialScene;
}

#ifndef OSG_2_PREP
//! Get the Project::_sfInitialScene field.
inline
SFScenePtr *ProjectBase::getSFInitialScene(void)
{
    return &_sfInitialScene;
}
#endif

//! Get the Project::_sfInternalActiveScene field.
inline
const SFScenePtr *ProjectBase::getSFInternalActiveScene(void) const
{
    return &_sfInternalActiveScene;
}

//! Get the Project::_sfInternalActiveScene field.
inline
SFScenePtr *ProjectBase::editSFInternalActiveScene(void)
{
    return &_sfInternalActiveScene;
}

#ifndef OSG_2_PREP
//! Get the Project::_sfInternalActiveScene field.
inline
SFScenePtr *ProjectBase::getSFInternalActiveScene(void)
{
    return &_sfInternalActiveScene;
}
#endif

//! Get the Project::_mfBackgrounds field.
inline
const MFBackgroundPtr *ProjectBase::getMFBackgrounds(void) const
{
    return &_mfBackgrounds;
}

//! Get the Project::_mfBackgrounds field.
inline
MFBackgroundPtr *ProjectBase::editMFBackgrounds(void)
{
    return &_mfBackgrounds;
}

#ifndef OSG_2_PREP
//! Get the Project::_mfBackgrounds field.
inline
MFBackgroundPtr *ProjectBase::getMFBackgrounds(void)
{
    return &_mfBackgrounds;
}
#endif

//! Get the Project::_sfInternalActiveBackground field.
inline
const SFBackgroundPtr *ProjectBase::getSFInternalActiveBackground(void) const
{
    return &_sfInternalActiveBackground;
}

//! Get the Project::_sfInternalActiveBackground field.
inline
SFBackgroundPtr *ProjectBase::editSFInternalActiveBackground(void)
{
    return &_sfInternalActiveBackground;
}

#ifndef OSG_2_PREP
//! Get the Project::_sfInternalActiveBackground field.
inline
SFBackgroundPtr *ProjectBase::getSFInternalActiveBackground(void)
{
    return &_sfInternalActiveBackground;
}
#endif

//! Get the Project::_mfForegrounds field.
inline
const MFForegroundPtr *ProjectBase::getMFForegrounds(void) const
{
    return &_mfForegrounds;
}

//! Get the Project::_mfForegrounds field.
inline
MFForegroundPtr *ProjectBase::editMFForegrounds(void)
{
    return &_mfForegrounds;
}

#ifndef OSG_2_PREP
//! Get the Project::_mfForegrounds field.
inline
MFForegroundPtr *ProjectBase::getMFForegrounds(void)
{
    return &_mfForegrounds;
}
#endif

//! Get the Project::_mfInternalActiveForegrounds field.
inline
const MFForegroundPtr *ProjectBase::getMFInternalActiveForegrounds(void) const
{
    return &_mfInternalActiveForegrounds;
}

//! Get the Project::_mfInternalActiveForegrounds field.
inline
MFForegroundPtr *ProjectBase::editMFInternalActiveForegrounds(void)
{
    return &_mfInternalActiveForegrounds;
}

#ifndef OSG_2_PREP
//! Get the Project::_mfInternalActiveForegrounds field.
inline
MFForegroundPtr *ProjectBase::getMFInternalActiveForegrounds(void)
{
    return &_mfInternalActiveForegrounds;
}
#endif

//! Get the Project::_mfGlobalActiveForegrounds field.
inline
const MFForegroundPtr *ProjectBase::getMFGlobalActiveForegrounds(void) const
{
    return &_mfGlobalActiveForegrounds;
}

//! Get the Project::_mfGlobalActiveForegrounds field.
inline
MFForegroundPtr *ProjectBase::editMFGlobalActiveForegrounds(void)
{
    return &_mfGlobalActiveForegrounds;
}

#ifndef OSG_2_PREP
//! Get the Project::_mfGlobalActiveForegrounds field.
inline
MFForegroundPtr *ProjectBase::getMFGlobalActiveForegrounds(void)
{
    return &_mfGlobalActiveForegrounds;
}
#endif

//! Get the Project::_mfModelNodes field.
inline
const MFNodePtr *ProjectBase::getMFModelNodes(void) const
{
    return &_mfModelNodes;
}

//! Get the Project::_mfModelNodes field.
inline
MFNodePtr *ProjectBase::editMFModelNodes(void)
{
    return &_mfModelNodes;
}

#ifndef OSG_2_PREP
//! Get the Project::_mfModelNodes field.
inline
MFNodePtr *ProjectBase::getMFModelNodes(void)
{
    return &_mfModelNodes;
}
#endif

//! Get the Project::_mfInternalActiveModelNodes field.
inline
const MFNodePtr *ProjectBase::getMFInternalActiveModelNodes(void) const
{
    return &_mfInternalActiveModelNodes;
}

//! Get the Project::_mfInternalActiveModelNodes field.
inline
MFNodePtr *ProjectBase::editMFInternalActiveModelNodes(void)
{
    return &_mfInternalActiveModelNodes;
}

#ifndef OSG_2_PREP
//! Get the Project::_mfInternalActiveModelNodes field.
inline
MFNodePtr *ProjectBase::getMFInternalActiveModelNodes(void)
{
    return &_mfInternalActiveModelNodes;
}
#endif

//! Get the Project::_mfGlobalActiveModelNodes field.
inline
const MFNodePtr *ProjectBase::getMFGlobalActiveModelNodes(void) const
{
    return &_mfGlobalActiveModelNodes;
}

//! Get the Project::_mfGlobalActiveModelNodes field.
inline
MFNodePtr *ProjectBase::editMFGlobalActiveModelNodes(void)
{
    return &_mfGlobalActiveModelNodes;
}

#ifndef OSG_2_PREP
//! Get the Project::_mfGlobalActiveModelNodes field.
inline
MFNodePtr *ProjectBase::getMFGlobalActiveModelNodes(void)
{
    return &_mfGlobalActiveModelNodes;
}
#endif

//! Get the Project::_mfCameras field.
inline
const MFCameraPtr *ProjectBase::getMFCameras(void) const
{
    return &_mfCameras;
}

//! Get the Project::_mfCameras field.
inline
MFCameraPtr *ProjectBase::editMFCameras(void)
{
    return &_mfCameras;
}

#ifndef OSG_2_PREP
//! Get the Project::_mfCameras field.
inline
MFCameraPtr *ProjectBase::getMFCameras(void)
{
    return &_mfCameras;
}
#endif

//! Get the Project::_sfInternalActiveCamera field.
inline
const SFCameraPtr *ProjectBase::getSFInternalActiveCamera(void) const
{
    return &_sfInternalActiveCamera;
}

//! Get the Project::_sfInternalActiveCamera field.
inline
SFCameraPtr *ProjectBase::editSFInternalActiveCamera(void)
{
    return &_sfInternalActiveCamera;
}

#ifndef OSG_2_PREP
//! Get the Project::_sfInternalActiveCamera field.
inline
SFCameraPtr *ProjectBase::getSFInternalActiveCamera(void)
{
    return &_sfInternalActiveCamera;
}
#endif

//! Get the Project::_sfInternalActiveViewport field.
inline
const SFViewportPtr *ProjectBase::getSFInternalActiveViewport(void) const
{
    return &_sfInternalActiveViewport;
}

//! Get the Project::_sfInternalActiveViewport field.
inline
SFViewportPtr *ProjectBase::editSFInternalActiveViewport(void)
{
    return &_sfInternalActiveViewport;
}

#ifndef OSG_2_PREP
//! Get the Project::_sfInternalActiveViewport field.
inline
SFViewportPtr *ProjectBase::getSFInternalActiveViewport(void)
{
    return &_sfInternalActiveViewport;
}
#endif

//! Get the Project::_mfActiveAnimations field.
inline
const MFAnimationPtr *ProjectBase::getMFActiveAnimations(void) const
{
    return &_mfActiveAnimations;
}

//! Get the Project::_mfActiveAnimations field.
inline
MFAnimationPtr *ProjectBase::editMFActiveAnimations(void)
{
    return &_mfActiveAnimations;
}

#ifndef OSG_2_PREP
//! Get the Project::_mfActiveAnimations field.
inline
MFAnimationPtr *ProjectBase::getMFActiveAnimations(void)
{
    return &_mfActiveAnimations;
}
#endif

//! Get the Project::_mfActiveParticleSystems field.
inline
const MFParticleSystemPtr *ProjectBase::getMFActiveParticleSystems(void) const
{
    return &_mfActiveParticleSystems;
}

//! Get the Project::_mfActiveParticleSystems field.
inline
MFParticleSystemPtr *ProjectBase::editMFActiveParticleSystems(void)
{
    return &_mfActiveParticleSystems;
}

#ifndef OSG_2_PREP
//! Get the Project::_mfActiveParticleSystems field.
inline
MFParticleSystemPtr *ProjectBase::getMFActiveParticleSystems(void)
{
    return &_mfActiveParticleSystems;
}
#endif


//! Get the value of the Project::_sfName field.
inline
std::string &ProjectBase::editName(void)
{
    return _sfName.getValue();
}

//! Get the value of the Project::_sfName field.
inline
const std::string &ProjectBase::getName(void) const
{
    return _sfName.getValue();
}

#ifndef OSG_2_PREP
//! Get the value of the Project::_sfName field.
inline
std::string &ProjectBase::getName(void)
{
    return _sfName.getValue();
}
#endif

//! Set the value of the Project::_sfName field.
inline
void ProjectBase::setName(const std::string &value)
{
    _sfName.setValue(value);
}

//! Get the value of the Project::_sfMainWindowTitle field.
inline
std::string &ProjectBase::editMainWindowTitle(void)
{
    return _sfMainWindowTitle.getValue();
}

//! Get the value of the Project::_sfMainWindowTitle field.
inline
const std::string &ProjectBase::getMainWindowTitle(void) const
{
    return _sfMainWindowTitle.getValue();
}

#ifndef OSG_2_PREP
//! Get the value of the Project::_sfMainWindowTitle field.
inline
std::string &ProjectBase::getMainWindowTitle(void)
{
    return _sfMainWindowTitle.getValue();
}
#endif

//! Set the value of the Project::_sfMainWindowTitle field.
inline
void ProjectBase::setMainWindowTitle(const std::string &value)
{
    _sfMainWindowTitle.setValue(value);
}

//! Get the value of the Project::_sfFilePath field.
inline
Path &ProjectBase::editFilePath(void)
{
    return _sfFilePath.getValue();
}

//! Get the value of the Project::_sfFilePath field.
inline
const Path &ProjectBase::getFilePath(void) const
{
    return _sfFilePath.getValue();
}

#ifndef OSG_2_PREP
//! Get the value of the Project::_sfFilePath field.
inline
Path &ProjectBase::getFilePath(void)
{
    return _sfFilePath.getValue();
}
#endif

//! Set the value of the Project::_sfFilePath field.
inline
void ProjectBase::setFilePath(const Path &value)
{
    _sfFilePath.setValue(value);
}

//! Get the value of the Project::_sfInitialScene field.
inline
ScenePtr &ProjectBase::editInitialScene(void)
{
    return _sfInitialScene.getValue();
}

//! Get the value of the Project::_sfInitialScene field.
inline
const ScenePtr &ProjectBase::getInitialScene(void) const
{
    return _sfInitialScene.getValue();
}

#ifndef OSG_2_PREP
//! Get the value of the Project::_sfInitialScene field.
inline
ScenePtr &ProjectBase::getInitialScene(void)
{
    return _sfInitialScene.getValue();
}
#endif

//! Set the value of the Project::_sfInitialScene field.
inline
void ProjectBase::setInitialScene(const ScenePtr &value)
{
    _sfInitialScene.setValue(value);
}

//! Get the value of the Project::_sfInternalActiveScene field.
inline
ScenePtr &ProjectBase::editInternalActiveScene(void)
{
    return _sfInternalActiveScene.getValue();
}

//! Get the value of the Project::_sfInternalActiveScene field.
inline
const ScenePtr &ProjectBase::getInternalActiveScene(void) const
{
    return _sfInternalActiveScene.getValue();
}

#ifndef OSG_2_PREP
//! Get the value of the Project::_sfInternalActiveScene field.
inline
ScenePtr &ProjectBase::getInternalActiveScene(void)
{
    return _sfInternalActiveScene.getValue();
}
#endif

//! Set the value of the Project::_sfInternalActiveScene field.
inline
void ProjectBase::setInternalActiveScene(const ScenePtr &value)
{
    _sfInternalActiveScene.setValue(value);
}

//! Get the value of the Project::_sfInternalActiveBackground field.
inline
BackgroundPtr &ProjectBase::editInternalActiveBackground(void)
{
    return _sfInternalActiveBackground.getValue();
}

//! Get the value of the Project::_sfInternalActiveBackground field.
inline
const BackgroundPtr &ProjectBase::getInternalActiveBackground(void) const
{
    return _sfInternalActiveBackground.getValue();
}

#ifndef OSG_2_PREP
//! Get the value of the Project::_sfInternalActiveBackground field.
inline
BackgroundPtr &ProjectBase::getInternalActiveBackground(void)
{
    return _sfInternalActiveBackground.getValue();
}
#endif

//! Set the value of the Project::_sfInternalActiveBackground field.
inline
void ProjectBase::setInternalActiveBackground(const BackgroundPtr &value)
{
    _sfInternalActiveBackground.setValue(value);
}

//! Get the value of the Project::_sfInternalActiveCamera field.
inline
CameraPtr &ProjectBase::editInternalActiveCamera(void)
{
    return _sfInternalActiveCamera.getValue();
}

//! Get the value of the Project::_sfInternalActiveCamera field.
inline
const CameraPtr &ProjectBase::getInternalActiveCamera(void) const
{
    return _sfInternalActiveCamera.getValue();
}

#ifndef OSG_2_PREP
//! Get the value of the Project::_sfInternalActiveCamera field.
inline
CameraPtr &ProjectBase::getInternalActiveCamera(void)
{
    return _sfInternalActiveCamera.getValue();
}
#endif

//! Set the value of the Project::_sfInternalActiveCamera field.
inline
void ProjectBase::setInternalActiveCamera(const CameraPtr &value)
{
    _sfInternalActiveCamera.setValue(value);
}

//! Get the value of the Project::_sfInternalActiveViewport field.
inline
ViewportPtr &ProjectBase::editInternalActiveViewport(void)
{
    return _sfInternalActiveViewport.getValue();
}

//! Get the value of the Project::_sfInternalActiveViewport field.
inline
const ViewportPtr &ProjectBase::getInternalActiveViewport(void) const
{
    return _sfInternalActiveViewport.getValue();
}

#ifndef OSG_2_PREP
//! Get the value of the Project::_sfInternalActiveViewport field.
inline
ViewportPtr &ProjectBase::getInternalActiveViewport(void)
{
    return _sfInternalActiveViewport.getValue();
}
#endif

//! Set the value of the Project::_sfInternalActiveViewport field.
inline
void ProjectBase::setInternalActiveViewport(const ViewportPtr &value)
{
    _sfInternalActiveViewport.setValue(value);
}


//! Get the value of the \a index element the Project::_mfScenes field.
inline
ScenePtr &ProjectBase::editScenes(const UInt32 index)
{
    return _mfScenes[index];
}

//! Get the value of the \a index element the Project::_mfScenes field.
inline
const ScenePtr &ProjectBase::getScenes(const UInt32 index) const
{
    return _mfScenes[index];
}

#ifndef OSG_2_PREP
//! Get the value of the \a index element the Project::_mfScenes field.
inline
ScenePtr &ProjectBase::getScenes(const UInt32 index)
{
    return _mfScenes[index];
}

//! Get the Project::_mfScenes field.
inline
MFScenePtr &ProjectBase::getScenes(void)
{
    return _mfScenes;
}

//! Get the Project::_mfScenes field.
inline
const MFScenePtr &ProjectBase::getScenes(void) const
{
    return _mfScenes;
}

#endif

//! Get the value of the \a index element the Project::_mfBackgrounds field.
inline
BackgroundPtr &ProjectBase::editBackgrounds(const UInt32 index)
{
    return _mfBackgrounds[index];
}

//! Get the value of the \a index element the Project::_mfBackgrounds field.
inline
const BackgroundPtr &ProjectBase::getBackgrounds(const UInt32 index) const
{
    return _mfBackgrounds[index];
}

#ifndef OSG_2_PREP
//! Get the value of the \a index element the Project::_mfBackgrounds field.
inline
BackgroundPtr &ProjectBase::getBackgrounds(const UInt32 index)
{
    return _mfBackgrounds[index];
}

//! Get the Project::_mfBackgrounds field.
inline
MFBackgroundPtr &ProjectBase::getBackgrounds(void)
{
    return _mfBackgrounds;
}

//! Get the Project::_mfBackgrounds field.
inline
const MFBackgroundPtr &ProjectBase::getBackgrounds(void) const
{
    return _mfBackgrounds;
}

#endif

//! Get the value of the \a index element the Project::_mfForegrounds field.
inline
ForegroundPtr &ProjectBase::editForegrounds(const UInt32 index)
{
    return _mfForegrounds[index];
}

//! Get the value of the \a index element the Project::_mfForegrounds field.
inline
const ForegroundPtr &ProjectBase::getForegrounds(const UInt32 index) const
{
    return _mfForegrounds[index];
}

#ifndef OSG_2_PREP
//! Get the value of the \a index element the Project::_mfForegrounds field.
inline
ForegroundPtr &ProjectBase::getForegrounds(const UInt32 index)
{
    return _mfForegrounds[index];
}

//! Get the Project::_mfForegrounds field.
inline
MFForegroundPtr &ProjectBase::getForegrounds(void)
{
    return _mfForegrounds;
}

//! Get the Project::_mfForegrounds field.
inline
const MFForegroundPtr &ProjectBase::getForegrounds(void) const
{
    return _mfForegrounds;
}

#endif

//! Get the value of the \a index element the Project::_mfInternalActiveForegrounds field.
inline
ForegroundPtr &ProjectBase::editInternalActiveForegrounds(const UInt32 index)
{
    return _mfInternalActiveForegrounds[index];
}

//! Get the value of the \a index element the Project::_mfInternalActiveForegrounds field.
inline
const ForegroundPtr &ProjectBase::getInternalActiveForegrounds(const UInt32 index) const
{
    return _mfInternalActiveForegrounds[index];
}

#ifndef OSG_2_PREP
//! Get the value of the \a index element the Project::_mfInternalActiveForegrounds field.
inline
ForegroundPtr &ProjectBase::getInternalActiveForegrounds(const UInt32 index)
{
    return _mfInternalActiveForegrounds[index];
}

//! Get the Project::_mfInternalActiveForegrounds field.
inline
MFForegroundPtr &ProjectBase::getInternalActiveForegrounds(void)
{
    return _mfInternalActiveForegrounds;
}

//! Get the Project::_mfInternalActiveForegrounds field.
inline
const MFForegroundPtr &ProjectBase::getInternalActiveForegrounds(void) const
{
    return _mfInternalActiveForegrounds;
}

#endif

//! Get the value of the \a index element the Project::_mfGlobalActiveForegrounds field.
inline
ForegroundPtr &ProjectBase::editGlobalActiveForegrounds(const UInt32 index)
{
    return _mfGlobalActiveForegrounds[index];
}

//! Get the value of the \a index element the Project::_mfGlobalActiveForegrounds field.
inline
const ForegroundPtr &ProjectBase::getGlobalActiveForegrounds(const UInt32 index) const
{
    return _mfGlobalActiveForegrounds[index];
}

#ifndef OSG_2_PREP
//! Get the value of the \a index element the Project::_mfGlobalActiveForegrounds field.
inline
ForegroundPtr &ProjectBase::getGlobalActiveForegrounds(const UInt32 index)
{
    return _mfGlobalActiveForegrounds[index];
}

//! Get the Project::_mfGlobalActiveForegrounds field.
inline
MFForegroundPtr &ProjectBase::getGlobalActiveForegrounds(void)
{
    return _mfGlobalActiveForegrounds;
}

//! Get the Project::_mfGlobalActiveForegrounds field.
inline
const MFForegroundPtr &ProjectBase::getGlobalActiveForegrounds(void) const
{
    return _mfGlobalActiveForegrounds;
}

#endif

//! Get the value of the \a index element the Project::_mfModelNodes field.
inline
NodePtr &ProjectBase::editModelNodes(const UInt32 index)
{
    return _mfModelNodes[index];
}

//! Get the value of the \a index element the Project::_mfModelNodes field.
inline
const NodePtr &ProjectBase::getModelNodes(const UInt32 index) const
{
    return _mfModelNodes[index];
}

#ifndef OSG_2_PREP
//! Get the value of the \a index element the Project::_mfModelNodes field.
inline
NodePtr &ProjectBase::getModelNodes(const UInt32 index)
{
    return _mfModelNodes[index];
}

//! Get the Project::_mfModelNodes field.
inline
MFNodePtr &ProjectBase::getModelNodes(void)
{
    return _mfModelNodes;
}

//! Get the Project::_mfModelNodes field.
inline
const MFNodePtr &ProjectBase::getModelNodes(void) const
{
    return _mfModelNodes;
}

#endif

//! Get the value of the \a index element the Project::_mfInternalActiveModelNodes field.
inline
NodePtr &ProjectBase::editInternalActiveModelNodes(const UInt32 index)
{
    return _mfInternalActiveModelNodes[index];
}

//! Get the value of the \a index element the Project::_mfInternalActiveModelNodes field.
inline
const NodePtr &ProjectBase::getInternalActiveModelNodes(const UInt32 index) const
{
    return _mfInternalActiveModelNodes[index];
}

#ifndef OSG_2_PREP
//! Get the value of the \a index element the Project::_mfInternalActiveModelNodes field.
inline
NodePtr &ProjectBase::getInternalActiveModelNodes(const UInt32 index)
{
    return _mfInternalActiveModelNodes[index];
}

//! Get the Project::_mfInternalActiveModelNodes field.
inline
MFNodePtr &ProjectBase::getInternalActiveModelNodes(void)
{
    return _mfInternalActiveModelNodes;
}

//! Get the Project::_mfInternalActiveModelNodes field.
inline
const MFNodePtr &ProjectBase::getInternalActiveModelNodes(void) const
{
    return _mfInternalActiveModelNodes;
}

#endif

//! Get the value of the \a index element the Project::_mfGlobalActiveModelNodes field.
inline
NodePtr &ProjectBase::editGlobalActiveModelNodes(const UInt32 index)
{
    return _mfGlobalActiveModelNodes[index];
}

//! Get the value of the \a index element the Project::_mfGlobalActiveModelNodes field.
inline
const NodePtr &ProjectBase::getGlobalActiveModelNodes(const UInt32 index) const
{
    return _mfGlobalActiveModelNodes[index];
}

#ifndef OSG_2_PREP
//! Get the value of the \a index element the Project::_mfGlobalActiveModelNodes field.
inline
NodePtr &ProjectBase::getGlobalActiveModelNodes(const UInt32 index)
{
    return _mfGlobalActiveModelNodes[index];
}

//! Get the Project::_mfGlobalActiveModelNodes field.
inline
MFNodePtr &ProjectBase::getGlobalActiveModelNodes(void)
{
    return _mfGlobalActiveModelNodes;
}

//! Get the Project::_mfGlobalActiveModelNodes field.
inline
const MFNodePtr &ProjectBase::getGlobalActiveModelNodes(void) const
{
    return _mfGlobalActiveModelNodes;
}

#endif

//! Get the value of the \a index element the Project::_mfCameras field.
inline
CameraPtr &ProjectBase::editCameras(const UInt32 index)
{
    return _mfCameras[index];
}

//! Get the value of the \a index element the Project::_mfCameras field.
inline
const CameraPtr &ProjectBase::getCameras(const UInt32 index) const
{
    return _mfCameras[index];
}

#ifndef OSG_2_PREP
//! Get the value of the \a index element the Project::_mfCameras field.
inline
CameraPtr &ProjectBase::getCameras(const UInt32 index)
{
    return _mfCameras[index];
}

//! Get the Project::_mfCameras field.
inline
MFCameraPtr &ProjectBase::getCameras(void)
{
    return _mfCameras;
}

//! Get the Project::_mfCameras field.
inline
const MFCameraPtr &ProjectBase::getCameras(void) const
{
    return _mfCameras;
}

#endif

//! Get the value of the \a index element the Project::_mfActiveAnimations field.
inline
AnimationPtr &ProjectBase::editActiveAnimations(const UInt32 index)
{
    return _mfActiveAnimations[index];
}

//! Get the value of the \a index element the Project::_mfActiveAnimations field.
inline
const AnimationPtr &ProjectBase::getActiveAnimations(const UInt32 index) const
{
    return _mfActiveAnimations[index];
}

#ifndef OSG_2_PREP
//! Get the value of the \a index element the Project::_mfActiveAnimations field.
inline
AnimationPtr &ProjectBase::getActiveAnimations(const UInt32 index)
{
    return _mfActiveAnimations[index];
}

//! Get the Project::_mfActiveAnimations field.
inline
MFAnimationPtr &ProjectBase::getActiveAnimations(void)
{
    return _mfActiveAnimations;
}

//! Get the Project::_mfActiveAnimations field.
inline
const MFAnimationPtr &ProjectBase::getActiveAnimations(void) const
{
    return _mfActiveAnimations;
}

#endif

//! Get the value of the \a index element the Project::_mfActiveParticleSystems field.
inline
ParticleSystemPtr &ProjectBase::editActiveParticleSystems(const UInt32 index)
{
    return _mfActiveParticleSystems[index];
}

//! Get the value of the \a index element the Project::_mfActiveParticleSystems field.
inline
const ParticleSystemPtr &ProjectBase::getActiveParticleSystems(const UInt32 index) const
{
    return _mfActiveParticleSystems[index];
}

#ifndef OSG_2_PREP
//! Get the value of the \a index element the Project::_mfActiveParticleSystems field.
inline
ParticleSystemPtr &ProjectBase::getActiveParticleSystems(const UInt32 index)
{
    return _mfActiveParticleSystems[index];
}

//! Get the Project::_mfActiveParticleSystems field.
inline
MFParticleSystemPtr &ProjectBase::getActiveParticleSystems(void)
{
    return _mfActiveParticleSystems;
}

//! Get the Project::_mfActiveParticleSystems field.
inline
const MFParticleSystemPtr &ProjectBase::getActiveParticleSystems(void) const
{
    return _mfActiveParticleSystems;
}

#endif

OSG_END_NAMESPACE

