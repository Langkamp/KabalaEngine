/*---------------------------------------------------------------------------*\
 *                             Kabala Engine                                 *
 *                                                                           *
 *                         www.vrac.iastate.edu                              *
 *                                                                           *
 *   Authors: David Kabala (dkabala@vrac.iastate.edu)                        *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 3.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class Project!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include "KEConfig.h"

KE_BEGIN_NAMESPACE


//! access the type of the class
inline
OSG::FieldContainerType &ProjectBase::getClassType(void)
{
    return _type; 
} 

//! access the numerical type of the class
inline
OSG::UInt32 ProjectBase::getClassTypeId(void) 
{
    return _type.getId(); 
} 

//! create a new instance of the class
inline
ProjectPtr ProjectBase::create(void) 
{
    ProjectPtr fc; 

    if(getClassType().getPrototype() != OSG::NullFC) 
    {
        fc = ProjectPtr::dcast(
            getClassType().getPrototype()-> shallowCopy()); 
    }
    
    return fc; 
}

//! create an empty new instance of the class, do not copy the prototype
inline
ProjectPtr ProjectBase::createEmpty(void) 
{ 
    ProjectPtr returnValue; 
    
    newPtr(returnValue); 

    return returnValue; 
}


/*------------------------------ get -----------------------------------*/

//! Get the Project::_sfName field.
inline
SFString *ProjectBase::getSFName(void)
{
    return &_sfName;
}

//! Get the Project::_sfMainWindowTitle field.
inline
SFString *ProjectBase::getSFMainWindowTitle(void)
{
    return &_sfMainWindowTitle;
}

//! Get the Project::_sfFilePath field.
inline
SFPath *ProjectBase::getSFFilePath(void)
{
    return &_sfFilePath;
}

//! Get the Project::_mfScenes field.
inline
MFScenePtr *ProjectBase::getMFScenes(void)
{
    return &_mfScenes;
}

//! Get the Project::_sfInitialScene field.
inline
SFScenePtr *ProjectBase::getSFInitialScene(void)
{
    return &_sfInitialScene;
}

//! Get the Project::_sfInternalActiveScene field.
inline
SFScenePtr *ProjectBase::getSFInternalActiveScene(void)
{
    return &_sfInternalActiveScene;
}

//! Get the Project::_mfBackgrounds field.
inline
MFBackgroundPtr *ProjectBase::getMFBackgrounds(void)
{
    return &_mfBackgrounds;
}

//! Get the Project::_sfInternalActiveBackground field.
inline
SFBackgroundPtr *ProjectBase::getSFInternalActiveBackground(void)
{
    return &_sfInternalActiveBackground;
}

//! Get the Project::_mfForegrounds field.
inline
MFForegroundPtr *ProjectBase::getMFForegrounds(void)
{
    return &_mfForegrounds;
}

//! Get the Project::_mfInternalActiveForegrounds field.
inline
MFForegroundPtr *ProjectBase::getMFInternalActiveForegrounds(void)
{
    return &_mfInternalActiveForegrounds;
}

//! Get the Project::_mfModelNodes field.
inline
MFNodePtr *ProjectBase::getMFModelNodes(void)
{
    return &_mfModelNodes;
}

//! Get the Project::_mfInternalActiveModelNodes field.
inline
MFNodePtr *ProjectBase::getMFInternalActiveModelNodes(void)
{
    return &_mfInternalActiveModelNodes;
}

//! Get the Project::_mfCameras field.
inline
MFCameraPtr *ProjectBase::getMFCameras(void)
{
    return &_mfCameras;
}

//! Get the Project::_sfInternalActiveCamera field.
inline
SFCameraPtr *ProjectBase::getSFInternalActiveCamera(void)
{
    return &_sfInternalActiveCamera;
}

//! Get the Project::_sfInternalActiveViewport field.
inline
SFViewportPtr *ProjectBase::getSFInternalActiveViewport(void)
{
    return &_sfInternalActiveViewport;
}


//! Get the value of the Project::_sfName field.
inline
std::string &ProjectBase::getName(void)
{
    return _sfName.getValue();
}

//! Get the value of the Project::_sfName field.
inline
const std::string &ProjectBase::getName(void) const
{
    return _sfName.getValue();
}

//! Set the value of the Project::_sfName field.
inline
void ProjectBase::setName(const std::string &value)
{
    _sfName.setValue(value);
}

//! Get the value of the Project::_sfMainWindowTitle field.
inline
std::string &ProjectBase::getMainWindowTitle(void)
{
    return _sfMainWindowTitle.getValue();
}

//! Get the value of the Project::_sfMainWindowTitle field.
inline
const std::string &ProjectBase::getMainWindowTitle(void) const
{
    return _sfMainWindowTitle.getValue();
}

//! Set the value of the Project::_sfMainWindowTitle field.
inline
void ProjectBase::setMainWindowTitle(const std::string &value)
{
    _sfMainWindowTitle.setValue(value);
}

//! Get the value of the Project::_sfFilePath field.
inline
Path &ProjectBase::getFilePath(void)
{
    return _sfFilePath.getValue();
}

//! Get the value of the Project::_sfFilePath field.
inline
const Path &ProjectBase::getFilePath(void) const
{
    return _sfFilePath.getValue();
}

//! Set the value of the Project::_sfFilePath field.
inline
void ProjectBase::setFilePath(const Path &value)
{
    _sfFilePath.setValue(value);
}

//! Get the value of the Project::_sfInitialScene field.
inline
ScenePtr &ProjectBase::getInitialScene(void)
{
    return _sfInitialScene.getValue();
}

//! Get the value of the Project::_sfInitialScene field.
inline
const ScenePtr &ProjectBase::getInitialScene(void) const
{
    return _sfInitialScene.getValue();
}

//! Set the value of the Project::_sfInitialScene field.
inline
void ProjectBase::setInitialScene(const ScenePtr &value)
{
    _sfInitialScene.setValue(value);
}

//! Get the value of the Project::_sfInternalActiveScene field.
inline
ScenePtr &ProjectBase::getInternalActiveScene(void)
{
    return _sfInternalActiveScene.getValue();
}

//! Get the value of the Project::_sfInternalActiveScene field.
inline
const ScenePtr &ProjectBase::getInternalActiveScene(void) const
{
    return _sfInternalActiveScene.getValue();
}

//! Set the value of the Project::_sfInternalActiveScene field.
inline
void ProjectBase::setInternalActiveScene(const ScenePtr &value)
{
    _sfInternalActiveScene.setValue(value);
}

//! Get the value of the Project::_sfInternalActiveBackground field.
inline
BackgroundPtr &ProjectBase::getInternalActiveBackground(void)
{
    return _sfInternalActiveBackground.getValue();
}

//! Get the value of the Project::_sfInternalActiveBackground field.
inline
const BackgroundPtr &ProjectBase::getInternalActiveBackground(void) const
{
    return _sfInternalActiveBackground.getValue();
}

//! Set the value of the Project::_sfInternalActiveBackground field.
inline
void ProjectBase::setInternalActiveBackground(const BackgroundPtr &value)
{
    _sfInternalActiveBackground.setValue(value);
}

//! Get the value of the Project::_sfInternalActiveCamera field.
inline
CameraPtr &ProjectBase::getInternalActiveCamera(void)
{
    return _sfInternalActiveCamera.getValue();
}

//! Get the value of the Project::_sfInternalActiveCamera field.
inline
const CameraPtr &ProjectBase::getInternalActiveCamera(void) const
{
    return _sfInternalActiveCamera.getValue();
}

//! Set the value of the Project::_sfInternalActiveCamera field.
inline
void ProjectBase::setInternalActiveCamera(const CameraPtr &value)
{
    _sfInternalActiveCamera.setValue(value);
}

//! Get the value of the Project::_sfInternalActiveViewport field.
inline
ViewportPtr &ProjectBase::getInternalActiveViewport(void)
{
    return _sfInternalActiveViewport.getValue();
}

//! Get the value of the Project::_sfInternalActiveViewport field.
inline
const ViewportPtr &ProjectBase::getInternalActiveViewport(void) const
{
    return _sfInternalActiveViewport.getValue();
}

//! Set the value of the Project::_sfInternalActiveViewport field.
inline
void ProjectBase::setInternalActiveViewport(const ViewportPtr &value)
{
    _sfInternalActiveViewport.setValue(value);
}


//! Get the value of the \a index element the Project::_mfScenes field.
inline
ScenePtr &ProjectBase::getScenes(const OSG::UInt32 index)
{
    return _mfScenes[index];
}

//! Get the Project::_mfScenes field.
inline
MFScenePtr &ProjectBase::getScenes(void)
{
    return _mfScenes;
}

//! Get the Project::_mfScenes field.
inline
const MFScenePtr &ProjectBase::getScenes(void) const
{
    return _mfScenes;
}

//! Get the value of the \a index element the Project::_mfBackgrounds field.
inline
BackgroundPtr &ProjectBase::getBackgrounds(const OSG::UInt32 index)
{
    return _mfBackgrounds[index];
}

//! Get the Project::_mfBackgrounds field.
inline
MFBackgroundPtr &ProjectBase::getBackgrounds(void)
{
    return _mfBackgrounds;
}

//! Get the Project::_mfBackgrounds field.
inline
const MFBackgroundPtr &ProjectBase::getBackgrounds(void) const
{
    return _mfBackgrounds;
}

//! Get the value of the \a index element the Project::_mfForegrounds field.
inline
ForegroundPtr &ProjectBase::getForegrounds(const OSG::UInt32 index)
{
    return _mfForegrounds[index];
}

//! Get the Project::_mfForegrounds field.
inline
MFForegroundPtr &ProjectBase::getForegrounds(void)
{
    return _mfForegrounds;
}

//! Get the Project::_mfForegrounds field.
inline
const MFForegroundPtr &ProjectBase::getForegrounds(void) const
{
    return _mfForegrounds;
}

//! Get the value of the \a index element the Project::_mfInternalActiveForegrounds field.
inline
ForegroundPtr &ProjectBase::getInternalActiveForegrounds(const OSG::UInt32 index)
{
    return _mfInternalActiveForegrounds[index];
}

//! Get the Project::_mfInternalActiveForegrounds field.
inline
MFForegroundPtr &ProjectBase::getInternalActiveForegrounds(void)
{
    return _mfInternalActiveForegrounds;
}

//! Get the Project::_mfInternalActiveForegrounds field.
inline
const MFForegroundPtr &ProjectBase::getInternalActiveForegrounds(void) const
{
    return _mfInternalActiveForegrounds;
}

//! Get the value of the \a index element the Project::_mfModelNodes field.
inline
NodePtr &ProjectBase::getModelNodes(const OSG::UInt32 index)
{
    return _mfModelNodes[index];
}

//! Get the Project::_mfModelNodes field.
inline
MFNodePtr &ProjectBase::getModelNodes(void)
{
    return _mfModelNodes;
}

//! Get the Project::_mfModelNodes field.
inline
const MFNodePtr &ProjectBase::getModelNodes(void) const
{
    return _mfModelNodes;
}

//! Get the value of the \a index element the Project::_mfInternalActiveModelNodes field.
inline
NodePtr &ProjectBase::getInternalActiveModelNodes(const OSG::UInt32 index)
{
    return _mfInternalActiveModelNodes[index];
}

//! Get the Project::_mfInternalActiveModelNodes field.
inline
MFNodePtr &ProjectBase::getInternalActiveModelNodes(void)
{
    return _mfInternalActiveModelNodes;
}

//! Get the Project::_mfInternalActiveModelNodes field.
inline
const MFNodePtr &ProjectBase::getInternalActiveModelNodes(void) const
{
    return _mfInternalActiveModelNodes;
}

//! Get the value of the \a index element the Project::_mfCameras field.
inline
CameraPtr &ProjectBase::getCameras(const OSG::UInt32 index)
{
    return _mfCameras[index];
}

//! Get the Project::_mfCameras field.
inline
MFCameraPtr &ProjectBase::getCameras(void)
{
    return _mfCameras;
}

//! Get the Project::_mfCameras field.
inline
const MFCameraPtr &ProjectBase::getCameras(void) const
{
    return _mfCameras;
}

KE_END_NAMESPACE

