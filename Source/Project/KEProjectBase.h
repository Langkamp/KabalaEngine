/*---------------------------------------------------------------------------*\
 *                             Kabala Engine                                 *
 *                                                                           *
 *               Copyright (C) 2009-2010 by David Kabala                     *
 *                                                                           *
 *   authors:  David Kabala (djkabala@gmail.com)                             *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU General Public License as published            *
 * by the Free Software Foundation, version 3.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU General Public                 *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class Project
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _KEPROJECTBASE_H_
#define _KEPROJECTBASE_H_
#ifdef __sgi
#pragma once
#endif



#include <OpenSG/OSGConfig.h>
#include "KEKabalaEngineDef.h"

//#include "OpenSG/OSGBaseTypes.h"

#include <OpenSG/OSGAttachmentContainer.h> // Parent

#include <OpenSG/OSGBaseFields.h>       // Version type
#include <OpenSG/OSGBoostPathFields.h>  // FilePath type
#include "Project/Scene/KESceneFields.h" // Scenes type
#include <OpenSG/OSGBackgroundFields.h> // Backgrounds type
#include <OpenSG/OSGForegroundFields.h> // Foregrounds type
#include <OpenSG/OSGNodeFields.h>       // ModelNodes type
#include <OpenSG/OSGCameraFields.h>     // Cameras type
#include <OpenSG/OSGAnimationFields.h>  // ActiveAnimations type
#include <OpenSG/OSGParticleSystemFields.h> // ActiveParticleSystems type

#include "KEProjectFields.h"

//Event Producer Headers
#include <OpenSG/OSGEventProducer.h>
#include <OpenSG/OSGEventProducerType.h>
#include <OpenSG/OSGMethodDescription.h>
#include <OpenSG/OSGEventProducerPtrType.h>

OSG_BEGIN_NAMESPACE

class Project;

//! \brief Project Base Class.

class KE_KABALAENGINE_DLLMAPPING ProjectBase : public AttachmentContainer
{
  public:

    typedef AttachmentContainer Inherited;
    typedef AttachmentContainer ParentContainer;

    typedef Inherited::TypeObject TypeObject;
    typedef TypeObject::InitPhase InitPhase;

    OSG_GEN_INTERNALPTR(Project);

    /*==========================  PUBLIC  =================================*/

  public:

    enum
    {
        VersionFieldId = Inherited::NextFieldId,
        MainWindowTitleFieldId = VersionFieldId + 1,
        FilePathFieldId = MainWindowTitleFieldId + 1,
        ScenesFieldId = FilePathFieldId + 1,
        InitialSceneFieldId = ScenesFieldId + 1,
        InternalActiveSceneFieldId = InitialSceneFieldId + 1,
        BackgroundsFieldId = InternalActiveSceneFieldId + 1,
        InternalActiveBackgroundFieldId = BackgroundsFieldId + 1,
        ForegroundsFieldId = InternalActiveBackgroundFieldId + 1,
        InternalActiveForegroundsFieldId = ForegroundsFieldId + 1,
        GlobalActiveForegroundsFieldId = InternalActiveForegroundsFieldId + 1,
        ModelNodesFieldId = GlobalActiveForegroundsFieldId + 1,
        InternalActiveModelNodesFieldId = ModelNodesFieldId + 1,
        GlobalActiveModelNodesFieldId = InternalActiveModelNodesFieldId + 1,
        CamerasFieldId = GlobalActiveModelNodesFieldId + 1,
        InternalActiveCameraFieldId = CamerasFieldId + 1,
        ActiveAnimationsFieldId = InternalActiveCameraFieldId + 1,
        ActiveParticleSystemsFieldId = ActiveAnimationsFieldId + 1,
        LuaModuleFieldId = ActiveParticleSystemsFieldId + 1,
        LuaModulesDirectoryFieldId = LuaModuleFieldId + 1,
        EventProducerFieldId = LuaModulesDirectoryFieldId + 1,
        NextFieldId = EventProducerFieldId + 1
    };

    static const OSG::BitVector VersionFieldMask =
        (TypeTraits<BitVector>::One << VersionFieldId);
    static const OSG::BitVector MainWindowTitleFieldMask =
        (TypeTraits<BitVector>::One << MainWindowTitleFieldId);
    static const OSG::BitVector FilePathFieldMask =
        (TypeTraits<BitVector>::One << FilePathFieldId);
    static const OSG::BitVector ScenesFieldMask =
        (TypeTraits<BitVector>::One << ScenesFieldId);
    static const OSG::BitVector InitialSceneFieldMask =
        (TypeTraits<BitVector>::One << InitialSceneFieldId);
    static const OSG::BitVector InternalActiveSceneFieldMask =
        (TypeTraits<BitVector>::One << InternalActiveSceneFieldId);
    static const OSG::BitVector BackgroundsFieldMask =
        (TypeTraits<BitVector>::One << BackgroundsFieldId);
    static const OSG::BitVector InternalActiveBackgroundFieldMask =
        (TypeTraits<BitVector>::One << InternalActiveBackgroundFieldId);
    static const OSG::BitVector ForegroundsFieldMask =
        (TypeTraits<BitVector>::One << ForegroundsFieldId);
    static const OSG::BitVector InternalActiveForegroundsFieldMask =
        (TypeTraits<BitVector>::One << InternalActiveForegroundsFieldId);
    static const OSG::BitVector GlobalActiveForegroundsFieldMask =
        (TypeTraits<BitVector>::One << GlobalActiveForegroundsFieldId);
    static const OSG::BitVector ModelNodesFieldMask =
        (TypeTraits<BitVector>::One << ModelNodesFieldId);
    static const OSG::BitVector InternalActiveModelNodesFieldMask =
        (TypeTraits<BitVector>::One << InternalActiveModelNodesFieldId);
    static const OSG::BitVector GlobalActiveModelNodesFieldMask =
        (TypeTraits<BitVector>::One << GlobalActiveModelNodesFieldId);
    static const OSG::BitVector CamerasFieldMask =
        (TypeTraits<BitVector>::One << CamerasFieldId);
    static const OSG::BitVector InternalActiveCameraFieldMask =
        (TypeTraits<BitVector>::One << InternalActiveCameraFieldId);
    static const OSG::BitVector ActiveAnimationsFieldMask =
        (TypeTraits<BitVector>::One << ActiveAnimationsFieldId);
    static const OSG::BitVector ActiveParticleSystemsFieldMask =
        (TypeTraits<BitVector>::One << ActiveParticleSystemsFieldId);
    static const OSG::BitVector LuaModuleFieldMask =
        (TypeTraits<BitVector>::One << LuaModuleFieldId);
    static const OSG::BitVector LuaModulesDirectoryFieldMask =
        (TypeTraits<BitVector>::One << LuaModulesDirectoryFieldId);
    static const OSG::BitVector EventProducerFieldMask =
        (TypeTraits<BitVector>::One << EventProducerFieldId);
    static const OSG::BitVector NextFieldMask =
        (TypeTraits<BitVector>::One << NextFieldId);
        
    typedef SFString          SFVersionType;
    typedef SFString          SFMainWindowTitleType;
    typedef SFBoostPath       SFFilePathType;
    typedef MFUnrecScenePtr   MFScenesType;
    typedef SFUnrecScenePtr   SFInitialSceneType;
    typedef SFUnrecScenePtr   SFInternalActiveSceneType;
    typedef MFUnrecBackgroundPtr MFBackgroundsType;
    typedef SFUnrecBackgroundPtr SFInternalActiveBackgroundType;
    typedef MFUnrecForegroundPtr MFForegroundsType;
    typedef MFUnrecForegroundPtr MFInternalActiveForegroundsType;
    typedef MFUnrecForegroundPtr MFGlobalActiveForegroundsType;
    typedef MFUnrecNodePtr    MFModelNodesType;
    typedef MFUnrecNodePtr    MFInternalActiveModelNodesType;
    typedef MFUnrecNodePtr    MFGlobalActiveModelNodesType;
    typedef MFUnrecCameraPtr  MFCamerasType;
    typedef SFUnrecCameraPtr  SFInternalActiveCameraType;
    typedef MFUnrecAnimationPtr MFActiveAnimationsType;
    typedef MFUnrecParticleSystemPtr MFActiveParticleSystemsType;
    typedef SFBoostPath       SFLuaModuleType;
    typedef SFBoostPath       SFLuaModulesDirectoryType;
    typedef SFEventProducerPtr          SFEventProducerType;

    enum
    {
        ProjectStartedMethodId = 1,
        ProjectStoppingMethodId = ProjectStartedMethodId + 1,
        ProjectStoppedMethodId = ProjectStoppingMethodId + 1,
        ProjectResetMethodId = ProjectStoppedMethodId + 1,
        SceneChangedMethodId = ProjectResetMethodId + 1,
        WindowOpenedMethodId = SceneChangedMethodId + 1,
        WindowClosingMethodId = WindowOpenedMethodId + 1,
        WindowClosedMethodId = WindowClosingMethodId + 1,
        WindowIconifiedMethodId = WindowClosedMethodId + 1,
        WindowDeiconifiedMethodId = WindowIconifiedMethodId + 1,
        WindowActivatedMethodId = WindowDeiconifiedMethodId + 1,
        WindowDeactivatedMethodId = WindowActivatedMethodId + 1,
        WindowEnteredMethodId = WindowDeactivatedMethodId + 1,
        WindowExitedMethodId = WindowEnteredMethodId + 1,
        MouseClickedMethodId = WindowExitedMethodId + 1,
        MouseEnteredMethodId = MouseClickedMethodId + 1,
        MouseExitedMethodId = MouseEnteredMethodId + 1,
        MousePressedMethodId = MouseExitedMethodId + 1,
        MouseReleasedMethodId = MousePressedMethodId + 1,
        MouseMovedMethodId = MouseReleasedMethodId + 1,
        MouseDraggedMethodId = MouseMovedMethodId + 1,
        MouseWheelMovedMethodId = MouseDraggedMethodId + 1,
        KeyPressedMethodId = MouseWheelMovedMethodId + 1,
        KeyReleasedMethodId = KeyPressedMethodId + 1,
        KeyTypedMethodId = KeyReleasedMethodId + 1,
        UpdateMethodId = KeyTypedMethodId + 1,
        NextProducedMethodId = UpdateMethodId + 1
    };

    /*---------------------------------------------------------------------*/
    /*! \name                    Class Get                                 */
    /*! \{                                                                 */

    static FieldContainerType &getClassType   (void);
    static UInt32              getClassTypeId (void);
    static UInt16              getClassGroupId(void);
    static const  EventProducerType  &getProducerClassType  (void);
    static        UInt32              getProducerClassTypeId(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                FieldContainer Get                            */
    /*! \{                                                                 */

    virtual       FieldContainerType &getType         (void);
    virtual const FieldContainerType &getType         (void) const;

    virtual       UInt32              getContainerSize(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */


                  SFString            *editSFVersion        (void);
            const SFString            *getSFVersion         (void) const;

                  SFString            *editSFMainWindowTitle(void);
            const SFString            *getSFMainWindowTitle (void) const;

                  SFBoostPath         *editSFFilePath       (void);
            const SFBoostPath         *getSFFilePath        (void) const;
            const MFUnrecScenePtr     *getMFScenes         (void) const;
                  MFUnrecScenePtr     *editMFScenes         (void);
            const SFUnrecScenePtr     *getSFInitialScene   (void) const;
                  SFUnrecScenePtr     *editSFInitialScene   (void);
            const MFUnrecBackgroundPtr *getMFBackgrounds    (void) const;
                  MFUnrecBackgroundPtr *editMFBackgrounds    (void);
            const MFUnrecForegroundPtr *getMFForegrounds    (void) const;
                  MFUnrecForegroundPtr *editMFForegrounds    (void);
            const MFUnrecForegroundPtr *getMFGlobalActiveForegrounds(void) const;
                  MFUnrecForegroundPtr *editMFGlobalActiveForegrounds(void);
            const MFUnrecNodePtr      *getMFModelNodes     (void) const;
                  MFUnrecNodePtr      *editMFModelNodes     (void);
            const MFUnrecNodePtr      *getMFGlobalActiveModelNodes(void) const;
                  MFUnrecNodePtr      *editMFGlobalActiveModelNodes(void);
            const MFUnrecCameraPtr    *getMFCameras        (void) const;
                  MFUnrecCameraPtr    *editMFCameras        (void);

                  SFBoostPath         *editSFLuaModule      (void);
            const SFBoostPath         *getSFLuaModule       (void) const;

                  SFBoostPath         *editSFLuaModulesDirectory(void);
            const SFBoostPath         *getSFLuaModulesDirectory (void) const;


                  std::string         &editVersion        (void);
            const std::string         &getVersion         (void) const;

                  std::string         &editMainWindowTitle(void);
            const std::string         &getMainWindowTitle (void) const;

                  BoostPath           &editFilePath       (void);
            const BoostPath           &getFilePath        (void) const;

                  Scene * getScenes         (const UInt32 index) const;

                  Scene * getInitialScene   (void) const;

                  Background * getBackgrounds    (const UInt32 index) const;

                  Foreground * getForegrounds    (const UInt32 index) const;

                  Foreground * getGlobalActiveForegrounds(const UInt32 index) const;

                  Node * getModelNodes     (const UInt32 index) const;

                  Node * getGlobalActiveModelNodes(const UInt32 index) const;

                  Camera * getCameras        (const UInt32 index) const;

                  BoostPath           &editLuaModule      (void);
            const BoostPath           &getLuaModule       (void) const;

                  BoostPath           &editLuaModulesDirectory(void);
            const BoostPath           &getLuaModulesDirectory (void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

            void setVersion        (const std::string &value);
            void setMainWindowTitle(const std::string &value);
            void setFilePath       (const BoostPath &value);
            void setInitialScene   (Scene * const value);
            void setLuaModule      (const BoostPath &value);
            void setLuaModulesDirectory(const BoostPath &value);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr Field Set                                 */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr MField Set                                */
    /*! \{                                                                 */

    void pushToScenes              (Scene * const value   );
    void assignScenes             (const MFUnrecScenePtr   &value);
    void removeFromScenes (UInt32               uiIndex );
    void removeObjFromScenes(Scene * const value   );
    void clearScenes                (void                         );

    void pushToBackgrounds           (Background * const value   );
    void assignBackgrounds          (const MFUnrecBackgroundPtr &value);
    void removeFromBackgrounds (UInt32               uiIndex );
    void removeObjFromBackgrounds(Background * const value   );
    void clearBackgrounds            (void                         );

    void pushToForegrounds           (Foreground * const value   );
    void assignForegrounds          (const MFUnrecForegroundPtr &value);
    void removeFromForegrounds (UInt32               uiIndex );
    void removeObjFromForegrounds(Foreground * const value   );
    void clearForegrounds            (void                         );

    void pushToGlobalActiveForegrounds           (Foreground * const value   );
    void assignGlobalActiveForegrounds          (const MFUnrecForegroundPtr &value);
    void removeFromGlobalActiveForegrounds (UInt32               uiIndex );
    void removeObjFromGlobalActiveForegrounds(Foreground * const value   );
    void clearGlobalActiveForegrounds            (void                         );

    void pushToModelNodes           (Node * const value   );
    void assignModelNodes          (const MFUnrecNodePtr    &value);
    void removeFromModelNodes (UInt32               uiIndex );
    void removeObjFromModelNodes(Node * const value   );
    void clearModelNodes            (void                         );

    void pushToGlobalActiveModelNodes           (Node * const value   );
    void assignGlobalActiveModelNodes          (const MFUnrecNodePtr    &value);
    void removeFromGlobalActiveModelNodes (UInt32               uiIndex );
    void removeObjFromGlobalActiveModelNodes(Node * const value   );
    void clearGlobalActiveModelNodes            (void                         );

    void pushToCameras             (Camera * const value   );
    void assignCameras            (const MFUnrecCameraPtr  &value);
    void removeFromCameras (UInt32               uiIndex );
    void removeObjFromCameras(Camera * const value   );
    void clearCameras               (void                         );

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Binary Access                              */
    /*! \{                                                                 */

    virtual UInt32 getBinSize (ConstFieldMaskArg  whichField);
    virtual void   copyToBin  (BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);
    virtual void   copyFromBin(BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Method Produced Get                           */
    /*! \{                                                                 */

    virtual const EventProducerType &getProducerType(void) const; 

    EventConnection          attachActivity             (ActivityRefPtr TheActivity,
                                                         UInt32 ProducedEventId);
    bool                     isActivityAttached         (ActivityRefPtr TheActivity,
                                                         UInt32 ProducedEventId) const;
    UInt32                   getNumActivitiesAttached   (UInt32 ProducedEventId) const;
    ActivityRefPtr           getAttachedActivity        (UInt32 ProducedEventId,
                                                         UInt32 ActivityIndex) const;
    void                     detachActivity             (ActivityRefPtr TheActivity,
                                                         UInt32 ProducedEventId);
    UInt32                   getNumProducedEvents       (void) const;
    const MethodDescription *getProducedEventDescription(const std::string &ProducedEventName) const;
    const MethodDescription *getProducedEventDescription(UInt32 ProducedEventId) const;
    UInt32                   getProducedEventId         (const std::string &ProducedEventName) const;

    SFEventProducerPtr *editSFEventProducer(void);
    EventProducerPtr   &editEventProducer  (void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Construction                               */
    /*! \{                                                                 */

    static  ProjectTransitPtr  create          (void);
    static  Project           *createEmpty     (void);

    static  ProjectTransitPtr  createLocal     (
                                               BitVector bFlags = FCLocal::All);

    static  Project            *createEmptyLocal(
                                              BitVector bFlags = FCLocal::All);

    static  ProjectTransitPtr  createDependent  (BitVector bFlags);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Copy                                   */
    /*! \{                                                                 */

    virtual FieldContainerTransitPtr shallowCopy     (void) const;
    virtual FieldContainerTransitPtr shallowCopyLocal(
                                       BitVector bFlags = FCLocal::All) const;
    virtual FieldContainerTransitPtr shallowCopyDependent(
                                                      BitVector bFlags) const;

    /*! \}                                                                 */
    /*=========================  PROTECTED  ===============================*/

  protected:
    /*---------------------------------------------------------------------*/
    /*! \name                    Event Producer                            */
    /*! \{                                                                 */
    EventProducer _Producer;

    /*! \}                                                                 */

    static TypeObject _type;

    static       void   classDescInserter(TypeObject &oType);
    static const Char8 *getClassname     (void             );

    /*---------------------------------------------------------------------*/
    /*! \name                      Fields                                  */
    /*! \{                                                                 */

    SFString          _sfVersion;
    SFString          _sfMainWindowTitle;
    SFBoostPath       _sfFilePath;
    MFUnrecScenePtr   _mfScenes;
    SFUnrecScenePtr   _sfInitialScene;
    SFUnrecScenePtr   _sfInternalActiveScene;
    MFUnrecBackgroundPtr _mfBackgrounds;
    SFUnrecBackgroundPtr _sfInternalActiveBackground;
    MFUnrecForegroundPtr _mfForegrounds;
    MFUnrecForegroundPtr _mfInternalActiveForegrounds;
    MFUnrecForegroundPtr _mfGlobalActiveForegrounds;
    MFUnrecNodePtr    _mfModelNodes;
    MFUnrecNodePtr    _mfInternalActiveModelNodes;
    MFUnrecNodePtr    _mfGlobalActiveModelNodes;
    MFUnrecCameraPtr  _mfCameras;
    SFUnrecCameraPtr  _sfInternalActiveCamera;
    MFUnrecAnimationPtr _mfActiveAnimations;
    MFUnrecParticleSystemPtr _mfActiveParticleSystems;
    SFBoostPath       _sfLuaModule;
    SFBoostPath       _sfLuaModulesDirectory;
    SFEventProducerPtr _sfEventProducer;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Constructors                               */
    /*! \{                                                                 */

    ProjectBase(void);
    ProjectBase(const ProjectBase &source);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Destructors                                */
    /*! \{                                                                 */

    virtual ~ProjectBase(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     onCreate                                */
    /*! \{                                                                 */

    void onCreate(const Project *source = NULL);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Generic Field Access                      */
    /*! \{                                                                 */

    GetFieldHandlePtr  getHandleVersion         (void) const;
    EditFieldHandlePtr editHandleVersion        (void);
    GetFieldHandlePtr  getHandleMainWindowTitle (void) const;
    EditFieldHandlePtr editHandleMainWindowTitle(void);
    GetFieldHandlePtr  getHandleFilePath        (void) const;
    EditFieldHandlePtr editHandleFilePath       (void);
    GetFieldHandlePtr  getHandleScenes          (void) const;
    EditFieldHandlePtr editHandleScenes         (void);
    GetFieldHandlePtr  getHandleInitialScene    (void) const;
    EditFieldHandlePtr editHandleInitialScene   (void);
    GetFieldHandlePtr  getHandleInternalActiveScene (void) const;
    EditFieldHandlePtr editHandleInternalActiveScene(void);
    GetFieldHandlePtr  getHandleBackgrounds     (void) const;
    EditFieldHandlePtr editHandleBackgrounds    (void);
    GetFieldHandlePtr  getHandleInternalActiveBackground (void) const;
    EditFieldHandlePtr editHandleInternalActiveBackground(void);
    GetFieldHandlePtr  getHandleForegrounds     (void) const;
    EditFieldHandlePtr editHandleForegrounds    (void);
    GetFieldHandlePtr  getHandleInternalActiveForegrounds (void) const;
    EditFieldHandlePtr editHandleInternalActiveForegrounds(void);
    GetFieldHandlePtr  getHandleGlobalActiveForegrounds (void) const;
    EditFieldHandlePtr editHandleGlobalActiveForegrounds(void);
    GetFieldHandlePtr  getHandleModelNodes      (void) const;
    EditFieldHandlePtr editHandleModelNodes     (void);
    GetFieldHandlePtr  getHandleInternalActiveModelNodes (void) const;
    EditFieldHandlePtr editHandleInternalActiveModelNodes(void);
    GetFieldHandlePtr  getHandleGlobalActiveModelNodes (void) const;
    EditFieldHandlePtr editHandleGlobalActiveModelNodes(void);
    GetFieldHandlePtr  getHandleCameras         (void) const;
    EditFieldHandlePtr editHandleCameras        (void);
    GetFieldHandlePtr  getHandleInternalActiveCamera (void) const;
    EditFieldHandlePtr editHandleInternalActiveCamera(void);
    GetFieldHandlePtr  getHandleActiveAnimations (void) const;
    EditFieldHandlePtr editHandleActiveAnimations(void);
    GetFieldHandlePtr  getHandleActiveParticleSystems (void) const;
    EditFieldHandlePtr editHandleActiveParticleSystems(void);
    GetFieldHandlePtr  getHandleLuaModule       (void) const;
    EditFieldHandlePtr editHandleLuaModule      (void);
    GetFieldHandlePtr  getHandleLuaModulesDirectory (void) const;
    EditFieldHandlePtr editHandleLuaModulesDirectory(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */

            const SFUnrecScenePtr     *getSFInternalActiveScene (void) const;
                  SFUnrecScenePtr     *editSFInternalActiveScene(void);
            const SFUnrecBackgroundPtr *getSFInternalActiveBackground (void) const;
                  SFUnrecBackgroundPtr *editSFInternalActiveBackground(void);
            const MFUnrecForegroundPtr *getMFInternalActiveForegrounds (void) const;
                  MFUnrecForegroundPtr *editMFInternalActiveForegrounds(void);
            const MFUnrecNodePtr      *getMFInternalActiveModelNodes (void) const;
                  MFUnrecNodePtr      *editMFInternalActiveModelNodes(void);
            const SFUnrecCameraPtr    *getSFInternalActiveCamera (void) const;
                  SFUnrecCameraPtr    *editSFInternalActiveCamera(void);
            const MFUnrecAnimationPtr *getMFActiveAnimations (void) const;
                  MFUnrecAnimationPtr *editMFActiveAnimations(void);
            const MFUnrecParticleSystemPtr *getMFActiveParticleSystems (void) const;
                  MFUnrecParticleSystemPtr *editMFActiveParticleSystems(void);


                  Scene * getInternalActiveScene(void) const;

                  Background * getInternalActiveBackground(void) const;

                  Foreground * getInternalActiveForegrounds(const UInt32 index) const;

                  Node * getInternalActiveModelNodes(const UInt32 index) const;

                  Camera * getInternalActiveCamera(void) const;

                  Animation * getActiveAnimations(const UInt32 index) const;

                  ParticleSystem * getActiveParticleSystems(const UInt32 index) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

            void setInternalActiveScene(Scene * const value);
            void setInternalActiveBackground(Background * const value);
            void setInternalActiveCamera(Camera * const value);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr MField Set                                */
    /*! \{                                                                 */

    void pushToInternalActiveForegrounds           (Foreground * const value   );
    void assignInternalActiveForegrounds           (const MFUnrecForegroundPtr &value);
    void removeFromInternalActiveForegrounds (UInt32                uiIndex );
    void removeObjFromInternalActiveForegrounds(Foreground * const value   );
    void clearInternalActiveForegrounds            (void                          );

    void pushToInternalActiveModelNodes           (Node * const value   );
    void assignInternalActiveModelNodes           (const MFUnrecNodePtr    &value);
    void removeFromInternalActiveModelNodes (UInt32                uiIndex );
    void removeObjFromInternalActiveModelNodes(Node * const value   );
    void clearInternalActiveModelNodes            (void                          );

    void pushToActiveAnimations           (Animation * const value   );
    void assignActiveAnimations           (const MFUnrecAnimationPtr &value);
    void removeFromActiveAnimations (UInt32                uiIndex );
    void removeObjFromActiveAnimations(Animation * const value   );
    void clearActiveAnimations            (void                          );

    void pushToActiveParticleSystems           (ParticleSystem * const value   );
    void assignActiveParticleSystems           (const MFUnrecParticleSystemPtr &value);
    void removeFromActiveParticleSystems (UInt32                uiIndex );
    void removeObjFromActiveParticleSystems(ParticleSystem * const value   );
    void clearActiveParticleSystems            (void                          );

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual void execSyncV(      FieldContainer    &oFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);

            void execSync (      ProjectBase *pFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     Aspect Create                            */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual FieldContainer *createAspectCopy(
                                    const FieldContainer *pRefAspect) const;
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */
    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

    virtual void resolveLinks(void);

    /*! \}                                                                 */
    /*==========================  PRIVATE  ================================*/

  private:
    /*---------------------------------------------------------------------*/
    static MethodDescription   *_methodDesc[];
    static EventProducerType _producerType;


    // prohibit default functions (move to 'public' if you need one)
    void operator =(const ProjectBase &source);
};

typedef ProjectBase *ProjectBaseP;

OSG_END_NAMESPACE

#endif /* _KEPROJECTBASE_H_ */
