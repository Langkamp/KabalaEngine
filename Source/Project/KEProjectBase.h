/*---------------------------------------------------------------------------*\
 *                             Kabala Engine                                 *
 *                                                                           *
 *                         www.vrac.iastate.edu                              *
 *                                                                           *
 *   Authors: David Kabala (dkabala@vrac.iastate.edu)                        *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 3.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class Project
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _KEPROJECTBASE_H_
#define _KEPROJECTBASE_H_
#ifdef __sgi
#pragma once
#endif


#include "KEConfig.h"
#include <KEKabalaEngineDef.h>

#include <OpenSG/OSGBaseTypes.h>
#include <OpenSG/OSGRefPtr.h>
#include <OpenSG/OSGCoredNodePtr.h>

#include <OpenSG/OSGFieldContainer.h> // Parent
#include <OpenSG/OSGStringFields.h> // Name type
#include <OpenSG/OSGStringFields.h> // MainWindowTitle type
#include <OpenSG/Toolbox/OSGPathType.h> // FilePath type
#include <Project/Scene/KESceneFields.h> // Scenes type
#include <Project/Scene/KESceneFields.h> // InitialScene type
#include <Project/Scene/KESceneFields.h> // InternalActiveScene type
#include <OpenSG/OSGBackgroundFields.h> // Backgrounds type
#include <OpenSG/OSGBackgroundFields.h> // InternalActiveBackground type
#include <OpenSG/OSGForegroundFields.h> // Foregrounds type
#include <OpenSG/OSGForegroundFields.h> // InternalActiveForegrounds type
#include <OpenSG/OSGForegroundFields.h> // GlobalActiveForegrounds type
#include <OpenSG/OSGNodeFields.h> // ModelNodes type
#include <OpenSG/OSGNodeFields.h> // InternalActiveModelNodes type
#include <OpenSG/OSGNodeFields.h> // GlobalActiveModelNodes type
#include <OpenSG/OSGCameraFields.h> // Cameras type
#include <OpenSG/OSGCameraFields.h> // InternalActiveCamera type
#include <OpenSG/OSGViewportFields.h> // InternalActiveViewport type
#include <OpenSG/Animation/OSGAnimation.h> // ActiveAnimations type
#include <OpenSG/ParticleSystem/OSGParticleSystem.h> // ActiveParticleSystems type

#include "KEProjectFields.h"

OSG_USING_NAMESPACE
KE_BEGIN_NAMESPACE

class Project;
class osg::BinaryDataHandler;

//! \brief Project Base Class.

class KE_KABALAENGINELIB_DLLMAPPING ProjectBase : public FieldContainer
{
  private:

    typedef FieldContainer    Inherited;

    /*==========================  PUBLIC  =================================*/
  public:

    typedef ProjectPtr  Ptr;

    enum
    {
        NameFieldId                      = Inherited::NextFieldId,
        MainWindowTitleFieldId           = NameFieldId                      + 1,
        FilePathFieldId                  = MainWindowTitleFieldId           + 1,
        ScenesFieldId                    = FilePathFieldId                  + 1,
        InitialSceneFieldId              = ScenesFieldId                    + 1,
        InternalActiveSceneFieldId       = InitialSceneFieldId              + 1,
        BackgroundsFieldId               = InternalActiveSceneFieldId       + 1,
        InternalActiveBackgroundFieldId  = BackgroundsFieldId               + 1,
        ForegroundsFieldId               = InternalActiveBackgroundFieldId  + 1,
        InternalActiveForegroundsFieldId = ForegroundsFieldId               + 1,
        GlobalActiveForegroundsFieldId   = InternalActiveForegroundsFieldId + 1,
        ModelNodesFieldId                = GlobalActiveForegroundsFieldId   + 1,
        InternalActiveModelNodesFieldId  = ModelNodesFieldId                + 1,
        GlobalActiveModelNodesFieldId    = InternalActiveModelNodesFieldId  + 1,
        CamerasFieldId                   = GlobalActiveModelNodesFieldId    + 1,
        InternalActiveCameraFieldId      = CamerasFieldId                   + 1,
        InternalActiveViewportFieldId    = InternalActiveCameraFieldId      + 1,
        ActiveAnimationsFieldId          = InternalActiveViewportFieldId    + 1,
        ActiveParticleSystemsFieldId     = ActiveAnimationsFieldId          + 1,
        NextFieldId                      = ActiveParticleSystemsFieldId     + 1
    };

    static const OSG::BitVector NameFieldMask;
    static const OSG::BitVector MainWindowTitleFieldMask;
    static const OSG::BitVector FilePathFieldMask;
    static const OSG::BitVector ScenesFieldMask;
    static const OSG::BitVector InitialSceneFieldMask;
    static const OSG::BitVector InternalActiveSceneFieldMask;
    static const OSG::BitVector BackgroundsFieldMask;
    static const OSG::BitVector InternalActiveBackgroundFieldMask;
    static const OSG::BitVector ForegroundsFieldMask;
    static const OSG::BitVector InternalActiveForegroundsFieldMask;
    static const OSG::BitVector GlobalActiveForegroundsFieldMask;
    static const OSG::BitVector ModelNodesFieldMask;
    static const OSG::BitVector InternalActiveModelNodesFieldMask;
    static const OSG::BitVector GlobalActiveModelNodesFieldMask;
    static const OSG::BitVector CamerasFieldMask;
    static const OSG::BitVector InternalActiveCameraFieldMask;
    static const OSG::BitVector InternalActiveViewportFieldMask;
    static const OSG::BitVector ActiveAnimationsFieldMask;
    static const OSG::BitVector ActiveParticleSystemsFieldMask;


    static const OSG::BitVector MTInfluenceMask;

    /*---------------------------------------------------------------------*/
    /*! \name                    Class Get                                 */
    /*! \{                                                                 */

    static        FieldContainerType &getClassType    (void); 
    static        UInt32              getClassTypeId  (void); 

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                FieldContainer Get                            */
    /*! \{                                                                 */

    virtual       FieldContainerType &getType  (void); 
    virtual const FieldContainerType &getType  (void) const; 

    virtual       UInt32              getContainerSize(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */

           SFString            *getSFName           (void);
           SFString            *getSFMainWindowTitle(void);
           SFPath              *getSFFilePath       (void);
           MFScenePtr          *getMFScenes         (void);
           SFScenePtr          *getSFInitialScene   (void);
           MFBackgroundPtr     *getMFBackgrounds    (void);
           MFForegroundPtr     *getMFForegrounds    (void);
           MFForegroundPtr     *getMFGlobalActiveForegrounds(void);
           MFNodePtr           *getMFModelNodes     (void);
           MFNodePtr           *getMFGlobalActiveModelNodes(void);
           MFCameraPtr         *getMFCameras        (void);

           std::string         &getName           (void);
     const std::string         &getName           (void) const;
           std::string         &getMainWindowTitle(void);
     const std::string         &getMainWindowTitle(void) const;
           Path                &getFilePath       (void);
     const Path                &getFilePath       (void) const;
           ScenePtr            &getInitialScene   (void);
     const ScenePtr            &getInitialScene   (void) const;
           ScenePtr            &getScenes         (const UInt32 index);
           MFScenePtr          &getScenes         (void);
     const MFScenePtr          &getScenes         (void) const;
           BackgroundPtr       &getBackgrounds    (const UInt32 index);
           MFBackgroundPtr     &getBackgrounds    (void);
     const MFBackgroundPtr     &getBackgrounds    (void) const;
           ForegroundPtr       &getForegrounds    (const UInt32 index);
           MFForegroundPtr     &getForegrounds    (void);
     const MFForegroundPtr     &getForegrounds    (void) const;
           ForegroundPtr       &getGlobalActiveForegrounds(const UInt32 index);
           MFForegroundPtr     &getGlobalActiveForegrounds(void);
     const MFForegroundPtr     &getGlobalActiveForegrounds(void) const;
           NodePtr             &getModelNodes     (const UInt32 index);
           MFNodePtr           &getModelNodes     (void);
     const MFNodePtr           &getModelNodes     (void) const;
           NodePtr             &getGlobalActiveModelNodes(const UInt32 index);
           MFNodePtr           &getGlobalActiveModelNodes(void);
     const MFNodePtr           &getGlobalActiveModelNodes(void) const;
           CameraPtr           &getCameras        (const UInt32 index);
           MFCameraPtr         &getCameras        (void);
     const MFCameraPtr         &getCameras        (void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

     void setName           ( const std::string &value );
     void setMainWindowTitle( const std::string &value );
     void setFilePath       ( const Path &value );
     void setInitialScene   ( const ScenePtr &value );

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Binary Access                              */
    /*! \{                                                                 */

    virtual UInt32 getBinSize (const BitVector         &whichField);
    virtual void   copyToBin  (      BinaryDataHandler &pMem,
                               const BitVector         &whichField);
    virtual void   copyFromBin(      BinaryDataHandler &pMem,
                               const BitVector         &whichField);


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Construction                               */
    /*! \{                                                                 */

    static  ProjectPtr      create          (void); 
    static  ProjectPtr      createEmpty     (void); 

    /*! \}                                                                 */

    /*---------------------------------------------------------------------*/
    /*! \name                       Copy                                   */
    /*! \{                                                                 */

    virtual FieldContainerPtr     shallowCopy     (void) const; 

    /*! \}                                                                 */
    /*=========================  PROTECTED  ===============================*/
  protected:

    /*---------------------------------------------------------------------*/
    /*! \name                      Fields                                  */
    /*! \{                                                                 */

    SFString            _sfName;
    SFString            _sfMainWindowTitle;
    SFPath              _sfFilePath;
    MFScenePtr          _mfScenes;
    SFScenePtr          _sfInitialScene;
    SFScenePtr          _sfInternalActiveScene;
    MFBackgroundPtr     _mfBackgrounds;
    SFBackgroundPtr     _sfInternalActiveBackground;
    MFForegroundPtr     _mfForegrounds;
    MFForegroundPtr     _mfInternalActiveForegrounds;
    MFForegroundPtr     _mfGlobalActiveForegrounds;
    MFNodePtr           _mfModelNodes;
    MFNodePtr           _mfInternalActiveModelNodes;
    MFNodePtr           _mfGlobalActiveModelNodes;
    MFCameraPtr         _mfCameras;
    SFCameraPtr         _sfInternalActiveCamera;
    SFViewportPtr       _sfInternalActiveViewport;
    MFAnimationPtr      _mfActiveAnimations;
    MFParticleSystemPtr   _mfActiveParticleSystems;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Constructors                               */
    /*! \{                                                                 */

    ProjectBase(void);
    ProjectBase(const ProjectBase &source);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Destructors                                */
    /*! \{                                                                 */

    virtual ~ProjectBase(void); 

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */

           SFScenePtr          *getSFInternalActiveScene(void);
           SFBackgroundPtr     *getSFInternalActiveBackground(void);
           MFForegroundPtr     *getMFInternalActiveForegrounds(void);
           MFNodePtr           *getMFInternalActiveModelNodes(void);
           SFCameraPtr         *getSFInternalActiveCamera(void);
           SFViewportPtr       *getSFInternalActiveViewport(void);
           MFAnimationPtr      *getMFActiveAnimations(void);
           MFParticleSystemPtr *getMFActiveParticleSystems(void);

           ScenePtr            &getInternalActiveScene(void);
     const ScenePtr            &getInternalActiveScene(void) const;
           BackgroundPtr       &getInternalActiveBackground(void);
     const BackgroundPtr       &getInternalActiveBackground(void) const;
           CameraPtr           &getInternalActiveCamera(void);
     const CameraPtr           &getInternalActiveCamera(void) const;
           ViewportPtr         &getInternalActiveViewport(void);
     const ViewportPtr         &getInternalActiveViewport(void) const;
           ForegroundPtr       &getInternalActiveForegrounds(UInt32 index);
           MFForegroundPtr     &getInternalActiveForegrounds(void);
     const MFForegroundPtr     &getInternalActiveForegrounds(void) const;
           NodePtr             &getInternalActiveModelNodes(UInt32 index);
           MFNodePtr           &getInternalActiveModelNodes(void);
     const MFNodePtr           &getInternalActiveModelNodes(void) const;
           AnimationPtr        &getActiveAnimations(UInt32 index);
           MFAnimationPtr      &getActiveAnimations(void);
     const MFAnimationPtr      &getActiveAnimations(void) const;
           ParticleSystemPtr   &getActiveParticleSystems(UInt32 index);
           MFParticleSystemPtr &getActiveParticleSystems(void);
     const MFParticleSystemPtr &getActiveParticleSystems(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

     void setInternalActiveScene(const ScenePtr &value);
     void setInternalActiveBackground(const BackgroundPtr &value);
     void setInternalActiveCamera(const CameraPtr &value);
     void setInternalActiveViewport(const ViewportPtr &value);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

#if !defined(OSG_FIXED_MFIELDSYNC)
    void executeSyncImpl(      ProjectBase *pOther,
                         const BitVector         &whichField);

    virtual void   executeSync(      FieldContainer    &other,
                               const BitVector         &whichField);
#else
    void executeSyncImpl(      ProjectBase *pOther,
                         const BitVector         &whichField,
                         const SyncInfo          &sInfo     );

    virtual void   executeSync(      FieldContainer    &other,
                               const BitVector         &whichField,
                               const SyncInfo          &sInfo);

    virtual void execBeginEdit     (const BitVector &whichField,
                                          UInt32     uiAspect,
                                          UInt32     uiContainerSize);

            void execBeginEditImpl (const BitVector &whichField,
                                          UInt32     uiAspect,
                                          UInt32     uiContainerSize);

    virtual void onDestroyAspect(UInt32 uiId, UInt32 uiAspect);
#endif

    /*! \}                                                                 */
    /*==========================  PRIVATE  ================================*/
  private:

    friend class FieldContainer;

    static FieldDescription   *_desc[];
    static FieldContainerType  _type;


    // prohibit default functions (move to 'public' if you need one)
    void operator =(const ProjectBase &source);
};

//---------------------------------------------------------------------------
//   Exported Types
//---------------------------------------------------------------------------


typedef ProjectBase *ProjectBaseP;

typedef osgIF<ProjectBase::isNodeCore,
              CoredNodePtr<Project>,
              FieldContainer::attempt_to_create_CoredNodePtr_on_non_NodeCore_FC
              >::_IRet ProjectNodePtr;

typedef RefPtr<ProjectPtr> ProjectRefPtr;

KE_END_NAMESPACE

#endif /* _KEPROJECTBASE_H_ */
